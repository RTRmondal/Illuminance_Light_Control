
final_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008930  08008930  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008938  08008938  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000078  080089b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  080089b8  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d8d  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003203  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  0003a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  0003b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279ca  00000000  00000000  0003c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019180  00000000  00000000  00063aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1dfb  00000000  00000000  0007cc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005114  00000000  00000000  0016ea1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00173b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008874 	.word	0x08008874

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08008874 	.word	0x08008874

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f107 020f 	add.w	r2, r7, #15
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f001 ff15 	bl	8002c38 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	791b      	ldrb	r3, [r3, #4]
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f107 020f 	add.w	r2, r7, #15
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	f001 ff06 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	b299      	uxth	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2302      	movs	r3, #2
 8000e52:	f001 ffe5 	bl	8002e20 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000e56:	7b3b      	ldrb	r3, [r7, #12]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	7b7a      	ldrb	r2, [r7, #13]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb78 	bl	8000554 <__aeabi_i2d>
 8000e64:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <BH1750_ReadLux+0x58>)
 8000e6a:	f7ff fd07 	bl	800087c <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fde9 	bl	8000a4c <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	ee07 3a90 	vmov	s15, r3
}
 8000e80:	eeb0 0a67 	vmov.f32	s0, s15
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	3ff33333 	.word	0x3ff33333

08000e90 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b81      	ldr	r3, [pc, #516]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a80      	ldr	r2, [pc, #512]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b75      	ldr	r3, [pc, #468]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a74      	ldr	r2, [pc, #464]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a68      	ldr	r2, [pc, #416]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b66      	ldr	r3, [pc, #408]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a62      	ldr	r2, [pc, #392]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b60      	ldr	r3, [pc, #384]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f54:	4856      	ldr	r0, [pc, #344]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000f56:	f001 fd87 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	4855      	ldr	r0, [pc, #340]	; (80010b4 <MX_GPIO_Init+0x224>)
 8000f60:	f001 fd82 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	484f      	ldr	r0, [pc, #316]	; (80010b8 <MX_GPIO_Init+0x228>)
 8000f7c:	f001 fbc8 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4847      	ldr	r0, [pc, #284]	; (80010b8 <MX_GPIO_Init+0x228>)
 8000f9c:	f001 fbb8 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fa0:	2386      	movs	r3, #134	; 0x86
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4840      	ldr	r0, [pc, #256]	; (80010bc <MX_GPIO_Init+0x22c>)
 8000fbc:	f001 fba8 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4835      	ldr	r0, [pc, #212]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000fda:	f001 fb99 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000ffc:	f001 fb88 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x224>)
 8001018:	f001 fb7a 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <MX_GPIO_Init+0x224>)
 8001030:	f001 fb6e 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001034:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001046:	230a      	movs	r3, #10
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <MX_GPIO_Init+0x22c>)
 8001052:	f001 fb5d 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <MX_GPIO_Init+0x22c>)
 800106c:	f001 fb50 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001070:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001082:	230b      	movs	r3, #11
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_GPIO_Init+0x224>)
 800108e:	f001 fb3f 	bl	8002710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f001 fa63 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f001 fa7c 	bl	800259a <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_I2C1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_I2C1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_I2C1_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <MX_I2C1_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <MX_I2C1_Init+0x74>)
 80010fc:	f001 fd0c 	bl	8002b18 <HAL_I2C_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fcdd 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <MX_I2C1_Init+0x74>)
 800110e:	f002 ff45 	bl	8003f9c <HAL_I2CEx_ConfigAnalogFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fcd4 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_I2C1_Init+0x74>)
 8001120:	f002 ff87 	bl	8004032 <HAL_I2CEx_ConfigDigitalFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fccb 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000094 	.word	0x20000094
 8001138:	40005400 	.word	0x40005400
 800113c:	20404768 	.word	0x20404768

08001140 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_I2C2_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_I2C2_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <MX_I2C2_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_I2C2_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_I2C2_Init+0x74>)
 800117c:	f001 fccc 	bl	8002b18 <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 fc9d 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_I2C2_Init+0x74>)
 800118e:	f002 ff05 	bl	8003f9c <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 fc94 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_I2C2_Init+0x74>)
 80011a0:	f002 ff47 	bl	8004032 <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 fc8b 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000e8 	.word	0x200000e8
 80011b8:	40005800 	.word	0x40005800
 80011bc:	20404768 	.word	0x20404768

080011c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ac      	sub	sp, #176	; 0xb0
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	2284      	movs	r2, #132	; 0x84
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fec3 	bl	8007f6c <memset>
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_I2C_MspInit+0x158>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d14d      	bne.n	800128c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fc8e 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800120a:	f000 fc5b 	bl	8001ac4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_I2C_MspInit+0x15c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001240:	2304      	movs	r3, #4
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800124a:	4619      	mov	r1, r3
 800124c:	4834      	ldr	r0, [pc, #208]	; (8001320 <HAL_I2C_MspInit+0x160>)
 800124e:	f001 fa5f 	bl	8002710 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201f      	movs	r0, #31
 8001270:	f001 f977 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001274:	201f      	movs	r0, #31
 8001276:	f001 f990 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2020      	movs	r0, #32
 8001280:	f001 f96f 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001284:	2020      	movs	r0, #32
 8001286:	f001 f988 	bl	800259a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800128a:	e041      	b.n	8001310 <HAL_I2C_MspInit+0x150>
  else if(i2cHandle->Instance==I2C2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_I2C_MspInit+0x164>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d13c      	bne.n	8001310 <HAL_I2C_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fc3a 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0xf6>
      Error_Handler();
 80012b2:	f000 fc07 	bl	8001ac4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e6:	2304      	movs	r3, #4
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0x168>)
 80012f4:	f001 fa0c 	bl	8002710 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
}
 8001310:	bf00      	nop
 8001312:	37b0      	adds	r7, #176	; 0xb0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40005400 	.word	0x40005400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400
 8001324:	40005800 	.word	0x40005800
 8001328:	40021400 	.word	0x40021400

0800132c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001342:	2308      	movs	r3, #8
 8001344:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001346:	2028      	movs	r0, #40	; 0x28
 8001348:	f001 f80c 	bl	8002364 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	2130      	movs	r1, #48	; 0x30
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f829 	bl	80013ac <lcd_write>
	HAL_Delay(5);
 800135a:	2005      	movs	r0, #5
 800135c:	f001 f802 	bl	8002364 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	2130      	movs	r1, #48	; 0x30
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f81f 	bl	80013ac <lcd_write>
	HAL_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fff8 	bl	8002364 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	2130      	movs	r1, #48	; 0x30
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f815 	bl	80013ac <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f80e 	bl	80013ac <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	210c      	movs	r1, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f807 	bl	80013ac <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f89f 	bl	80014e2 <lcd_clear>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	460b      	mov	r3, r1
 80013b8:	71bb      	strb	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80013d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013d8:	f023 030f 	bic.w	r3, r3, #15
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	b299      	uxth	r1, r3
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2304      	movs	r3, #4
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <lcd_write+0x88>)
 8001420:	f001 fc0a 	bl	8002c38 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 ff9d 	bl	8002364 <HAL_Delay>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e8 	.word	0x200000e8

08001438 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	2300      	movs	r3, #0
 8001446:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001452:	2308      	movs	r3, #8
 8001454:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f843 	bl	80014e2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffa1 	bl	80013ac <lcd_write>
	while(lcd->f_line[i])
 800146a:	e00f      	b.n	800148c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7818      	ldrb	r0, [r3, #0]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	7859      	ldrb	r1, [r3, #1]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	f7ff ff93 	bl	80013ac <lcd_write>
		i++;
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	3301      	adds	r3, #1
 800148a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	21c0      	movs	r1, #192	; 0xc0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff81 	bl	80013ac <lcd_write>
	while(lcd->s_line[i])
 80014aa:	e00f      	b.n	80014cc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7818      	ldrb	r0, [r3, #0]
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	7c99      	ldrb	r1, [r3, #18]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	f7ff ff73 	bl	80013ac <lcd_write>
		i++;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	7c9b      	ldrb	r3, [r3, #18]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e9      	bne.n	80014ac <lcd_display+0x74>
	}
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80014f8:	2308      	movs	r3, #8
 80014fa:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	2101      	movs	r1, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff51 	bl	80013ac <lcd_write>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int v1,v2,v3;
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &input, 4);
 800151c:	2204      	movs	r2, #4
 800151e:	495b      	ldr	r1, [pc, #364]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001520:	485b      	ldr	r0, [pc, #364]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 8001522:	f005 fac4 	bl	8006aae <HAL_UART_Receive_IT>
	char idx =input[0];
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	75fb      	strb	r3, [r7, #23]

	if(idx=='S'){
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b53      	cmp	r3, #83	; 0x53
 8001530:	d12c      	bne.n	800158c <HAL_UART_RxCpltCallback+0x78>

		v1 = (int)(input[1]-'0');
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	3b30      	subs	r3, #48	; 0x30
 8001538:	4a56      	ldr	r2, [pc, #344]	; (8001694 <HAL_UART_RxCpltCallback+0x180>)
 800153a:	6013      	str	r3, [r2, #0]
		v2 = (int)(input[2]-'0');
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 800153e:	789b      	ldrb	r3, [r3, #2]
 8001540:	3b30      	subs	r3, #48	; 0x30
 8001542:	4a55      	ldr	r2, [pc, #340]	; (8001698 <HAL_UART_RxCpltCallback+0x184>)
 8001544:	6013      	str	r3, [r2, #0]
		v3 = (int)(input[3]-'0');
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001548:	78db      	ldrb	r3, [r3, #3]
 800154a:	3b30      	subs	r3, #48	; 0x30
 800154c:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_UART_RxCpltCallback+0x188>)
 800154e:	6013      	str	r3, [r2, #0]
		new_set = v1*100+v2*10+v3;
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_UART_RxCpltCallback+0x180>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2264      	movs	r2, #100	; 0x64
 8001556:	fb02 f103 	mul.w	r1, r2, r3
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_UART_RxCpltCallback+0x184>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	18ca      	adds	r2, r1, r3
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <HAL_UART_RxCpltCallback+0x188>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_UART_RxCpltCallback+0x18c>)
 8001570:	6013      	str	r3, [r2, #0]
		set_point=new_set;
 8001572:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <HAL_UART_RxCpltCallback+0x18c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_UART_RxCpltCallback+0x190>)
 8001580:	edc3 7a00 	vstr	s15, [r3]

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	4848      	ldr	r0, [pc, #288]	; (80016a8 <HAL_UART_RxCpltCallback+0x194>)
 8001588:	f001 fa87 	bl	8002a9a <HAL_GPIO_TogglePin>
	}
	 if(idx == 'g'){
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b67      	cmp	r3, #103	; 0x67
 8001590:	d178      	bne.n	8001684 <HAL_UART_RxCpltCallback+0x170>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001592:	2101      	movs	r1, #1
 8001594:	4844      	ldr	r0, [pc, #272]	; (80016a8 <HAL_UART_RxCpltCallback+0x194>)
 8001596:	f001 fa80 	bl	8002a9a <HAL_GPIO_TogglePin>
		int disp_out;
		int disp_set;
		int disp_error;

		disp_out = (int)lightLUXint;
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_UART_RxCpltCallback+0x198>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a4:	ee17 3a90 	vmov	r3, s15
 80015a8:	613b      	str	r3, [r7, #16]
		disp_set = (int)set_point;
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_UART_RxCpltCallback+0x190>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
 80015b8:	60fb      	str	r3, [r7, #12]
		disp_error=(int)error_p;
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_UART_RxCpltCallback+0x19c>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c4:	ee17 3a90 	vmov	r3, s15
 80015c8:	60bb      	str	r3, [r7, #8]

		length1 = snprintf(text1, 20, "SET:%d lux \r\n", disp_set);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a39      	ldr	r2, [pc, #228]	; (80016b4 <HAL_UART_RxCpltCallback+0x1a0>)
 80015ce:	2114      	movs	r1, #20
 80015d0:	4839      	ldr	r0, [pc, #228]	; (80016b8 <HAL_UART_RxCpltCallback+0x1a4>)
 80015d2:	f006 fc77 	bl	8007ec4 <sniprintf>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_UART_RxCpltCallback+0x1a8>)
 80015da:	6013      	str	r3, [r2, #0]
		length2 = snprintf(text2, 20, "OUT:%d lux \r\n", disp_out);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_UART_RxCpltCallback+0x1ac>)
 80015e0:	2114      	movs	r1, #20
 80015e2:	4838      	ldr	r0, [pc, #224]	; (80016c4 <HAL_UART_RxCpltCallback+0x1b0>)
 80015e4:	f006 fc6e 	bl	8007ec4 <sniprintf>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_UART_RxCpltCallback+0x1b4>)
 80015ec:	6013      	str	r3, [r2, #0]
		length3 = snprintf(text3, 20, "ERR:%d lux \r\n", disp_error);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	4a36      	ldr	r2, [pc, #216]	; (80016cc <HAL_UART_RxCpltCallback+0x1b8>)
 80015f2:	2114      	movs	r1, #20
 80015f4:	4836      	ldr	r0, [pc, #216]	; (80016d0 <HAL_UART_RxCpltCallback+0x1bc>)
 80015f6:	f006 fc65 	bl	8007ec4 <sniprintf>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <HAL_UART_RxCpltCallback+0x1c0>)
 80015fe:	6013      	str	r3, [r2, #0]
		length_duty = snprintf(text4, 20, "DUTY:%d %%\r\n", (int)pwm_duty);
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160a:	ee17 3a90 	vmov	r3, s15
 800160e:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_UART_RxCpltCallback+0x1c8>)
 8001610:	2114      	movs	r1, #20
 8001612:	4833      	ldr	r0, [pc, #204]	; (80016e0 <HAL_UART_RxCpltCallback+0x1cc>)
 8001614:	f006 fc56 	bl	8007ec4 <sniprintf>
 8001618:	4603      	mov	r3, r0
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_UART_RxCpltCallback+0x1d0>)
 800161c:	6013      	str	r3, [r2, #0]
		 
		if(input[3]=='U'){
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	2b55      	cmp	r3, #85	; 0x55
 8001624:	d108      	bne.n	8001638 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Transmit(&huart3, (uint8_t*)text1, length1, 100);
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_UART_RxCpltCallback+0x1a8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	4922      	ldr	r1, [pc, #136]	; (80016b8 <HAL_UART_RxCpltCallback+0x1a4>)
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 8001632:	f005 f9b9 	bl	80069a8 <HAL_UART_Transmit>
		else if(input[3]=='D'){
			HAL_UART_Transmit(&huart3, (uint8_t*)text4, length_duty, 100);
		}
	}

}
 8001636:	e025      	b.n	8001684 <HAL_UART_RxCpltCallback+0x170>
		else if(input[3]=='Y'){
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	2b59      	cmp	r3, #89	; 0x59
 800163e:	d108      	bne.n	8001652 <HAL_UART_RxCpltCallback+0x13e>
			HAL_UART_Transmit(&huart3, (uint8_t*)text2, length2, 100);
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29a      	uxth	r2, r3
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	491e      	ldr	r1, [pc, #120]	; (80016c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800164a:	4811      	ldr	r0, [pc, #68]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 800164c:	f005 f9ac 	bl	80069a8 <HAL_UART_Transmit>
}
 8001650:	e018      	b.n	8001684 <HAL_UART_RxCpltCallback+0x170>
		else if(input[3]=='E'){
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b45      	cmp	r3, #69	; 0x45
 8001658:	d108      	bne.n	800166c <HAL_UART_RxCpltCallback+0x158>
			HAL_UART_Transmit(&huart3, (uint8_t*)text3, length3, 100);
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_UART_RxCpltCallback+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	2364      	movs	r3, #100	; 0x64
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_UART_RxCpltCallback+0x1bc>)
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 8001666:	f005 f99f 	bl	80069a8 <HAL_UART_Transmit>
}
 800166a:	e00b      	b.n	8001684 <HAL_UART_RxCpltCallback+0x170>
		else if(input[3]=='D'){
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	2b44      	cmp	r3, #68	; 0x44
 8001672:	d107      	bne.n	8001684 <HAL_UART_RxCpltCallback+0x170>
			HAL_UART_Transmit(&huart3, (uint8_t*)text4, length_duty, 100);
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_UART_RxCpltCallback+0x1d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29a      	uxth	r2, r3
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_UART_RxCpltCallback+0x1cc>)
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 8001680:	f005 f992 	bl	80069a8 <HAL_UART_Transmit>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000164 	.word	0x20000164
 8001690:	20000368 	.word	0x20000368
 8001694:	20000228 	.word	0x20000228
 8001698:	2000022c 	.word	0x2000022c
 800169c:	20000230 	.word	0x20000230
 80016a0:	20000220 	.word	0x20000220
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	40020400 	.word	0x40020400
 80016ac:	200001cc 	.word	0x200001cc
 80016b0:	20000154 	.word	0x20000154
 80016b4:	0800888c 	.word	0x0800888c
 80016b8:	20000168 	.word	0x20000168
 80016bc:	200001b8 	.word	0x200001b8
 80016c0:	0800889c 	.word	0x0800889c
 80016c4:	2000017c 	.word	0x2000017c
 80016c8:	200001bc 	.word	0x200001bc
 80016cc:	080088ac 	.word	0x080088ac
 80016d0:	20000190 	.word	0x20000190
 80016d4:	200001c0 	.word	0x200001c0
 80016d8:	200001d0 	.word	0x200001d0
 80016dc:	080088bc 	.word	0x080088bc
 80016e0:	200001a4 	.word	0x200001a4
 80016e4:	200001c4 	.word	0x200001c4

080016e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d17d      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x10e>

		//read the input
		lightLUXint = BH1750_ReadLux(&hbh1750_1);
 80016fa:	4842      	ldr	r0, [pc, #264]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80016fc:	f7ff fb9a 	bl	8000e34 <BH1750_ReadLux>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
		//calculate the error
		error=set_point-lightLUXint;
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
		//calculate error percentage
		error_p=error/1000*100;
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001722:	ed93 7a00 	vldr	s14, [r3]
 8001726:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001814 <HAL_TIM_PeriodElapsedCallback+0x12c>
 800172a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001818 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
		// PI Controll

		//Integral, prev_Integral;
		I = prev_Integral+error+prev_error;
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001758:	edc3 7a00 	vstr	s15, [r3]
		pwm_i=I*ki;
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800176e:	edc3 7a00 	vstr	s15, [r3]

		prev_Integral=I;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001778:	6013      	str	r3, [r2, #0]
		prev_error = error;
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001780:	6013      	str	r3, [r2, #0]

		//Proportional
		pwm_p=kp*error;
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001794:	edc3 7a00 	vstr	s15, [r3]

		//calculating the PWM
		pwm_duty=pwm_i+pwm_p;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]

		if(pwm_duty>999)
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001840 <HAL_TIM_PeriodElapsedCallback+0x158>
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd03      	ble.n	80017ca <HAL_TIM_PeriodElapsedCallback+0xe2>
			pwm_duty=999;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017c4:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00b      	b.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0xfa>
		else if(pwm_duty<0)
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d503      	bpl.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0xfa>
			pwm_duty=0;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]


		// setting the PWM using timer 2 channel 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty);
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f0:	ee17 2a90 	vmov	r2, s15
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40000400 	.word	0x40000400
 8001804:	20000000 	.word	0x20000000
 8001808:	200001cc 	.word	0x200001cc
 800180c:	2000000c 	.word	0x2000000c
 8001810:	2000013c 	.word	0x2000013c
 8001814:	447a0000 	.word	0x447a0000
 8001818:	42c80000 	.word	0x42c80000
 800181c:	20000154 	.word	0x20000154
 8001820:	20000148 	.word	0x20000148
 8001824:	20000140 	.word	0x20000140
 8001828:	20000144 	.word	0x20000144
 800182c:	20000018 	.word	0x20000018
 8001830:	2000014c 	.word	0x2000014c
 8001834:	20000014 	.word	0x20000014
 8001838:	20000150 	.word	0x20000150
 800183c:	200001d0 	.word	0x200001d0
 8001840:	4479c000 	.word	0x4479c000
 8001844:	4479c000 	.word	0x4479c000
 8001848:	20000238 	.word	0x20000238

0800184c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	//setting the counter for the encoder
	encoder_coutner=__HAL_TIM_GET_COUNTER(htim);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_IC_CaptureCallback+0x50>)
 800185c:	6013      	str	r3, [r2, #0]
	//counts
	count = (int16_t)count;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001860:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001866:	801a      	strh	r2, [r3, #0]
	//position if we need it
	position = count/4;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da00      	bge.n	8001874 <HAL_TIM_IC_CaptureCallback+0x28>
 8001872:	3303      	adds	r3, #3
 8001874:	109b      	asrs	r3, r3, #2
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800187a:	801a      	strh	r2, [r3, #0]
	//sconfiguring the setpoint with the rotary encoder
	set_point=encoder_coutner;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_TIM_IC_CaptureCallback+0x50>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800188a:	edc3 7a00 	vstr	s15, [r3]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000010 	.word	0x20000010
 80018a0:	20000224 	.word	0x20000224
 80018a4:	20000226 	.word	0x20000226
 80018a8:	2000000c 	.word	0x2000000c

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b2:	f000 fcfa 	bl	80022aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b6:	f000 f897 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ba:	f7ff fae9 	bl	8000e90 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018be:	f7ff fbff 	bl	80010c0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80018c2:	f000 fc31 	bl	8002128 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80018c6:	f000 f9e7 	bl	8001c98 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ca:	f000 fa5d 	bl	8001d88 <MX_TIM3_Init>
  MX_I2C2_Init();
 80018ce:	f7ff fc37 	bl	8001140 <MX_I2C2_Init>
  MX_TIM4_Init();
 80018d2:	f000 faa7 	bl	8001e24 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018d6:	f000 fafb 	bl	8001ed0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	BH1750_Init(&hbh1750_1);
 80018da:	482f      	ldr	r0, [pc, #188]	; (8001998 <main+0xec>)
 80018dc:	f7ff fa84 	bl	8000de8 <BH1750_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//Timer to Generate PWM
 80018e0:	2100      	movs	r1, #0
 80018e2:	482e      	ldr	r0, [pc, #184]	; (800199c <main+0xf0>)
 80018e4:	f003 fe3e 	bl	8005564 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &input, 4); // Usart to configure the serial port Interface
 80018e8:	2204      	movs	r2, #4
 80018ea:	492d      	ldr	r1, [pc, #180]	; (80019a0 <main+0xf4>)
 80018ec:	482d      	ldr	r0, [pc, #180]	; (80019a4 <main+0xf8>)
 80018ee:	f005 f8de 	bl	8006aae <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);//Timer with a frequency of 1MHz
 80018f2:	482d      	ldr	r0, [pc, #180]	; (80019a8 <main+0xfc>)
 80018f4:	f003 fd5c 	bl	80053b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);//Timer configured in Encoder mode
 80018f8:	482c      	ldr	r0, [pc, #176]	; (80019ac <main+0x100>)
 80018fa:	f003 fd59 	bl	80053b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);//
 80018fe:	482c      	ldr	r0, [pc, #176]	; (80019b0 <main+0x104>)
 8001900:	f003 fd56 	bl	80053b0 <HAL_TIM_Base_Start_IT>


	//start the timer in encoder mode
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001904:	213c      	movs	r1, #60	; 0x3c
 8001906:	4829      	ldr	r0, [pc, #164]	; (80019ac <main+0x100>)
 8001908:	f003 ffcc 	bl	80058a4 <HAL_TIM_Encoder_Start_IT>


	// LCD configuration
	disp.addr = (0x3F << 1); // defining the display adress
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <main+0x108>)
 800190e:	227e      	movs	r2, #126	; 0x7e
 8001910:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <main+0x108>)
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	lcd_init(&disp);// Init LCD
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <main+0x108>)
 800191c:	f7ff fd06 	bl	800132c <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		disp_out = (int)lightLUXint;
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <main+0x10c>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	60fb      	str	r3, [r7, #12]
		disp_set = (int)set_point;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <main+0x110>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	60bb      	str	r3, [r7, #8]
		disp_error=(int)error_p;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <main+0x114>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194a:	ee17 3a90 	vmov	r3, s15
 800194e:	607b      	str	r3, [r7, #4]

		//printing the 1st line of display
		sprintf(LCDdisplay1, "OUT:%d lux", disp_out);
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	491c      	ldr	r1, [pc, #112]	; (80019c4 <main+0x118>)
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <main+0x11c>)
 8001956:	f006 fae9 	bl	8007f2c <siprintf>
		//printing the 2nd line of display
		sprintf(LCDdisplay2, "SET:%d lux",disp_set);
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	491b      	ldr	r1, [pc, #108]	; (80019cc <main+0x120>)
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <main+0x124>)
 8001960:	f006 fae4 	bl	8007f2c <siprintf>

		sprintf((char *)disp.f_line, LCDdisplay1);
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <main+0x11c>)
 8001966:	481b      	ldr	r0, [pc, #108]	; (80019d4 <main+0x128>)
 8001968:	f006 fae0 	bl	8007f2c <siprintf>
		sprintf((char *)disp.s_line, LCDdisplay2);
 800196c:	4918      	ldr	r1, [pc, #96]	; (80019d0 <main+0x124>)
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <main+0x12c>)
 8001970:	f006 fadc 	bl	8007f2c <siprintf>

		lcd_display(&disp);
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <main+0x108>)
 8001976:	f7ff fd5f 	bl	8001438 <lcd_display>

		length = snprintf(text, 20, "OUT:%d lux \r\n", disp_out);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <main+0x130>)
 800197e:	2114      	movs	r1, #20
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <main+0x134>)
 8001982:	f006 fa9f 	bl	8007ec4 <sniprintf>
 8001986:	4603      	mov	r3, r0
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <main+0x138>)
 800198c:	701a      	strb	r2, [r3, #0]

		HAL_Delay(500);// delay to refresh the LCD
 800198e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001992:	f000 fce7 	bl	8002364 <HAL_Delay>
		disp_out = (int)lightLUXint;
 8001996:	e7c3      	b.n	8001920 <main+0x74>
 8001998:	20000000 	.word	0x20000000
 800199c:	20000238 	.word	0x20000238
 80019a0:	20000164 	.word	0x20000164
 80019a4:	20000368 	.word	0x20000368
 80019a8:	20000284 	.word	0x20000284
 80019ac:	200002d0 	.word	0x200002d0
 80019b0:	2000031c 	.word	0x2000031c
 80019b4:	200001d4 	.word	0x200001d4
 80019b8:	200001cc 	.word	0x200001cc
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	20000154 	.word	0x20000154
 80019c4:	080088cc 	.word	0x080088cc
 80019c8:	200001f8 	.word	0x200001f8
 80019cc:	080088d8 	.word	0x080088d8
 80019d0:	2000020c 	.word	0x2000020c
 80019d4:	200001d5 	.word	0x200001d5
 80019d8:	200001e6 	.word	0x200001e6
 80019dc:	0800889c 	.word	0x0800889c
 80019e0:	20000158 	.word	0x20000158
 80019e4:	200001c8 	.word	0x200001c8

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	; 0x50
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 fab8 	bl	8007f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0c:	f002 fb5e 	bl	80040cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <SystemClock_Config+0xd4>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a29      	ldr	r2, [pc, #164]	; (8001abc <SystemClock_Config+0xd4>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <SystemClock_Config+0xd4>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <SystemClock_Config+0xd8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a54:	2304      	movs	r3, #4
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a58:	23d8      	movs	r3, #216	; 0xd8
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a60:	2303      	movs	r3, #3
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fb8f 	bl	800418c <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a74:	f000 f826 	bl	8001ac4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a78:	f002 fb38 	bl	80040ec <HAL_PWREx_EnableOverDrive>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a82:	f000 f81f 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a86:	230f      	movs	r3, #15
 8001a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2107      	movs	r1, #7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fe15 	bl	80046d4 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ab0:	f000 f808 	bl	8001ac4 <Error_Handler>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3750      	adds	r7, #80	; 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x44>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x44>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x44>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_MspInit+0x44>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_MspInit+0x44>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x44>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 fbde 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM2_IRQHandler+0x10>)
 8001b72:	f003 ff45 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000238 	.word	0x20000238

08001b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM3_IRQHandler+0x10>)
 8001b86:	f003 ff3b 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000284 	.word	0x20000284

08001b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM4_IRQHandler+0x10>)
 8001b9a:	f003 ff31 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002d0 	.word	0x200002d0

08001ba8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <I2C1_EV_IRQHandler+0x10>)
 8001bae:	f001 fa2d 	bl	800300c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000094 	.word	0x20000094

08001bbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <I2C1_ER_IRQHandler+0x10>)
 8001bc2:	f001 fa3d 	bl	8003040 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000094 	.word	0x20000094

08001bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <USART3_IRQHandler+0x10>)
 8001bd6:	f004 ffaf 	bl	8006b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000368 	.word	0x20000368

08001be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bec:	f000 ff70 	bl	8002ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM5_IRQHandler+0x10>)
 8001bfa:	f003 ff01 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000031c 	.word	0x2000031c

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f006 f9a0 	bl	8007f7c <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20050000 	.word	0x20050000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000234 	.word	0x20000234
 8001c70:	20000540 	.word	0x20000540

08001c74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08e      	sub	sp, #56	; 0x38
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001cd4:	226b      	movs	r2, #107	; 0x6b
 8001cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001ce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cf2:	4824      	ldr	r0, [pc, #144]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001cf4:	f003 fb04 	bl	8005300 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cfe:	f7ff fee1 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001d10:	f004 f8aa 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d1a:	f7ff fed3 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001d20:	f003 fbbe 	bl	80054a0 <HAL_TIM_PWM_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d2a:	f7ff fecb 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4811      	ldr	r0, [pc, #68]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001d3e:	f004 fd39 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d48:	f7ff febc 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4c:	2360      	movs	r3, #96	; 0x60
 8001d4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001d66:	f003 ff6b 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d70:	f7ff fea8 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MX_TIM2_Init+0xec>)
 8001d76:	f000 f9a1 	bl	80020bc <HAL_TIM_MspPostInit>

}
 8001d7a:	bf00      	nop
 8001d7c:	3738      	adds	r7, #56	; 0x38
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000238 	.word	0x20000238

08001d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001da8:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <MX_TIM3_Init+0x98>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dae:	226b      	movs	r2, #107	; 0x6b
 8001db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dce:	f003 fa97 	bl	8005300 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001dd8:	f7ff fe74 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001dea:	f004 f83d 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001df4:	f7ff fe66 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_TIM3_Init+0x94>)
 8001e06:	f004 fcd5 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e10:	f7ff fe58 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000284 	.word	0x20000284
 8001e20:	40000400 	.word	0x40000400

08001e24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f006 f89a 	bl	8007f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_TIM4_Init+0xa8>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001e88:	230f      	movs	r3, #15
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001e94:	f003 fc60 	bl	8005758 <HAL_TIM_Encoder_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e9e:	f7ff fe11 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_TIM4_Init+0xa4>)
 8001eb0:	f004 fc80 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001eba:	f7ff fe03 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200002d0 	.word	0x200002d0
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <MX_TIM5_Init+0x98>)
 8001ef2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001ef6:	226b      	movs	r2, #107	; 0x6b
 8001ef8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f02:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f16:	f003 f9f3 	bl	8005300 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f20:	f7ff fdd0 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f32:	f003 ff99 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f7ff fdc2 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_TIM5_Init+0x94>)
 8001f4e:	f004 fc31 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f7ff fdb4 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000031c 	.word	0x2000031c
 8001f68:	40000c00 	.word	0x40000c00

08001f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d114      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a25      	ldr	r2, [pc, #148]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	201c      	movs	r0, #28
 8001f9c:	f000 fae1 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fa0:	201c      	movs	r0, #28
 8001fa2:	f000 fafa 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fa6:	e032      	b.n	800200e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201d      	movs	r0, #29
 8001fd0:	f000 fac7 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fd4:	201d      	movs	r0, #29
 8001fd6:	f000 fae0 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 8001fda:	e018      	b.n	800200e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_TIM_Base_MspInit+0xb4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d113      	bne.n	800200e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2032      	movs	r0, #50	; 0x32
 8002004:	f000 faad 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002008:	2032      	movs	r0, #50	; 0x32
 800200a:	f000 fac6 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40000400 	.word	0x40000400
 8002020:	40000c00 	.word	0x40000c00

08002024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d130      	bne.n	80020a8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002076:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002088:	2302      	movs	r3, #2
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002094:	f000 fb3c 	bl	8002710 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	201e      	movs	r0, #30
 800209e:	f000 fa60 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a2:	201e      	movs	r0, #30
 80020a4:	f000 fa79 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020c00 	.word	0x40020c00

080020bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d11b      	bne.n	8002116 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020f6:	2320      	movs	r3, #32
 80020f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002106:	2301      	movs	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <HAL_TIM_MspPostInit+0x68>)
 8002112:	f000 fafd 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000

08002128 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_USART3_UART_Init+0x58>)
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <MX_USART3_UART_Init+0x5c>)
 8002130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_USART3_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART3_UART_Init+0x58>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART3_UART_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART3_UART_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_USART3_UART_Init+0x58>)
 800216c:	f004 fbce 	bl	800690c <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002176:	f7ff fca5 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000368 	.word	0x20000368
 8002184:	40004800 	.word	0x40004800

08002188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0aa      	sub	sp, #168	; 0xa8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2284      	movs	r2, #132	; 0x84
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f005 fedf 	bl	8007f6c <memset>
  if(uartHandle->Instance==USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <HAL_UART_MspInit+0xc4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d144      	bne.n	8002242 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021be:	2300      	movs	r3, #0
 80021c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fcaa 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021d2:	f7ff fc77 	bl	8001ac4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0xc8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002220:	2307      	movs	r3, #7
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800222a:	4619      	mov	r1, r3
 800222c:	4809      	ldr	r0, [pc, #36]	; (8002254 <HAL_UART_MspInit+0xcc>)
 800222e:	f000 fa6f 	bl	8002710 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	2027      	movs	r0, #39	; 0x27
 8002238:	f000 f993 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800223c:	2027      	movs	r0, #39	; 0x27
 800223e:	f000 f9ac 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	37a8      	adds	r7, #168	; 0xa8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40004800 	.word	0x40004800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020c00 	.word	0x40020c00

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800225e:	490e      	ldr	r1, [pc, #56]	; (8002298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002274:	4c0b      	ldr	r4, [pc, #44]	; (80022a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002282:	f7ff fcf7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f005 fe7f 	bl	8007f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7ff fb0f 	bl	80018ac <main>
  bx  lr    
 800228e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002290:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800229c:	08008940 	.word	0x08008940
  ldr r2, =_sbss
 80022a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80022a4:	2000053c 	.word	0x2000053c

080022a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC_IRQHandler>

080022aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 f94c 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f805 	bl	80022c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ba:	f7ff fc09 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f967 	bl	80025b6 <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 f92f 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000001c 	.word	0x2000001c
 800231c:	20000024 	.word	0x20000024
 8002320:	20000020 	.word	0x20000020

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000024 	.word	0x20000024
 8002348:	200003f0 	.word	0x200003f0

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200003f0 	.word	0x200003f0

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000024 	.word	0x20000024

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <__NVIC_SetPriorityGrouping+0x40>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x40>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00
 80023f0:	05fa0000 	.word	0x05fa0000

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff3e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff31 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff feb6 	bl	800234c <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d008      	beq.n	8002600 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e052      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0216 	bic.w	r2, r2, #22
 800260e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_DMA_Abort+0x62>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002650:	e013      	b.n	800267a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002652:	f7ff fe7b 	bl	800234c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b05      	cmp	r3, #5
 800265e:	d90c      	bls.n	800267a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e015      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e4      	bne.n	8002652 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	223f      	movs	r2, #63	; 0x3f
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00c      	b.n	80026e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e175      	b.n	8002a1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8164 	bne.w	8002a16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_GPIO_Init+0x56>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d017      	beq.n	8002804 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80be 	beq.w	8002a16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_GPIO_Init+0x324>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a65      	ldr	r2, [pc, #404]	; (8002a34 <HAL_GPIO_Init+0x324>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_GPIO_Init+0x324>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028b2:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <HAL_GPIO_Init+0x328>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d037      	beq.n	800294e <HAL_GPIO_Init+0x23e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_GPIO_Init+0x23a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x236>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <HAL_GPIO_Init+0x338>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x232>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x33c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x22e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_GPIO_Init+0x340>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x22a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x344>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x226>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	; (8002a58 <HAL_GPIO_Init+0x348>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x222>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x21e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x350>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x21a>
 8002926:	2309      	movs	r3, #9
 8002928:	e012      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292a:	230a      	movs	r3, #10
 800292c:	e010      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292e:	2308      	movs	r3, #8
 8002930:	e00e      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002932:	2307      	movs	r3, #7
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002936:	2306      	movs	r3, #6
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	; (8002a38 <HAL_GPIO_Init+0x328>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002992:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x354>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae86 	bls.w	8002730 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40021c00 	.word	0x40021c00
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40022400 	.word	0x40022400
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	400b      	ands	r3, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f806 	bl	8002b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fb3e 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e006      	b.n	8002ba0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d104      	bne.n	8002bb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_I2C_Init+0x11c>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	02008000 	.word	0x02008000

08002c38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	f040 80da 	bne.w	8002e0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_I2C_Master_Transmit+0x30>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e0d3      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c70:	f7ff fb6c 	bl	800234c <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2319      	movs	r3, #25
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fee3 	bl	8003a4e <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0be      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2bff      	cmp	r3, #255	; 0xff
 8002cc2:	d90e      	bls.n	8002ce2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f001 f8ce 	bl	8003e7c <I2C_TransferConfig>
 8002ce0:	e06c      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	8979      	ldrh	r1, [r7, #10]
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f001 f8bd 	bl	8003e7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d02:	e05b      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	6a39      	ldr	r1, [r7, #32]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fee0 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e07b      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d034      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0x184>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d130      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fe72 	bl	8003a4e <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e04d      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2bff      	cmp	r3, #255	; 0xff
 8002d7c:	d90e      	bls.n	8002d9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	8979      	ldrh	r1, [r7, #10]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f001 f871 	bl	8003e7c <I2C_TransferConfig>
 8002d9a:	e00f      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 f860 	bl	8003e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d19e      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 febf 	bl	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01a      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_I2C_Master_Transmit+0x1e4>)
 8002dee:	400b      	ands	r3, r1
 8002df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	80002000 	.word	0x80002000
 8002e1c:	fe00e800 	.word	0xfe00e800

08002e20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
 8002e30:	4613      	mov	r3, r2
 8002e32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80db 	bne.w	8002ff8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Receive+0x30>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0d4      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e58:	f7ff fa78 	bl	800234c <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2319      	movs	r3, #25
 8002e64:	2201      	movs	r2, #1
 8002e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fdef 	bl	8003a4e <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0bf      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2222      	movs	r2, #34	; 0x22
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2210      	movs	r2, #16
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	893a      	ldrh	r2, [r7, #8]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2bff      	cmp	r3, #255	; 0xff
 8002eaa:	d90e      	bls.n	8002eca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	4b52      	ldr	r3, [pc, #328]	; (8003004 <HAL_I2C_Master_Receive+0x1e4>)
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 ffda 	bl	8003e7c <I2C_TransferConfig>
 8002ec8:	e06d      	b.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_I2C_Master_Receive+0x1e4>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 ffc9 	bl	8003e7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002eea:	e05c      	b.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	6a39      	ldr	r1, [r7, #32]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fe69 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e07c      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d034      	beq.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d130      	bne.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fd7d 	bl	8003a4e <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e04d      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2bff      	cmp	r3, #255	; 0xff
 8002f66:	d90e      	bls.n	8002f86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	8979      	ldrh	r1, [r7, #10]
 8002f76:	2300      	movs	r3, #0
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 ff7c 	bl	8003e7c <I2C_TransferConfig>
 8002f84:	e00f      	b.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 ff6b 	bl	8003e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d19d      	bne.n	8002eec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fdca 	bl	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01a      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_I2C_Master_Receive+0x1e8>)
 8002fd8:	400b      	ands	r3, r1
 8002fda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	80002400 	.word	0x80002400
 8003008:	fe00e800 	.word	0xfe00e800

0800300c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
  }
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00f      	beq.n	8003082 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003080:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00f      	beq.n	80030ac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f043 0208 	orr.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00f      	beq.n	80030d6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0202 	orr.w	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 030b 	and.w	r3, r3, #11
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb77 	bl	80037dc <I2C_ITError>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	70fb      	strb	r3, [r7, #3]
 800312a:	4613      	mov	r3, r2
 800312c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <I2C_Slave_ISR_IT+0x24>
 8003196:	2302      	movs	r3, #2
 8003198:	e0e1      	b.n	800335e <I2C_Slave_ISR_IT+0x1e8>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f9b5 	bl	8003528 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d04b      	beq.n	8003260 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d046      	beq.n	8003260 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d128      	bne.n	800322e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b28      	cmp	r3, #40	; 0x28
 80031e6:	d108      	bne.n	80031fa <I2C_Slave_ISR_IT+0x84>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ee:	d104      	bne.n	80031fa <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fa9e 	bl	8003734 <I2C_ITListenCplt>
 80031f8:	e031      	b.n	800325e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b29      	cmp	r3, #41	; 0x29
 8003204:	d10e      	bne.n	8003224 <I2C_Slave_ISR_IT+0xae>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800320c:	d00a      	beq.n	8003224 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fbd7 	bl	80039ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f926 	bl	800346e <I2C_ITSlaveSeqCplt>
 8003222:	e01c      	b.n	800325e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2210      	movs	r2, #16
 800322a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800322c:	e08f      	b.n	800334e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2210      	movs	r2, #16
 8003234:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0204 	orr.w	r2, r3, #4
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <I2C_Slave_ISR_IT+0xda>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324e:	d17e      	bne.n	800334e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	4619      	mov	r1, r3
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fac0 	bl	80037dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800325c:	e077      	b.n	800334e <I2C_Slave_ISR_IT+0x1d8>
 800325e:	e076      	b.n	800334e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02f      	beq.n	80032ca <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02a      	beq.n	80032ca <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14b      	bne.n	8003352 <I2C_Slave_ISR_IT+0x1dc>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032c0:	d047      	beq.n	8003352 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8d3 	bl	800346e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032c8:	e043      	b.n	8003352 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f840 	bl	8003366 <I2C_ITAddrCplt>
 80032e6:	e035      	b.n	8003354 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d030      	beq.n	8003354 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02b      	beq.n	8003354 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d018      	beq.n	8003338 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
 8003336:	e00d      	b.n	8003354 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333e:	d002      	beq.n	8003346 <I2C_Slave_ISR_IT+0x1d0>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f891 	bl	800346e <I2C_ITSlaveSeqCplt>
 800334c:	e002      	b.n	8003354 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003352:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800337c:	2b28      	cmp	r3, #40	; 0x28
 800337e:	d16a      	bne.n	8003456 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	b29b      	uxth	r3, r3
 800339a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800339e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033ba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d138      	bne.n	8003436 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033c4:	897b      	ldrh	r3, [r7, #10]
 80033c6:	09db      	lsrs	r3, r3, #7
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	89bb      	ldrh	r3, [r7, #12]
 80033cc:	4053      	eors	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0306 	and.w	r3, r3, #6
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11c      	bne.n	8003412 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d13b      	bne.n	8003466 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2208      	movs	r2, #8
 80033fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003404:	89ba      	ldrh	r2, [r7, #12]
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fe87 	bl	800311e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003410:	e029      	b.n	8003466 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fd60 	bl	8003ee0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003428:	89ba      	ldrh	r2, [r7, #12]
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fe75 	bl	800311e <HAL_I2C_AddrCallback>
}
 8003434:	e017      	b.n	8003466 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fd50 	bl	8003ee0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003448:	89ba      	ldrh	r2, [r7, #12]
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe65 	bl	800311e <HAL_I2C_AddrCallback>
}
 8003454:	e007      	b.n	8003466 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e00c      	b.n	80034bc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b29      	cmp	r3, #41	; 0x29
 80034c6:	d112      	bne.n	80034ee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2228      	movs	r2, #40	; 0x28
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2221      	movs	r2, #33	; 0x21
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034d6:	2101      	movs	r1, #1
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fd01 	bl	8003ee0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fe05 	bl	80030f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034ec:	e017      	b.n	800351e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b2a      	cmp	r3, #42	; 0x2a
 80034f8:	d111      	bne.n	800351e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2228      	movs	r2, #40	; 0x28
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2222      	movs	r2, #34	; 0x22
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003508:	2102      	movs	r1, #2
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fce8 	bl	8003ee0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fdf6 	bl	800310a <HAL_I2C_SlaveRxCpltCallback>
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b21      	cmp	r3, #33	; 0x21
 8003552:	d002      	beq.n	800355a <I2C_ITSlaveCplt+0x32>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b29      	cmp	r3, #41	; 0x29
 8003558:	d108      	bne.n	800356c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800355a:	f248 0101 	movw	r1, #32769	; 0x8001
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fcbe 	bl	8003ee0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2221      	movs	r2, #33	; 0x21
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
 800356a:	e00d      	b.n	8003588 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b22      	cmp	r3, #34	; 0x22
 8003570:	d002      	beq.n	8003578 <I2C_ITSlaveCplt+0x50>
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b2a      	cmp	r3, #42	; 0x2a
 8003576:	d107      	bne.n	8003588 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003578:	f248 0102 	movw	r1, #32770	; 0x8002
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fcaf 	bl	8003ee0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2222      	movs	r2, #34	; 0x22
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003596:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b62      	ldr	r3, [pc, #392]	; (800372c <I2C_ITSlaveCplt+0x204>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa0e 	bl	80039ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01f      	beq.n	8003610 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035de:	e017      	b.n	8003610 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	2b00      	cmp	r3, #0
 8003686:	d010      	beq.n	80036aa <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8a4 	bl	80037dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b28      	cmp	r3, #40	; 0x28
 800369e:	d141      	bne.n	8003724 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036a0:	6979      	ldr	r1, [r7, #20]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f846 	bl	8003734 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036a8:	e03c      	b.n	8003724 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b2:	d014      	beq.n	80036de <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff feda 	bl	800346e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <I2C_ITSlaveCplt+0x208>)
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fd2f 	bl	800313a <HAL_I2C_ListenCpltCallback>
}
 80036dc:	e022      	b.n	8003724 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b22      	cmp	r3, #34	; 0x22
 80036e8:	d10e      	bne.n	8003708 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fd02 	bl	800310a <HAL_I2C_SlaveRxCpltCallback>
}
 8003706:	e00d      	b.n	8003724 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fce9 	bl	80030f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	fe00e800 	.word	0xfe00e800
 8003730:	ffff0000 	.word	0xffff0000

08003734 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <I2C_ITListenCplt+0xa4>)
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d022      	beq.n	80037b0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d012      	beq.n	80037b0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f043 0204 	orr.w	r2, r3, #4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fb93 	bl	8003ee0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2210      	movs	r2, #16
 80037c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fcb5 	bl	800313a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <I2C_ITError+0x194>)
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b28      	cmp	r3, #40	; 0x28
 8003812:	d005      	beq.n	8003820 <I2C_ITError+0x44>
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b29      	cmp	r3, #41	; 0x29
 8003818:	d002      	beq.n	8003820 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b2a      	cmp	r3, #42	; 0x2a
 800381e:	d10b      	bne.n	8003838 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003820:	2103      	movs	r1, #3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fb5c 	bl	8003ee0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2228      	movs	r2, #40	; 0x28
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a50      	ldr	r2, [pc, #320]	; (8003974 <I2C_ITError+0x198>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
 8003836:	e011      	b.n	800385c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003838:	f248 0103 	movw	r1, #32771	; 0x8003
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fb4f 	bl	8003ee0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b60      	cmp	r3, #96	; 0x60
 800384c:	d003      	beq.n	8003856 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	2b00      	cmp	r3, #0
 8003868:	d039      	beq.n	80038de <I2C_ITError+0x102>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b11      	cmp	r3, #17
 800386e:	d002      	beq.n	8003876 <I2C_ITError+0x9a>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b21      	cmp	r3, #33	; 0x21
 8003874:	d133      	bne.n	80038de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003884:	d107      	bne.n	8003896 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003894:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe ff29 	bl	80026f2 <HAL_DMA_GetState>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d017      	beq.n	80038d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	4a33      	ldr	r2, [pc, #204]	; (8003978 <I2C_ITError+0x19c>)
 80038ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fef7 	bl	80026ae <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04d      	beq.n	8003962 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d0:	4610      	mov	r0, r2
 80038d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038d4:	e045      	b.n	8003962 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f850 	bl	800397c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038dc:	e041      	b.n	8003962 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d039      	beq.n	800395a <I2C_ITError+0x17e>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d002      	beq.n	80038f2 <I2C_ITError+0x116>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b22      	cmp	r3, #34	; 0x22
 80038f0:	d133      	bne.n	800395a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003900:	d107      	bne.n	8003912 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003910:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe feeb 	bl	80026f2 <HAL_DMA_GetState>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d017      	beq.n	8003952 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	4a14      	ldr	r2, [pc, #80]	; (8003978 <I2C_ITError+0x19c>)
 8003928:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe feb9 	bl	80026ae <HAL_DMA_Abort_IT>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800394c:	4610      	mov	r0, r2
 800394e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003950:	e009      	b.n	8003966 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f812 	bl	800397c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003958:	e005      	b.n	8003966 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f80e 	bl	800397c <I2C_TreatErrorCallback>
  }
}
 8003960:	e002      	b.n	8003968 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003966:	bf00      	nop
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	ffff0000 	.word	0xffff0000
 8003974:	08003177 	.word	0x08003177
 8003978:	08003a13 	.word	0x08003a13

0800397c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d10e      	bne.n	80039ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fbdb 	bl	8003162 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039ac:	e009      	b.n	80039c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fbc6 	bl	800314e <HAL_I2C_ErrorCallback>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d103      	bne.n	80039e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d007      	beq.n	8003a06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	619a      	str	r2, [r3, #24]
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff ff9b 	bl	800397c <I2C_TreatErrorCallback>
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a5e:	e022      	b.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d01e      	beq.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a68:	f7fe fc70 	bl	800234c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d113      	bne.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0cd      	beq.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ada:	e02c      	b.n	8003b36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f8eb 	bl	8003cbc <I2C_IsErrorOccurred>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e02a      	b.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d01e      	beq.n	8003b36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af8:	f7fe fc28 	bl	800234c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d113      	bne.n	8003b36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d1cb      	bne.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5a:	e028      	b.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f8ab 	bl	8003cbc <I2C_IsErrorOccurred>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e026      	b.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe fbec 	bl	800234c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d1cf      	bne.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd4:	e064      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f86e 	bl	8003cbc <I2C_IsErrorOccurred>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e062      	b.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d138      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d105      	bne.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e04e      	b.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d107      	bne.n	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c2e:	e002      	b.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe fb6f 	bl	800234c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d193      	bne.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fe00e800 	.word	0xfe00e800

08003cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d068      	beq.n	8003dba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2210      	movs	r2, #16
 8003cee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cf0:	e049      	b.n	8003d86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d045      	beq.n	8003d86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fe fb27 	bl	800234c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_IsErrorOccurred+0x54>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d13a      	bne.n	8003d86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d121      	bne.n	8003d78 <I2C_IsErrorOccurred+0xbc>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d3a:	d01d      	beq.n	8003d78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d01a      	beq.n	8003d78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d52:	f7fe fafb 	bl	800234c <HAL_GetTick>
 8003d56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d58:	e00e      	b.n	8003d78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d5a:	f7fe faf7 	bl	800234c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b19      	cmp	r3, #25
 8003d66:	d907      	bls.n	8003d78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f043 0320 	orr.w	r3, r3, #32
 8003d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d76:	e006      	b.n	8003d86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1e9      	bne.n	8003d5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d003      	beq.n	8003d9c <I2C_IsErrorOccurred+0xe0>
 8003d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0aa      	beq.n	8003cf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01c      	beq.n	8003e6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fdca 	bl	80039ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <I2C_IsErrorOccurred+0x1bc>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	fe00e800 	.word	0xfe00e800

08003e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e94:	7a7b      	ldrb	r3, [r7, #9]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	0d5b      	lsrs	r3, r3, #21
 8003eb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <I2C_TransferConfig+0x60>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	ea02 0103 	and.w	r1, r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	03ff63ff 	.word	0x03ff63ff

08003ee0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00f      	beq.n	8003f1a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003f00:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f0e:	2b28      	cmp	r3, #40	; 0x28
 8003f10:	d003      	beq.n	8003f1a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f38:	2b28      	cmp	r3, #40	; 0x28
 8003f3a:	d003      	beq.n	8003f44 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f42:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da03      	bge.n	8003f54 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d103      	bne.n	8003f62 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d103      	bne.n	8003f70 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f043 0320 	orr.w	r3, r3, #32
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d103      	bne.n	8003f7e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43da      	mvns	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d138      	bne.n	8004024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e032      	b.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	; 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d139      	bne.n	80040bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004052:	2302      	movs	r3, #2
 8004054:	e033      	b.n	80040be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_PWREx_EnableOverDrive+0x98>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <HAL_PWREx_EnableOverDrive+0x98>)
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_PWREx_EnableOverDrive+0x98>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800411a:	f7fe f917 	bl	800234c <HAL_GetTick>
 800411e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004120:	e009      	b.n	8004136 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004122:	f7fe f913 	bl	800234c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004130:	d901      	bls.n	8004136 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e022      	b.n	800417c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d1ee      	bne.n	8004122 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004150:	f7fe f8fc 	bl	800234c <HAL_GetTick>
 8004154:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004156:	e009      	b.n	800416c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004158:	f7fe f8f8 	bl	800234c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004166:	d901      	bls.n	800416c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e007      	b.n	800417c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004178:	d1ee      	bne.n	8004158 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000

0800418c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e291      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8087 	beq.w	80042be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	4b96      	ldr	r3, [pc, #600]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041bc:	4b93      	ldr	r3, [pc, #588]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d112      	bne.n	80041ee <HAL_RCC_OscConfig+0x62>
 80041c8:	4b90      	ldr	r3, [pc, #576]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d6:	4b8d      	ldr	r3, [pc, #564]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06c      	beq.n	80042bc <HAL_RCC_OscConfig+0x130>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d168      	bne.n	80042bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e26b      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x7a>
 80041f8:	4b84      	ldr	r3, [pc, #528]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a83      	ldr	r2, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e02e      	b.n	8004264 <HAL_RCC_OscConfig+0xd8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x9c>
 800420e:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7e      	ldr	r2, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7b      	ldr	r2, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xd8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xc0>
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a72      	ldr	r2, [pc, #456]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xd8>
 800424c:	4b6f      	ldr	r3, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe f86e 	bl	800234c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fe f86a 	bl	800234c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e21f      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xe8>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f85a 	bl	800234c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe f856 	bl	800234c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e20b      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b57      	ldr	r3, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x110>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d069      	beq.n	800439e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ca:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11c      	bne.n	800431c <HAL_RCC_OscConfig+0x190>
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x17a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e1df      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	493d      	ldr	r1, [pc, #244]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	e040      	b.n	800439e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004324:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f80c 	bl	800234c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004338:	f7fe f808 	bl	800234c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1bd      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4929      	ldr	r1, [pc, #164]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
 800436a:	e018      	b.n	800439e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd ffe8 	bl	800234c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd ffe4 	bl	800234c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e199      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d038      	beq.n	800441c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd ffc5 	bl	800234c <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fd ffc1 	bl	800234c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e176      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80043da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x23a>
 80043e4:	e01a      	b.n	800441c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd ffab 	bl	800234c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd ffa7 	bl	800234c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d903      	bls.n	8004410 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e15c      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
 800440c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b91      	ldr	r3, [pc, #580]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a4 	beq.w	8004572 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b8b      	ldr	r3, [pc, #556]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a87      	ldr	r2, [pc, #540]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
 8004442:	4b85      	ldr	r3, [pc, #532]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004452:	4b82      	ldr	r3, [pc, #520]	; (800465c <HAL_RCC_OscConfig+0x4d0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d118      	bne.n	8004490 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800445e:	4b7f      	ldr	r3, [pc, #508]	; (800465c <HAL_RCC_OscConfig+0x4d0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7e      	ldr	r2, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fd ff6f 	bl	800234c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fd ff6b 	bl	800234c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e120      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	4b75      	ldr	r3, [pc, #468]	; (800465c <HAL_RCC_OscConfig+0x4d0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x31a>
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
 80044a4:	e02d      	b.n	8004502 <HAL_RCC_OscConfig+0x376>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x33c>
 80044ae:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a69      	ldr	r2, [pc, #420]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ba:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a66      	ldr	r2, [pc, #408]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x376>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x35e>
 80044d0:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a60      	ldr	r2, [pc, #384]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b5e      	ldr	r3, [pc, #376]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a5d      	ldr	r2, [pc, #372]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x376>
 80044ea:	4b5b      	ldr	r3, [pc, #364]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a5a      	ldr	r2, [pc, #360]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	4b58      	ldr	r3, [pc, #352]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a57      	ldr	r2, [pc, #348]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd ff1f 	bl	800234c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fd ff1b 	bl	800234c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0ce      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b4b      	ldr	r3, [pc, #300]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x386>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fd ff09 	bl	800234c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd ff05 	bl	800234c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0b8      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b40      	ldr	r3, [pc, #256]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b3c      	ldr	r3, [pc, #240]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a3b      	ldr	r2, [pc, #236]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80a4 	beq.w	80046c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800457c:	4b36      	ldr	r3, [pc, #216]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d06b      	beq.n	8004660 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d149      	bne.n	8004624 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fed6 	bl	800234c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fed2 	bl	800234c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e087      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd fea6 	bl	800234c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fea2 	bl	800234c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e057      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x478>
 8004622:	e04f      	b.n	80046c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fe8c 	bl	800234c <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fd fe88 	bl	800234c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e03d      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_RCC_OscConfig+0x4cc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x4ac>
 8004656:	e035      	b.n	80046c4 <HAL_RCC_OscConfig+0x538>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCC_OscConfig+0x544>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d028      	beq.n	80046c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d121      	bne.n	80046c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d11a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0d0      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d910      	bls.n	800471c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b67      	ldr	r3, [pc, #412]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	4965      	ldr	r1, [pc, #404]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0b8      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a58      	ldr	r2, [pc, #352]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 800473a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004758:	4b50      	ldr	r3, [pc, #320]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	494d      	ldr	r1, [pc, #308]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d040      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d115      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e073      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	4b3d      	ldr	r3, [pc, #244]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e06b      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b39      	ldr	r3, [pc, #228]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4936      	ldr	r1, [pc, #216]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fd fdc0 	bl	800234c <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fd fdbc 	bl	800234c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e053      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b2d      	ldr	r3, [pc, #180]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d210      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 020f 	bic.w	r2, r3, #15
 800480e:	4922      	ldr	r1, [pc, #136]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e032      	b.n	800488e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4916      	ldr	r1, [pc, #88]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	490e      	ldr	r1, [pc, #56]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004866:	f000 f821 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 800486a:	4602      	mov	r2, r0
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	490a      	ldr	r1, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004878:	5ccb      	ldrb	r3, [r1, r3]
 800487a:	fa22 f303 	lsr.w	r3, r2, r3
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fd1c 	bl	80022c4 <HAL_InitTick>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00
 800489c:	40023800 	.word	0x40023800
 80048a0:	080088e4 	.word	0x080088e4
 80048a4:	2000001c 	.word	0x2000001c
 80048a8:	20000020 	.word	0x20000020

080048ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b094      	sub	sp, #80	; 0x50
 80048b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	647b      	str	r3, [r7, #68]	; 0x44
 80048b8:	2300      	movs	r3, #0
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	2300      	movs	r3, #0
 80048be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c4:	4b79      	ldr	r3, [pc, #484]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d00d      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x40>
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	f200 80e1 	bhi.w	8004a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x34>
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048de:	e0db      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b73      	ldr	r3, [pc, #460]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e4:	e0db      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e6:	4b73      	ldr	r3, [pc, #460]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ea:	e0d8      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ec:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048f6:	4b6d      	ldr	r3, [pc, #436]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d063      	beq.n	80049ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	2200      	movs	r2, #0
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
 800490c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800491e:	4622      	mov	r2, r4
 8004920:	462b      	mov	r3, r5
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	0159      	lsls	r1, r3, #5
 800492c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004930:	0150      	lsls	r0, r2, #5
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4621      	mov	r1, r4
 8004938:	1a51      	subs	r1, r2, r1
 800493a:	6139      	str	r1, [r7, #16]
 800493c:	4629      	mov	r1, r5
 800493e:	eb63 0301 	sbc.w	r3, r3, r1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004950:	4659      	mov	r1, fp
 8004952:	018b      	lsls	r3, r1, #6
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800495a:	4651      	mov	r1, sl
 800495c:	018a      	lsls	r2, r1, #6
 800495e:	4651      	mov	r1, sl
 8004960:	ebb2 0801 	subs.w	r8, r2, r1
 8004964:	4659      	mov	r1, fp
 8004966:	eb63 0901 	sbc.w	r9, r3, r1
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800497a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497e:	4690      	mov	r8, r2
 8004980:	4699      	mov	r9, r3
 8004982:	4623      	mov	r3, r4
 8004984:	eb18 0303 	adds.w	r3, r8, r3
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	462b      	mov	r3, r5
 800498c:	eb49 0303 	adc.w	r3, r9, r3
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800499e:	4629      	mov	r1, r5
 80049a0:	024b      	lsls	r3, r1, #9
 80049a2:	4621      	mov	r1, r4
 80049a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a8:	4621      	mov	r1, r4
 80049aa:	024a      	lsls	r2, r1, #9
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b2:	2200      	movs	r2, #0
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049bc:	f7fc f896 	bl	8000aec <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c8:	e058      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ca:	4b38      	ldr	r3, [pc, #224]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	2200      	movs	r2, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	4611      	mov	r1, r2
 80049d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	f04f 0000 	mov.w	r0, #0
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	0159      	lsls	r1, r3, #5
 80049f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f6:	0150      	lsls	r0, r2, #5
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4641      	mov	r1, r8
 80049fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a02:	4649      	mov	r1, r9
 8004a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a20:	eb63 050b 	sbc.w	r5, r3, fp
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	00eb      	lsls	r3, r5, #3
 8004a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a32:	00e2      	lsls	r2, r4, #3
 8004a34:	4614      	mov	r4, r2
 8004a36:	461d      	mov	r5, r3
 8004a38:	4643      	mov	r3, r8
 8004a3a:	18e3      	adds	r3, r4, r3
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	464b      	mov	r3, r9
 8004a40:	eb45 0303 	adc.w	r3, r5, r3
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a52:	4629      	mov	r1, r5
 8004a54:	028b      	lsls	r3, r1, #10
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	028a      	lsls	r2, r1, #10
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	2200      	movs	r2, #0
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	61fa      	str	r2, [r7, #28]
 8004a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a70:	f7fc f83c 	bl	8000aec <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	3301      	adds	r3, #1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3750      	adds	r7, #80	; 0x50
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	007a1200 	.word	0x007a1200

08004ab8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_GetHCLKFreq+0x14>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	2000001c 	.word	0x2000001c

08004ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad4:	f7ff fff0 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	080088f4 	.word	0x080088f4

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004afc:	f7ff ffdc 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0b5b      	lsrs	r3, r3, #13
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	080088f4 	.word	0x080088f4

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a68      	ldr	r2, [pc, #416]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b52:	6093      	str	r3, [r2, #8]
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5c:	4964      	ldr	r1, [pc, #400]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b7a:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	4959      	ldr	r1, [pc, #356]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b98:	d101      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d017      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bb6:	4b4e      	ldr	r3, [pc, #312]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	494a      	ldr	r1, [pc, #296]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd4:	d101      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 808b 	beq.w	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	4a39      	ldr	r2, [pc, #228]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c10:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a34      	ldr	r2, [pc, #208]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c28:	f7fd fb90 	bl	800234c <HAL_GetTick>
 8004c2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c30:	f7fd fb8c 	bl	800234c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e357      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c42:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d035      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d02e      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	4a1d      	ldr	r2, [pc, #116]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c94:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d114      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fb54 	bl	800234c <HAL_GetTick>
 8004ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fd fb50 	bl	800234c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e319      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd6:	d111      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	4901      	ldr	r1, [pc, #4]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	0ffffcff 	.word	0x0ffffcff
 8004cfc:	4baa      	ldr	r3, [pc, #680]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4aa9      	ldr	r2, [pc, #676]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d06:	6093      	str	r3, [r2, #8]
 8004d08:	4ba7      	ldr	r3, [pc, #668]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	49a4      	ldr	r1, [pc, #656]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d26:	4ba0      	ldr	r3, [pc, #640]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	4a9e      	ldr	r2, [pc, #632]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d36:	4b9c      	ldr	r3, [pc, #624]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	4999      	ldr	r1, [pc, #612]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d54:	4b94      	ldr	r3, [pc, #592]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	4991      	ldr	r1, [pc, #580]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d76:	4b8c      	ldr	r3, [pc, #560]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d84:	4988      	ldr	r1, [pc, #544]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d98:	4b83      	ldr	r3, [pc, #524]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	4980      	ldr	r1, [pc, #512]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dba:	4b7b      	ldr	r3, [pc, #492]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4977      	ldr	r1, [pc, #476]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ddc:	4b72      	ldr	r3, [pc, #456]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	496f      	ldr	r1, [pc, #444]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dfe:	4b6a      	ldr	r3, [pc, #424]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f023 020c 	bic.w	r2, r3, #12
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0c:	4966      	ldr	r1, [pc, #408]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e20:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	495e      	ldr	r1, [pc, #376]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e42:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	4955      	ldr	r1, [pc, #340]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e86:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	4944      	ldr	r1, [pc, #272]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	493c      	ldr	r1, [pc, #240]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	4933      	ldr	r1, [pc, #204]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004eec:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efa:	492b      	ldr	r1, [pc, #172]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1c:	4922      	ldr	r1, [pc, #136]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	4912      	ldr	r1, [pc, #72]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f80:	4909      	ldr	r1, [pc, #36]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d006      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80d9 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a01      	ldr	r2, [pc, #4]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	e001      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fd f9cd 	bl	800234c <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb6:	f7fd f9c9 	bl	800234c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b64      	cmp	r3, #100	; 0x64
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e194      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc8:	4b6c      	ldr	r3, [pc, #432]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d021      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11d      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fe8:	4b64      	ldr	r3, [pc, #400]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff6:	4b61      	ldr	r3, [pc, #388]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffc:	0e1b      	lsrs	r3, r3, #24
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	019a      	lsls	r2, r3, #6
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4957      	ldr	r1, [pc, #348]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504e:	d129      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005050:	4b4a      	ldr	r3, [pc, #296]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005064:	0f1b      	lsrs	r3, r3, #28
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	019a      	lsls	r2, r3, #6
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	431a      	orrs	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	071b      	lsls	r3, r3, #28
 8005084:	493d      	ldr	r1, [pc, #244]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005092:	f023 021f 	bic.w	r2, r3, #31
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	3b01      	subs	r3, #1
 800509c:	4937      	ldr	r1, [pc, #220]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01d      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b6:	0e1b      	lsrs	r3, r3, #24
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c4:	0f1b      	lsrs	r3, r3, #28
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	019a      	lsls	r2, r3, #6
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	431a      	orrs	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	431a      	orrs	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	071b      	lsls	r3, r3, #28
 80050e4:	4925      	ldr	r1, [pc, #148]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d011      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	4919      	ldr	r1, [pc, #100]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005128:	f7fd f910 	bl	800234c <HAL_GetTick>
 800512c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005130:	f7fd f90c 	bl	800234c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0d7      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b01      	cmp	r3, #1
 8005152:	f040 80cd 	bne.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005162:	f7fd f8f3 	bl	800234c <HAL_GetTick>
 8005166:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800516a:	f7fd f8ef 	bl	800234c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b64      	cmp	r3, #100	; 0x64
 8005176:	d903      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0ba      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800517c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005180:	4b5e      	ldr	r3, [pc, #376]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518c:	d0ed      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d02e      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d12a      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b6:	4b51      	ldr	r3, [pc, #324]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	0f1b      	lsrs	r3, r3, #28
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	019a      	lsls	r2, r3, #6
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	061b      	lsls	r3, r3, #24
 80051e4:	431a      	orrs	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	4944      	ldr	r1, [pc, #272]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051f2:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	493d      	ldr	r1, [pc, #244]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d022      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005220:	d11d      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	0e1b      	lsrs	r3, r3, #24
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	0f1b      	lsrs	r3, r3, #28
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	019a      	lsls	r2, r3, #6
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	431a      	orrs	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	431a      	orrs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	4929      	ldr	r1, [pc, #164]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d028      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	019a      	lsls	r2, r3, #6
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	431a      	orrs	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	4917      	ldr	r1, [pc, #92]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4911      	ldr	r1, [pc, #68]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fd f840 	bl	800234c <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052d0:	f7fd f83c 	bl	800234c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e007      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d1ef      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800

08005300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e049      	b.n	80053a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fe20 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 fe7a 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e054      	b.n	8005472 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a26      	ldr	r2, [pc, #152]	; (8005480 <HAL_TIM_Base_Start_IT+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d022      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d01d      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_TIM_Base_Start_IT+0xd4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d018      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a21      	ldr	r2, [pc, #132]	; (8005488 <HAL_TIM_Base_Start_IT+0xd8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d013      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_Base_Start_IT+0xdc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <HAL_TIM_Base_Start_IT+0xe0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d009      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIM_Base_Start_IT+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x80>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIM_Base_Start_IT+0xe8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d115      	bne.n	800545c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <HAL_TIM_Base_Start_IT+0xec>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d015      	beq.n	800546e <HAL_TIM_Base_Start_IT+0xbe>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d011      	beq.n	800546e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e008      	b.n	800546e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e000      	b.n	8005470 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40001800 	.word	0x40001800
 800549c:	00010007 	.word	0x00010007

080054a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e049      	b.n	8005546 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f841 	bl	800554e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fdaa 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_TIM_PWM_Start+0x24>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e03c      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d109      	bne.n	80055a2 <HAL_TIM_PWM_Start+0x3e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e02f      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x58>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d109      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x72>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d109      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x8c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e092      	b.n	8005730 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0xb6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	e023      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0xc6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	e01b      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xd6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	e013      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0xe6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005648:	e00b      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b10      	cmp	r3, #16
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0xf6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005658:	e003      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f001 f87c 	bl	8006768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a30      	ldr	r2, [pc, #192]	; (8005738 <HAL_TIM_PWM_Start+0x1d4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_PWM_Start+0x120>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2f      	ldr	r2, [pc, #188]	; (800573c <HAL_TIM_PWM_Start+0x1d8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <HAL_TIM_PWM_Start+0x124>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <HAL_TIM_PWM_Start+0x126>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a25      	ldr	r2, [pc, #148]	; (8005738 <HAL_TIM_PWM_Start+0x1d4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d01d      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a22      	ldr	r2, [pc, #136]	; (8005740 <HAL_TIM_PWM_Start+0x1dc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a20      	ldr	r2, [pc, #128]	; (8005744 <HAL_TIM_PWM_Start+0x1e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1f      	ldr	r2, [pc, #124]	; (8005748 <HAL_TIM_PWM_Start+0x1e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <HAL_TIM_PWM_Start+0x1d8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIM_PWM_Start+0x1e8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_PWM_Start+0x18a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_TIM_PWM_Start+0x1ec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <HAL_TIM_PWM_Start+0x1f0>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d015      	beq.n	800572c <HAL_TIM_PWM_Start+0x1c8>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d011      	beq.n	800572c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e008      	b.n	800572c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e000      	b.n	800572e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010000 	.word	0x40010000
 800573c:	40010400 	.word	0x40010400
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40014000 	.word	0x40014000
 8005750:	40001800 	.word	0x40001800
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e08f      	b.n	800588c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fc fc4f 	bl	8002024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <HAL_TIM_Encoder_Init+0x13c>)
 800579a:	400b      	ands	r3, r1
 800579c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f000 fc45 	bl	8006038 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_TIM_Encoder_Init+0x140>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	4313      	orrs	r3, r2
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4b2b      	ldr	r3, [pc, #172]	; (800589c <HAL_TIM_Encoder_Init+0x144>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <HAL_TIM_Encoder_Init+0x148>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	4313      	orrs	r3, r2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	031b      	lsls	r3, r3, #12
 8005818:	4313      	orrs	r3, r2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	4313      	orrs	r3, r2
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	fffebff8 	.word	0xfffebff8
 8005898:	fffffcfc 	.word	0xfffffcfc
 800589c:	fffff3f3 	.word	0xfffff3f3
 80058a0:	ffff0f0f 	.word	0xffff0f0f

080058a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d102      	bne.n	80058e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058da:	7b7b      	ldrb	r3, [r7, #13]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e089      	b.n	80059f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f4:	e031      	b.n	800595a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d110      	bne.n	800591e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d102      	bne.n	8005908 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005902:	7b3b      	ldrb	r3, [r7, #12]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e075      	b.n	80059f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	e01d      	b.n	800595a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d108      	bne.n	8005936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d105      	bne.n	8005936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d102      	bne.n	8005936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005930:	7b3b      	ldrb	r3, [r7, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e05e      	b.n	80059f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d010      	beq.n	8005988 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005966:	e01f      	b.n	80059a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fef9 	bl	8006768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0202 	orr.w	r2, r2, #2
 8005984:	60da      	str	r2, [r3, #12]
      break;
 8005986:	e02e      	b.n	80059e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	2104      	movs	r1, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fee9 	bl	8006768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0204 	orr.w	r2, r2, #4
 80059a4:	60da      	str	r2, [r3, #12]
      break;
 80059a6:	e01e      	b.n	80059e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2201      	movs	r2, #1
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fed9 	bl	8006768 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	2104      	movs	r1, #4
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fed2 	bl	8006768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0202 	orr.w	r2, r2, #2
 80059d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0204 	orr.w	r2, r2, #4
 80059e2:	60da      	str	r2, [r3, #12]
      break;
 80059e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb ff02 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fad6 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fadd 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0204 	mvn.w	r2, #4
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fb fed8 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 faac 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fab3 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0208 	mvn.w	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb feae 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa82 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa89 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0210 	mvn.w	r2, #16
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fb fe84 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa58 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa5f 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0201 	mvn.w	r2, #1
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb fdb2 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fe9a 	bl	80068e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d10e      	bne.n	8005bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b80      	cmp	r3, #128	; 0x80
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fe8d 	bl	80068f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d10e      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d107      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa0d 	bl	8006024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0220 	mvn.w	r2, #32
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fe4d 	bl	80068d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0ff      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b14      	cmp	r3, #20
 8005c6a:	f200 80f0 	bhi.w	8005e4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005e4f 	.word	0x08005e4f
 8005c7c:	08005e4f 	.word	0x08005e4f
 8005c80:	08005e4f 	.word	0x08005e4f
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005e4f 	.word	0x08005e4f
 8005c8c:	08005e4f 	.word	0x08005e4f
 8005c90:	08005e4f 	.word	0x08005e4f
 8005c94:	08005d4b 	.word	0x08005d4b
 8005c98:	08005e4f 	.word	0x08005e4f
 8005c9c:	08005e4f 	.word	0x08005e4f
 8005ca0:	08005e4f 	.word	0x08005e4f
 8005ca4:	08005d8b 	.word	0x08005d8b
 8005ca8:	08005e4f 	.word	0x08005e4f
 8005cac:	08005e4f 	.word	0x08005e4f
 8005cb0:	08005e4f 	.word	0x08005e4f
 8005cb4:	08005dcd 	.word	0x08005dcd
 8005cb8:	08005e4f 	.word	0x08005e4f
 8005cbc:	08005e4f 	.word	0x08005e4f
 8005cc0:	08005e4f 	.word	0x08005e4f
 8005cc4:	08005e0d 	.word	0x08005e0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fa52 	bl	8006178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0208 	orr.w	r2, r2, #8
 8005ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0204 	bic.w	r2, r2, #4
 8005cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	619a      	str	r2, [r3, #24]
      break;
 8005d06:	e0a5      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 faa4 	bl	800625c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	619a      	str	r2, [r3, #24]
      break;
 8005d48:	e084      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fafb 	bl	800634c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0208 	orr.w	r2, r2, #8
 8005d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0204 	bic.w	r2, r2, #4
 8005d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	61da      	str	r2, [r3, #28]
      break;
 8005d88:	e064      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fb51 	bl	8006438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69d9      	ldr	r1, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	021a      	lsls	r2, r3, #8
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	61da      	str	r2, [r3, #28]
      break;
 8005dca:	e043      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fb88 	bl	80064e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0208 	orr.w	r2, r2, #8
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0204 	bic.w	r2, r2, #4
 8005df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e0a:	e023      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fbba 	bl	800658c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e4c:	e002      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
      break;
 8005e52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop

08005e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0b4      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x186>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4b56      	ldr	r3, [pc, #344]	; (8005ff8 <HAL_TIM_ConfigClockSource+0x190>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd4>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x172>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b70      	cmp	r3, #112	; 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xa6>
 8005ed8:	2b70      	cmp	r3, #112	; 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11a>
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b50      	cmp	r3, #80	; 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfa>
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b30      	cmp	r3, #48	; 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	f000 fc03 	bl	8006728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	f000 fbec 	bl	8006728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 fb60 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	; 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fbb9 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fb7f 	bl	8006692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	; 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fba9 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fb40 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb99 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 fb90 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	fffeff88 	.word	0xfffeff88

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a40      	ldr	r2, [pc, #256]	; (800614c <TIM_Base_SetConfig+0x114>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d00f      	beq.n	8006078 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a3d      	ldr	r2, [pc, #244]	; (8006150 <TIM_Base_SetConfig+0x118>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <TIM_Base_SetConfig+0x11c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3b      	ldr	r2, [pc, #236]	; (8006158 <TIM_Base_SetConfig+0x120>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3a      	ldr	r2, [pc, #232]	; (800615c <TIM_Base_SetConfig+0x124>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d108      	bne.n	800608a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2f      	ldr	r2, [pc, #188]	; (800614c <TIM_Base_SetConfig+0x114>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d02b      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d027      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2c      	ldr	r2, [pc, #176]	; (8006150 <TIM_Base_SetConfig+0x118>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d023      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <TIM_Base_SetConfig+0x11c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01f      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <TIM_Base_SetConfig+0x120>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01b      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a29      	ldr	r2, [pc, #164]	; (800615c <TIM_Base_SetConfig+0x124>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d017      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a28      	ldr	r2, [pc, #160]	; (8006160 <TIM_Base_SetConfig+0x128>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a27      	ldr	r2, [pc, #156]	; (8006164 <TIM_Base_SetConfig+0x12c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00f      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a26      	ldr	r2, [pc, #152]	; (8006168 <TIM_Base_SetConfig+0x130>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00b      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a25      	ldr	r2, [pc, #148]	; (800616c <TIM_Base_SetConfig+0x134>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a24      	ldr	r2, [pc, #144]	; (8006170 <TIM_Base_SetConfig+0x138>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a23      	ldr	r2, [pc, #140]	; (8006174 <TIM_Base_SetConfig+0x13c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d108      	bne.n	80060fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <TIM_Base_SetConfig+0x114>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_Base_SetConfig+0xf8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a0c      	ldr	r2, [pc, #48]	; (800615c <TIM_Base_SetConfig+0x124>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d103      	bne.n	8006138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	615a      	str	r2, [r3, #20]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40010400 	.word	0x40010400
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800
 800616c:	40001800 	.word	0x40001800
 8006170:	40001c00 	.word	0x40001c00
 8006174:	40002000 	.word	0x40002000

08006178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0201 	bic.w	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b2b      	ldr	r3, [pc, #172]	; (8006250 <TIM_OC1_SetConfig+0xd8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 0302 	bic.w	r3, r3, #2
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a21      	ldr	r2, [pc, #132]	; (8006254 <TIM_OC1_SetConfig+0xdc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC1_SetConfig+0x64>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a20      	ldr	r2, [pc, #128]	; (8006258 <TIM_OC1_SetConfig+0xe0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d10c      	bne.n	80061f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f023 0308 	bic.w	r3, r3, #8
 80061e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f023 0304 	bic.w	r3, r3, #4
 80061f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a16      	ldr	r2, [pc, #88]	; (8006254 <TIM_OC1_SetConfig+0xdc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_OC1_SetConfig+0x8e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <TIM_OC1_SetConfig+0xe0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d111      	bne.n	800622a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800620c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	fffeff8f 	.word	0xfffeff8f
 8006254:	40010000 	.word	0x40010000
 8006258:	40010400 	.word	0x40010400

0800625c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0210 	bic.w	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <TIM_OC2_SetConfig+0xe4>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0320 	bic.w	r3, r3, #32
 80062a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a23      	ldr	r2, [pc, #140]	; (8006344 <TIM_OC2_SetConfig+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC2_SetConfig+0x68>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a22      	ldr	r2, [pc, #136]	; (8006348 <TIM_OC2_SetConfig+0xec>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10d      	bne.n	80062e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <TIM_OC2_SetConfig+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0x94>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <TIM_OC2_SetConfig+0xec>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d113      	bne.n	8006318 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	feff8fff 	.word	0xfeff8fff
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4b2d      	ldr	r3, [pc, #180]	; (800642c <TIM_OC3_SetConfig+0xe0>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <TIM_OC3_SetConfig+0xe4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC3_SetConfig+0x66>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a21      	ldr	r2, [pc, #132]	; (8006434 <TIM_OC3_SetConfig+0xe8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10d      	bne.n	80063ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a17      	ldr	r2, [pc, #92]	; (8006430 <TIM_OC3_SetConfig+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d003      	beq.n	80063de <TIM_OC3_SetConfig+0x92>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a16      	ldr	r2, [pc, #88]	; (8006434 <TIM_OC3_SetConfig+0xe8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d113      	bne.n	8006406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	fffeff8f 	.word	0xfffeff8f
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400

08006438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <TIM_OC4_SetConfig+0xa4>)
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	031b      	lsls	r3, r3, #12
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <TIM_OC4_SetConfig+0xa8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC4_SetConfig+0x68>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <TIM_OC4_SetConfig+0xac>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d109      	bne.n	80064b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	019b      	lsls	r3, r3, #6
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	feff8fff 	.word	0xfeff8fff
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40010400 	.word	0x40010400

080064e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <TIM_OC5_SetConfig+0x98>)
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006528:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a12      	ldr	r2, [pc, #72]	; (8006584 <TIM_OC5_SetConfig+0x9c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC5_SetConfig+0x5e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a11      	ldr	r2, [pc, #68]	; (8006588 <TIM_OC5_SetConfig+0xa0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d109      	bne.n	800655a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800654c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	fffeff8f 	.word	0xfffeff8f
 8006584:	40010000 	.word	0x40010000
 8006588:	40010400 	.word	0x40010400

0800658c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <TIM_OC6_SetConfig+0x9c>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	051b      	lsls	r3, r3, #20
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <TIM_OC6_SetConfig+0xa0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC6_SetConfig+0x60>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a12      	ldr	r2, [pc, #72]	; (8006630 <TIM_OC6_SetConfig+0xa4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	feff8fff 	.word	0xfeff8fff
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400

08006634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 030a 	bic.w	r3, r3, #10
 8006670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0210 	bic.w	r2, r3, #16
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	f043 0307 	orr.w	r3, r3, #7
 8006714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	431a      	orrs	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2201      	movs	r2, #1
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	43db      	mvns	r3, r3
 800678a:	401a      	ands	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	fa01 f303 	lsl.w	r3, r1, r3
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e06d      	b.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2f      	ldr	r2, [pc, #188]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d022      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d01d      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d018      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d013      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00e      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10c      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4313      	orrs	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40010400 	.word	0x40010400
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40001800 	.word	0x40001800

080068d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e040      	b.n	80069a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fb fc2a 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fbe6 	bl	800711c <UART_SetConfig>
 8006950:	4603      	mov	r3, r0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e022      	b.n	80069a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fe3e 	bl	80075e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fec5 	bl	8007728 <UART_CheckIdleState>
 800699e:	4603      	mov	r3, r0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d171      	bne.n	8006aa4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_UART_Transmit+0x24>
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e06a      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2221      	movs	r2, #33	; 0x21
 80069dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069de:	f7fb fcb5 	bl	800234c <HAL_GetTick>
 80069e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	d108      	bne.n	8006a10 <HAL_UART_Transmit+0x68>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e003      	b.n	8006a18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a18:	e02c      	b.n	8006a74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	; 0x80
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 feb6 	bl	8007796 <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e038      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e007      	b.n	8006a62 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1cc      	bne.n	8006a1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fe83 	bl	8007796 <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e005      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b08a      	sub	sp, #40	; 0x28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d132      	bne.n	8006b2c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_UART_Receive_IT+0x24>
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e02b      	b.n	8006b2e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d018      	beq.n	8006b1c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	613b      	str	r3, [r7, #16]
   return(result);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69f9      	ldr	r1, [r7, #28]
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fefe 	bl	8007924 <UART_Start_Receive_IT>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	e000      	b.n	8006b2e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b0ba      	sub	sp, #232	; 0xe8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b66:	4013      	ands	r3, r2
 8006b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d115      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8297 	beq.w	80070c4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
      }
      return;
 8006b9e:	e291      	b.n	80070c4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8117 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bba:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_UART_IRQHandler+0x298>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 810a 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d011      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xbc>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <HAL_UART_IRQHandler+0xec>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2202      	movs	r2, #2
 8006c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c1a:	f043 0204 	orr.w	r2, r3, #4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2204      	movs	r2, #4
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d017      	beq.n	8006c90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c86:	f043 0208 	orr.w	r2, r3, #8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x18a>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00c      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81fd 	beq.w	80070c8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00d      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d005      	beq.n	8006d1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04f      	beq.n	8006dba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fec8 	bl	8007ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d141      	bne.n	8006db2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1d9      	bne.n	8006d2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d013      	beq.n	8006daa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <HAL_UART_IRQHandler+0x29c>)
 8006d88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fb fc8d 	bl	80026ae <HAL_DMA_Abort_IT>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e00f      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9a0 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	e00b      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f99c 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	e007      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f998 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006dc8:	e17e      	b.n	80070c8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	bf00      	nop
    return;
 8006dcc:	e17c      	b.n	80070c8 <HAL_UART_IRQHandler+0x590>
 8006dce:	bf00      	nop
 8006dd0:	04000120 	.word	0x04000120
 8006dd4:	08007b79 	.word	0x08007b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 814c 	bne.w	800707a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8145 	beq.w	800707a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 813e 	beq.w	800707a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	f040 80b6 	bne.w	8006f82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8150 	beq.w	80070cc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f080 8148 	bcs.w	80070cc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e50:	f000 8086 	beq.w	8006f60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1da      	bne.n	8006e54 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e1      	bne.n	8006e9e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e3      	bne.n	8006eda <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f30:	f023 0310 	bic.w	r3, r3, #16
 8006f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e4      	bne.n	8006f20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fb fb37 	bl	80025ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8c2 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f80:	e0a4      	b.n	80070cc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 8096 	beq.w	80070d0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8091 	beq.w	80070d0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007008:	633a      	str	r2, [r7, #48]	; 0x30
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e3      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	60fb      	str	r3, [r7, #12]
   return(result);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f023 0310 	bic.w	r3, r3, #16
 8007044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	69b9      	ldr	r1, [r7, #24]
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	617b      	str	r3, [r7, #20]
   return(result);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e4      	bne.n	8007030 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800706c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f846 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007078:	e02a      	b.n	80070d0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01c      	beq.n	80070d4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
    }
    return;
 80070a2:	e017      	b.n	80070d4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <HAL_UART_IRQHandler+0x59e>
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00c      	beq.n	80070d6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fd71 	bl	8007ba4 <UART_EndTransmit_IT>
    return;
 80070c2:	e008      	b.n	80070d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80070c4:	bf00      	nop
 80070c6:	e006      	b.n	80070d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80070c8:	bf00      	nop
 80070ca:	e004      	b.n	80070d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80070cc:	bf00      	nop
 80070ce:	e002      	b.n	80070d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80070d4:	bf00      	nop
  }

}
 80070d6:	37e8      	adds	r7, #232	; 0xe8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4ba6      	ldr	r3, [pc, #664]	; (80073e0 <UART_SetConfig+0x2c4>)
 8007148:	4013      	ands	r3, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	6979      	ldr	r1, [r7, #20]
 8007150:	430b      	orrs	r3, r1
 8007152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	430a      	orrs	r2, r1
 800718c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a94      	ldr	r2, [pc, #592]	; (80073e4 <UART_SetConfig+0x2c8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d120      	bne.n	80071da <UART_SetConfig+0xbe>
 8007198:	4b93      	ldr	r3, [pc, #588]	; (80073e8 <UART_SetConfig+0x2cc>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d816      	bhi.n	80071d4 <UART_SetConfig+0xb8>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x90>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071c3 	.word	0x080071c3
 80071b8:	080071cf 	.word	0x080071cf
 80071bc:	2301      	movs	r3, #1
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e150      	b.n	8007464 <UART_SetConfig+0x348>
 80071c2:	2302      	movs	r3, #2
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e14d      	b.n	8007464 <UART_SetConfig+0x348>
 80071c8:	2304      	movs	r3, #4
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e14a      	b.n	8007464 <UART_SetConfig+0x348>
 80071ce:	2308      	movs	r3, #8
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e147      	b.n	8007464 <UART_SetConfig+0x348>
 80071d4:	2310      	movs	r3, #16
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e144      	b.n	8007464 <UART_SetConfig+0x348>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a83      	ldr	r2, [pc, #524]	; (80073ec <UART_SetConfig+0x2d0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d132      	bne.n	800724a <UART_SetConfig+0x12e>
 80071e4:	4b80      	ldr	r3, [pc, #512]	; (80073e8 <UART_SetConfig+0x2cc>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d828      	bhi.n	8007244 <UART_SetConfig+0x128>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0xdc>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007245 	.word	0x08007245
 8007204:	08007245 	.word	0x08007245
 8007208:	08007239 	.word	0x08007239
 800720c:	08007245 	.word	0x08007245
 8007210:	08007245 	.word	0x08007245
 8007214:	08007245 	.word	0x08007245
 8007218:	08007233 	.word	0x08007233
 800721c:	08007245 	.word	0x08007245
 8007220:	08007245 	.word	0x08007245
 8007224:	08007245 	.word	0x08007245
 8007228:	0800723f 	.word	0x0800723f
 800722c:	2300      	movs	r3, #0
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e118      	b.n	8007464 <UART_SetConfig+0x348>
 8007232:	2302      	movs	r3, #2
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e115      	b.n	8007464 <UART_SetConfig+0x348>
 8007238:	2304      	movs	r3, #4
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e112      	b.n	8007464 <UART_SetConfig+0x348>
 800723e:	2308      	movs	r3, #8
 8007240:	77fb      	strb	r3, [r7, #31]
 8007242:	e10f      	b.n	8007464 <UART_SetConfig+0x348>
 8007244:	2310      	movs	r3, #16
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	e10c      	b.n	8007464 <UART_SetConfig+0x348>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a68      	ldr	r2, [pc, #416]	; (80073f0 <UART_SetConfig+0x2d4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d120      	bne.n	8007296 <UART_SetConfig+0x17a>
 8007254:	4b64      	ldr	r3, [pc, #400]	; (80073e8 <UART_SetConfig+0x2cc>)
 8007256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800725e:	2b30      	cmp	r3, #48	; 0x30
 8007260:	d013      	beq.n	800728a <UART_SetConfig+0x16e>
 8007262:	2b30      	cmp	r3, #48	; 0x30
 8007264:	d814      	bhi.n	8007290 <UART_SetConfig+0x174>
 8007266:	2b20      	cmp	r3, #32
 8007268:	d009      	beq.n	800727e <UART_SetConfig+0x162>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d810      	bhi.n	8007290 <UART_SetConfig+0x174>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <UART_SetConfig+0x15c>
 8007272:	2b10      	cmp	r3, #16
 8007274:	d006      	beq.n	8007284 <UART_SetConfig+0x168>
 8007276:	e00b      	b.n	8007290 <UART_SetConfig+0x174>
 8007278:	2300      	movs	r3, #0
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e0f2      	b.n	8007464 <UART_SetConfig+0x348>
 800727e:	2302      	movs	r3, #2
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e0ef      	b.n	8007464 <UART_SetConfig+0x348>
 8007284:	2304      	movs	r3, #4
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e0ec      	b.n	8007464 <UART_SetConfig+0x348>
 800728a:	2308      	movs	r3, #8
 800728c:	77fb      	strb	r3, [r7, #31]
 800728e:	e0e9      	b.n	8007464 <UART_SetConfig+0x348>
 8007290:	2310      	movs	r3, #16
 8007292:	77fb      	strb	r3, [r7, #31]
 8007294:	e0e6      	b.n	8007464 <UART_SetConfig+0x348>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a56      	ldr	r2, [pc, #344]	; (80073f4 <UART_SetConfig+0x2d8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d120      	bne.n	80072e2 <UART_SetConfig+0x1c6>
 80072a0:	4b51      	ldr	r3, [pc, #324]	; (80073e8 <UART_SetConfig+0x2cc>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072aa:	2bc0      	cmp	r3, #192	; 0xc0
 80072ac:	d013      	beq.n	80072d6 <UART_SetConfig+0x1ba>
 80072ae:	2bc0      	cmp	r3, #192	; 0xc0
 80072b0:	d814      	bhi.n	80072dc <UART_SetConfig+0x1c0>
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d009      	beq.n	80072ca <UART_SetConfig+0x1ae>
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d810      	bhi.n	80072dc <UART_SetConfig+0x1c0>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <UART_SetConfig+0x1a8>
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d006      	beq.n	80072d0 <UART_SetConfig+0x1b4>
 80072c2:	e00b      	b.n	80072dc <UART_SetConfig+0x1c0>
 80072c4:	2300      	movs	r3, #0
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e0cc      	b.n	8007464 <UART_SetConfig+0x348>
 80072ca:	2302      	movs	r3, #2
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e0c9      	b.n	8007464 <UART_SetConfig+0x348>
 80072d0:	2304      	movs	r3, #4
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e0c6      	b.n	8007464 <UART_SetConfig+0x348>
 80072d6:	2308      	movs	r3, #8
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e0c3      	b.n	8007464 <UART_SetConfig+0x348>
 80072dc:	2310      	movs	r3, #16
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e0c0      	b.n	8007464 <UART_SetConfig+0x348>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a44      	ldr	r2, [pc, #272]	; (80073f8 <UART_SetConfig+0x2dc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d125      	bne.n	8007338 <UART_SetConfig+0x21c>
 80072ec:	4b3e      	ldr	r3, [pc, #248]	; (80073e8 <UART_SetConfig+0x2cc>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d017      	beq.n	800732c <UART_SetConfig+0x210>
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007300:	d817      	bhi.n	8007332 <UART_SetConfig+0x216>
 8007302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007306:	d00b      	beq.n	8007320 <UART_SetConfig+0x204>
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d811      	bhi.n	8007332 <UART_SetConfig+0x216>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <UART_SetConfig+0x1fe>
 8007312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007316:	d006      	beq.n	8007326 <UART_SetConfig+0x20a>
 8007318:	e00b      	b.n	8007332 <UART_SetConfig+0x216>
 800731a:	2300      	movs	r3, #0
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e0a1      	b.n	8007464 <UART_SetConfig+0x348>
 8007320:	2302      	movs	r3, #2
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e09e      	b.n	8007464 <UART_SetConfig+0x348>
 8007326:	2304      	movs	r3, #4
 8007328:	77fb      	strb	r3, [r7, #31]
 800732a:	e09b      	b.n	8007464 <UART_SetConfig+0x348>
 800732c:	2308      	movs	r3, #8
 800732e:	77fb      	strb	r3, [r7, #31]
 8007330:	e098      	b.n	8007464 <UART_SetConfig+0x348>
 8007332:	2310      	movs	r3, #16
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e095      	b.n	8007464 <UART_SetConfig+0x348>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2f      	ldr	r2, [pc, #188]	; (80073fc <UART_SetConfig+0x2e0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d125      	bne.n	800738e <UART_SetConfig+0x272>
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <UART_SetConfig+0x2cc>)
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007350:	d017      	beq.n	8007382 <UART_SetConfig+0x266>
 8007352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007356:	d817      	bhi.n	8007388 <UART_SetConfig+0x26c>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735c:	d00b      	beq.n	8007376 <UART_SetConfig+0x25a>
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007362:	d811      	bhi.n	8007388 <UART_SetConfig+0x26c>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0x254>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d006      	beq.n	800737c <UART_SetConfig+0x260>
 800736e:	e00b      	b.n	8007388 <UART_SetConfig+0x26c>
 8007370:	2301      	movs	r3, #1
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e076      	b.n	8007464 <UART_SetConfig+0x348>
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e073      	b.n	8007464 <UART_SetConfig+0x348>
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e070      	b.n	8007464 <UART_SetConfig+0x348>
 8007382:	2308      	movs	r3, #8
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e06d      	b.n	8007464 <UART_SetConfig+0x348>
 8007388:	2310      	movs	r3, #16
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e06a      	b.n	8007464 <UART_SetConfig+0x348>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <UART_SetConfig+0x2e4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d138      	bne.n	800740a <UART_SetConfig+0x2ee>
 8007398:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <UART_SetConfig+0x2cc>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073a6:	d017      	beq.n	80073d8 <UART_SetConfig+0x2bc>
 80073a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ac:	d82a      	bhi.n	8007404 <UART_SetConfig+0x2e8>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b2:	d00b      	beq.n	80073cc <UART_SetConfig+0x2b0>
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d824      	bhi.n	8007404 <UART_SetConfig+0x2e8>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <UART_SetConfig+0x2aa>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d006      	beq.n	80073d2 <UART_SetConfig+0x2b6>
 80073c4:	e01e      	b.n	8007404 <UART_SetConfig+0x2e8>
 80073c6:	2300      	movs	r3, #0
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e04b      	b.n	8007464 <UART_SetConfig+0x348>
 80073cc:	2302      	movs	r3, #2
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e048      	b.n	8007464 <UART_SetConfig+0x348>
 80073d2:	2304      	movs	r3, #4
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e045      	b.n	8007464 <UART_SetConfig+0x348>
 80073d8:	2308      	movs	r3, #8
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e042      	b.n	8007464 <UART_SetConfig+0x348>
 80073de:	bf00      	nop
 80073e0:	efff69f3 	.word	0xefff69f3
 80073e4:	40011000 	.word	0x40011000
 80073e8:	40023800 	.word	0x40023800
 80073ec:	40004400 	.word	0x40004400
 80073f0:	40004800 	.word	0x40004800
 80073f4:	40004c00 	.word	0x40004c00
 80073f8:	40005000 	.word	0x40005000
 80073fc:	40011400 	.word	0x40011400
 8007400:	40007800 	.word	0x40007800
 8007404:	2310      	movs	r3, #16
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e02c      	b.n	8007464 <UART_SetConfig+0x348>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a72      	ldr	r2, [pc, #456]	; (80075d8 <UART_SetConfig+0x4bc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d125      	bne.n	8007460 <UART_SetConfig+0x344>
 8007414:	4b71      	ldr	r3, [pc, #452]	; (80075dc <UART_SetConfig+0x4c0>)
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800741e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007422:	d017      	beq.n	8007454 <UART_SetConfig+0x338>
 8007424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007428:	d817      	bhi.n	800745a <UART_SetConfig+0x33e>
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742e:	d00b      	beq.n	8007448 <UART_SetConfig+0x32c>
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d811      	bhi.n	800745a <UART_SetConfig+0x33e>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <UART_SetConfig+0x326>
 800743a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743e:	d006      	beq.n	800744e <UART_SetConfig+0x332>
 8007440:	e00b      	b.n	800745a <UART_SetConfig+0x33e>
 8007442:	2300      	movs	r3, #0
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e00d      	b.n	8007464 <UART_SetConfig+0x348>
 8007448:	2302      	movs	r3, #2
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e00a      	b.n	8007464 <UART_SetConfig+0x348>
 800744e:	2304      	movs	r3, #4
 8007450:	77fb      	strb	r3, [r7, #31]
 8007452:	e007      	b.n	8007464 <UART_SetConfig+0x348>
 8007454:	2308      	movs	r3, #8
 8007456:	77fb      	strb	r3, [r7, #31]
 8007458:	e004      	b.n	8007464 <UART_SetConfig+0x348>
 800745a:	2310      	movs	r3, #16
 800745c:	77fb      	strb	r3, [r7, #31]
 800745e:	e001      	b.n	8007464 <UART_SetConfig+0x348>
 8007460:	2310      	movs	r3, #16
 8007462:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d15b      	bne.n	8007526 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800746e:	7ffb      	ldrb	r3, [r7, #31]
 8007470:	2b08      	cmp	r3, #8
 8007472:	d828      	bhi.n	80074c6 <UART_SetConfig+0x3aa>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <UART_SetConfig+0x360>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c7 	.word	0x080074c7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074bf 	.word	0x080074bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fd fb16 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 80074a4:	61b8      	str	r0, [r7, #24]
        break;
 80074a6:	e013      	b.n	80074d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7fd fb26 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 80074ac:	61b8      	str	r0, [r7, #24]
        break;
 80074ae:	e00f      	b.n	80074d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b4b      	ldr	r3, [pc, #300]	; (80075e0 <UART_SetConfig+0x4c4>)
 80074b2:	61bb      	str	r3, [r7, #24]
        break;
 80074b4:	e00c      	b.n	80074d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fd f9f9 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 80074ba:	61b8      	str	r0, [r7, #24]
        break;
 80074bc:	e008      	b.n	80074d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	61bb      	str	r3, [r7, #24]
        break;
 80074c4:	e004      	b.n	80074d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	77bb      	strb	r3, [r7, #30]
        break;
 80074ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d074      	beq.n	80075c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	005a      	lsls	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	441a      	add	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d916      	bls.n	8007520 <UART_SetConfig+0x404>
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f8:	d212      	bcs.n	8007520 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f023 030f 	bic.w	r3, r3, #15
 8007502:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	b29b      	uxth	r3, r3
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	b29a      	uxth	r2, r3
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	4313      	orrs	r3, r2
 8007514:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	89fa      	ldrh	r2, [r7, #14]
 800751c:	60da      	str	r2, [r3, #12]
 800751e:	e04f      	b.n	80075c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	77bb      	strb	r3, [r7, #30]
 8007524:	e04c      	b.n	80075c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d828      	bhi.n	800757e <UART_SetConfig+0x462>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x418>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007559 	.word	0x08007559
 8007538:	08007561 	.word	0x08007561
 800753c:	08007569 	.word	0x08007569
 8007540:	0800757f 	.word	0x0800757f
 8007544:	0800756f 	.word	0x0800756f
 8007548:	0800757f 	.word	0x0800757f
 800754c:	0800757f 	.word	0x0800757f
 8007550:	0800757f 	.word	0x0800757f
 8007554:	08007577 	.word	0x08007577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007558:	f7fd faba 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 800755c:	61b8      	str	r0, [r7, #24]
        break;
 800755e:	e013      	b.n	8007588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007560:	f7fd faca 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8007564:	61b8      	str	r0, [r7, #24]
        break;
 8007566:	e00f      	b.n	8007588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <UART_SetConfig+0x4c4>)
 800756a:	61bb      	str	r3, [r7, #24]
        break;
 800756c:	e00c      	b.n	8007588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800756e:	f7fd f99d 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 8007572:	61b8      	str	r0, [r7, #24]
        break;
 8007574:	e008      	b.n	8007588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757a:	61bb      	str	r3, [r7, #24]
        break;
 800757c:	e004      	b.n	8007588 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	77bb      	strb	r3, [r7, #30]
        break;
 8007586:	bf00      	nop
    }

    if (pclk != 0U)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d018      	beq.n	80075c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085a      	lsrs	r2, r3, #1
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	441a      	add	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b0f      	cmp	r3, #15
 80075a6:	d909      	bls.n	80075bc <UART_SetConfig+0x4a0>
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ae:	d205      	bcs.n	80075bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	e001      	b.n	80075c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80075cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40007c00 	.word	0x40007c00
 80075dc:	40023800 	.word	0x40023800
 80075e0:	00f42400 	.word	0x00f42400

080075e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01a      	beq.n	80076fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e2:	d10a      	bne.n	80076fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af02      	add	r7, sp, #8
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007738:	f7fa fe08 	bl	800234c <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b08      	cmp	r3, #8
 800774a:	d10e      	bne.n	800776a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f81b 	bl	8007796 <UART_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e011      	b.n	800778e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b09c      	sub	sp, #112	; 0x70
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a6:	e0a7      	b.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	f000 80a3 	beq.w	80078f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b2:	f7fa fdcb 	bl	800234c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80077c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d13f      	bne.n	8007848 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077dc:	667b      	str	r3, [r7, #100]	; 0x64
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e6      	bne.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	663b      	str	r3, [r7, #96]	; 0x60
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800781a:	64ba      	str	r2, [r7, #72]	; 0x48
 800781c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e5      	bne.n	80077fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e068      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d050      	beq.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007864:	d148      	bne.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800786e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
 8007890:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e6      	bne.n	8007870 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	613b      	str	r3, [r7, #16]
   return(result);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078c2:	623a      	str	r2, [r7, #32]
 80078c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	69f9      	ldr	r1, [r7, #28]
 80078c8:	6a3a      	ldr	r2, [r7, #32]
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e5      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2220      	movs	r2, #32
 80078da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e010      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4013      	ands	r3, r2
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	429a      	cmp	r2, r3
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	429a      	cmp	r2, r3
 8007914:	f43f af48 	beq.w	80077a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3770      	adds	r7, #112	; 0x70
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007924:	b480      	push	{r7}
 8007926:	b097      	sub	sp, #92	; 0x5c
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	d10e      	bne.n	8007976 <UART_Start_Receive_IT+0x52>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <UART_Start_Receive_IT+0x48>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800796a:	e02d      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007974:	e028      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <UART_Start_Receive_IT+0x76>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <UART_Start_Receive_IT+0x6c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	22ff      	movs	r2, #255	; 0xff
 800798a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800798e:	e01b      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	227f      	movs	r2, #127	; 0x7f
 8007994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007998:	e016      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a2:	d10d      	bne.n	80079c0 <UART_Start_Receive_IT+0x9c>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <UART_Start_Receive_IT+0x92>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	227f      	movs	r2, #127	; 0x7f
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b4:	e008      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	223f      	movs	r2, #63	; 0x3f
 80079ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079be:	e003      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2222      	movs	r2, #34	; 0x22
 80079d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	657b      	str	r3, [r7, #84]	; 0x54
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80079fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d107      	bne.n	8007a26 <UART_Start_Receive_IT+0x102>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <UART_Start_Receive_IT+0x184>)
 8007a22:	669a      	str	r2, [r3, #104]	; 0x68
 8007a24:	e002      	b.n	8007a2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a20      	ldr	r2, [pc, #128]	; (8007aac <UART_Start_Receive_IT+0x188>)
 8007a2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d019      	beq.n	8007a68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	637b      	str	r3, [r7, #52]	; 0x34
 8007a54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_Start_Receive_IT+0x110>
 8007a66:	e018      	b.n	8007a9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	613b      	str	r3, [r7, #16]
   return(result);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f043 0320 	orr.w	r3, r3, #32
 8007a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a86:	623b      	str	r3, [r7, #32]
 8007a88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	69f9      	ldr	r1, [r7, #28]
 8007a8c:	6a3a      	ldr	r2, [r7, #32]
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e6      	bne.n	8007a68 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	375c      	adds	r7, #92	; 0x5c
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	08007d5f 	.word	0x08007d5f
 8007aac:	08007bf9 	.word	0x08007bf9

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d118      	bne.n	8007b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	613b      	str	r3, [r7, #16]
   return(result);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e6      	bne.n	8007b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b6c:	bf00      	nop
 8007b6e:	3754      	adds	r7, #84	; 0x54
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff faaa 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6979      	ldr	r1, [r7, #20]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e6      	bne.n	8007bac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fa76 	bl	80070dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bf0:	bf00      	nop
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c10:	2b22      	cmp	r3, #34	; 0x22
 8007c12:	f040 8098 	bne.w	8007d46 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007c24:	b2d9      	uxtb	r1, r3
 8007c26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	400a      	ands	r2, r1
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d17b      	bne.n	8007d56 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c72:	653b      	str	r3, [r7, #80]	; 0x50
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cb0:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d12e      	bne.n	8007d3e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0310 	bic.w	r3, r3, #16
 8007cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	69b9      	ldr	r1, [r7, #24]
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	617b      	str	r3, [r7, #20]
   return(result);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e6      	bne.n	8007ce6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d103      	bne.n	8007d2e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2210      	movs	r2, #16
 8007d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff f9e4 	bl	8007104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d3c:	e00b      	b.n	8007d56 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7f9 fbe8 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007d44:	e007      	b.n	8007d56 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0208 	orr.w	r2, r2, #8
 8007d54:	619a      	str	r2, [r3, #24]
}
 8007d56:	bf00      	nop
 8007d58:	3758      	adds	r7, #88	; 0x58
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b096      	sub	sp, #88	; 0x58
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d76:	2b22      	cmp	r3, #34	; 0x22
 8007d78:	f040 8098 	bne.w	8007eac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d94:	4013      	ands	r3, r2
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d17b      	bne.n	8007ebc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
 8007de4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d12e      	bne.n	8007ea4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0310 	bic.w	r3, r3, #16
 8007e60:	647b      	str	r3, [r7, #68]	; 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	613b      	str	r3, [r7, #16]
   return(result);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d103      	bne.n	8007e94 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2210      	movs	r2, #16
 8007e92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff f931 	bl	8007104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ea2:	e00b      	b.n	8007ebc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7f9 fb35 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007eaa:	e007      	b.n	8007ebc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	619a      	str	r2, [r3, #24]
}
 8007ebc:	bf00      	nop
 8007ebe:	3758      	adds	r7, #88	; 0x58
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <sniprintf>:
 8007ec4:	b40c      	push	{r2, r3}
 8007ec6:	b530      	push	{r4, r5, lr}
 8007ec8:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <sniprintf+0x64>)
 8007eca:	1e0c      	subs	r4, r1, #0
 8007ecc:	681d      	ldr	r5, [r3, #0]
 8007ece:	b09d      	sub	sp, #116	; 0x74
 8007ed0:	da08      	bge.n	8007ee4 <sniprintf+0x20>
 8007ed2:	238b      	movs	r3, #139	; 0x8b
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	b01d      	add	sp, #116	; 0x74
 8007edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ee0:	b002      	add	sp, #8
 8007ee2:	4770      	bx	lr
 8007ee4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007eec:	bf14      	ite	ne
 8007eee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ef2:	4623      	moveq	r3, r4
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007efc:	9002      	str	r0, [sp, #8]
 8007efe:	9006      	str	r0, [sp, #24]
 8007f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f06:	ab21      	add	r3, sp, #132	; 0x84
 8007f08:	a902      	add	r1, sp, #8
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f000 f9b3 	bl	8008278 <_svfiprintf_r>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	bfbc      	itt	lt
 8007f16:	238b      	movlt	r3, #139	; 0x8b
 8007f18:	602b      	strlt	r3, [r5, #0]
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d0dd      	beq.n	8007eda <sniprintf+0x16>
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e7d9      	b.n	8007eda <sniprintf+0x16>
 8007f26:	bf00      	nop
 8007f28:	20000074 	.word	0x20000074

08007f2c <siprintf>:
 8007f2c:	b40e      	push	{r1, r2, r3}
 8007f2e:	b500      	push	{lr}
 8007f30:	b09c      	sub	sp, #112	; 0x70
 8007f32:	ab1d      	add	r3, sp, #116	; 0x74
 8007f34:	9002      	str	r0, [sp, #8]
 8007f36:	9006      	str	r0, [sp, #24]
 8007f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f3c:	4809      	ldr	r0, [pc, #36]	; (8007f64 <siprintf+0x38>)
 8007f3e:	9107      	str	r1, [sp, #28]
 8007f40:	9104      	str	r1, [sp, #16]
 8007f42:	4909      	ldr	r1, [pc, #36]	; (8007f68 <siprintf+0x3c>)
 8007f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f48:	9105      	str	r1, [sp, #20]
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	a902      	add	r1, sp, #8
 8007f50:	f000 f992 	bl	8008278 <_svfiprintf_r>
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	b01c      	add	sp, #112	; 0x70
 8007f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f60:	b003      	add	sp, #12
 8007f62:	4770      	bx	lr
 8007f64:	20000074 	.word	0x20000074
 8007f68:	ffff0208 	.word	0xffff0208

08007f6c <memset>:
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d100      	bne.n	8007f76 <memset+0xa>
 8007f74:	4770      	bx	lr
 8007f76:	f803 1b01 	strb.w	r1, [r3], #1
 8007f7a:	e7f9      	b.n	8007f70 <memset+0x4>

08007f7c <__errno>:
 8007f7c:	4b01      	ldr	r3, [pc, #4]	; (8007f84 <__errno+0x8>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000074 	.word	0x20000074

08007f88 <__libc_init_array>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4d0d      	ldr	r5, [pc, #52]	; (8007fc0 <__libc_init_array+0x38>)
 8007f8c:	4c0d      	ldr	r4, [pc, #52]	; (8007fc4 <__libc_init_array+0x3c>)
 8007f8e:	1b64      	subs	r4, r4, r5
 8007f90:	10a4      	asrs	r4, r4, #2
 8007f92:	2600      	movs	r6, #0
 8007f94:	42a6      	cmp	r6, r4
 8007f96:	d109      	bne.n	8007fac <__libc_init_array+0x24>
 8007f98:	4d0b      	ldr	r5, [pc, #44]	; (8007fc8 <__libc_init_array+0x40>)
 8007f9a:	4c0c      	ldr	r4, [pc, #48]	; (8007fcc <__libc_init_array+0x44>)
 8007f9c:	f000 fc6a 	bl	8008874 <_init>
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	d105      	bne.n	8007fb6 <__libc_init_array+0x2e>
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb0:	4798      	blx	r3
 8007fb2:	3601      	adds	r6, #1
 8007fb4:	e7ee      	b.n	8007f94 <__libc_init_array+0xc>
 8007fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fba:	4798      	blx	r3
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	e7f2      	b.n	8007fa6 <__libc_init_array+0x1e>
 8007fc0:	08008938 	.word	0x08008938
 8007fc4:	08008938 	.word	0x08008938
 8007fc8:	08008938 	.word	0x08008938
 8007fcc:	0800893c 	.word	0x0800893c

08007fd0 <__retarget_lock_acquire_recursive>:
 8007fd0:	4770      	bx	lr

08007fd2 <__retarget_lock_release_recursive>:
 8007fd2:	4770      	bx	lr

08007fd4 <_free_r>:
 8007fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fd6:	2900      	cmp	r1, #0
 8007fd8:	d044      	beq.n	8008064 <_free_r+0x90>
 8007fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fde:	9001      	str	r0, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fe6:	bfb8      	it	lt
 8007fe8:	18e4      	addlt	r4, r4, r3
 8007fea:	f000 f8df 	bl	80081ac <__malloc_lock>
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <_free_r+0x94>)
 8007ff0:	9801      	ldr	r0, [sp, #4]
 8007ff2:	6813      	ldr	r3, [r2, #0]
 8007ff4:	b933      	cbnz	r3, 8008004 <_free_r+0x30>
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	6014      	str	r4, [r2, #0]
 8007ffa:	b003      	add	sp, #12
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008000:	f000 b8da 	b.w	80081b8 <__malloc_unlock>
 8008004:	42a3      	cmp	r3, r4
 8008006:	d908      	bls.n	800801a <_free_r+0x46>
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	1961      	adds	r1, r4, r5
 800800c:	428b      	cmp	r3, r1
 800800e:	bf01      	itttt	eq
 8008010:	6819      	ldreq	r1, [r3, #0]
 8008012:	685b      	ldreq	r3, [r3, #4]
 8008014:	1949      	addeq	r1, r1, r5
 8008016:	6021      	streq	r1, [r4, #0]
 8008018:	e7ed      	b.n	8007ff6 <_free_r+0x22>
 800801a:	461a      	mov	r2, r3
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b10b      	cbz	r3, 8008024 <_free_r+0x50>
 8008020:	42a3      	cmp	r3, r4
 8008022:	d9fa      	bls.n	800801a <_free_r+0x46>
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	1855      	adds	r5, r2, r1
 8008028:	42a5      	cmp	r5, r4
 800802a:	d10b      	bne.n	8008044 <_free_r+0x70>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	4421      	add	r1, r4
 8008030:	1854      	adds	r4, r2, r1
 8008032:	42a3      	cmp	r3, r4
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	d1e0      	bne.n	8007ffa <_free_r+0x26>
 8008038:	681c      	ldr	r4, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	6053      	str	r3, [r2, #4]
 800803e:	440c      	add	r4, r1
 8008040:	6014      	str	r4, [r2, #0]
 8008042:	e7da      	b.n	8007ffa <_free_r+0x26>
 8008044:	d902      	bls.n	800804c <_free_r+0x78>
 8008046:	230c      	movs	r3, #12
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	e7d6      	b.n	8007ffa <_free_r+0x26>
 800804c:	6825      	ldr	r5, [r4, #0]
 800804e:	1961      	adds	r1, r4, r5
 8008050:	428b      	cmp	r3, r1
 8008052:	bf04      	itt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	bf04      	itt	eq
 800805c:	1949      	addeq	r1, r1, r5
 800805e:	6021      	streq	r1, [r4, #0]
 8008060:	6054      	str	r4, [r2, #4]
 8008062:	e7ca      	b.n	8007ffa <_free_r+0x26>
 8008064:	b003      	add	sp, #12
 8008066:	bd30      	pop	{r4, r5, pc}
 8008068:	20000534 	.word	0x20000534

0800806c <sbrk_aligned>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4e0e      	ldr	r6, [pc, #56]	; (80080a8 <sbrk_aligned+0x3c>)
 8008070:	460c      	mov	r4, r1
 8008072:	6831      	ldr	r1, [r6, #0]
 8008074:	4605      	mov	r5, r0
 8008076:	b911      	cbnz	r1, 800807e <sbrk_aligned+0x12>
 8008078:	f000 fba6 	bl	80087c8 <_sbrk_r>
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f000 fba1 	bl	80087c8 <_sbrk_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d00a      	beq.n	80080a0 <sbrk_aligned+0x34>
 800808a:	1cc4      	adds	r4, r0, #3
 800808c:	f024 0403 	bic.w	r4, r4, #3
 8008090:	42a0      	cmp	r0, r4
 8008092:	d007      	beq.n	80080a4 <sbrk_aligned+0x38>
 8008094:	1a21      	subs	r1, r4, r0
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fb96 	bl	80087c8 <_sbrk_r>
 800809c:	3001      	adds	r0, #1
 800809e:	d101      	bne.n	80080a4 <sbrk_aligned+0x38>
 80080a0:	f04f 34ff 	mov.w	r4, #4294967295
 80080a4:	4620      	mov	r0, r4
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	20000538 	.word	0x20000538

080080ac <_malloc_r>:
 80080ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b0:	1ccd      	adds	r5, r1, #3
 80080b2:	f025 0503 	bic.w	r5, r5, #3
 80080b6:	3508      	adds	r5, #8
 80080b8:	2d0c      	cmp	r5, #12
 80080ba:	bf38      	it	cc
 80080bc:	250c      	movcc	r5, #12
 80080be:	2d00      	cmp	r5, #0
 80080c0:	4607      	mov	r7, r0
 80080c2:	db01      	blt.n	80080c8 <_malloc_r+0x1c>
 80080c4:	42a9      	cmp	r1, r5
 80080c6:	d905      	bls.n	80080d4 <_malloc_r+0x28>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	2600      	movs	r6, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081a8 <_malloc_r+0xfc>
 80080d8:	f000 f868 	bl	80081ac <__malloc_lock>
 80080dc:	f8d8 3000 	ldr.w	r3, [r8]
 80080e0:	461c      	mov	r4, r3
 80080e2:	bb5c      	cbnz	r4, 800813c <_malloc_r+0x90>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4638      	mov	r0, r7
 80080e8:	f7ff ffc0 	bl	800806c <sbrk_aligned>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	4604      	mov	r4, r0
 80080f0:	d155      	bne.n	800819e <_malloc_r+0xf2>
 80080f2:	f8d8 4000 	ldr.w	r4, [r8]
 80080f6:	4626      	mov	r6, r4
 80080f8:	2e00      	cmp	r6, #0
 80080fa:	d145      	bne.n	8008188 <_malloc_r+0xdc>
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	d048      	beq.n	8008192 <_malloc_r+0xe6>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	4631      	mov	r1, r6
 8008104:	4638      	mov	r0, r7
 8008106:	eb04 0903 	add.w	r9, r4, r3
 800810a:	f000 fb5d 	bl	80087c8 <_sbrk_r>
 800810e:	4581      	cmp	r9, r0
 8008110:	d13f      	bne.n	8008192 <_malloc_r+0xe6>
 8008112:	6821      	ldr	r1, [r4, #0]
 8008114:	1a6d      	subs	r5, r5, r1
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ffa7 	bl	800806c <sbrk_aligned>
 800811e:	3001      	adds	r0, #1
 8008120:	d037      	beq.n	8008192 <_malloc_r+0xe6>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	442b      	add	r3, r5
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	f8d8 3000 	ldr.w	r3, [r8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d038      	beq.n	80081a2 <_malloc_r+0xf6>
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	42a2      	cmp	r2, r4
 8008134:	d12b      	bne.n	800818e <_malloc_r+0xe2>
 8008136:	2200      	movs	r2, #0
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	e00f      	b.n	800815c <_malloc_r+0xb0>
 800813c:	6822      	ldr	r2, [r4, #0]
 800813e:	1b52      	subs	r2, r2, r5
 8008140:	d41f      	bmi.n	8008182 <_malloc_r+0xd6>
 8008142:	2a0b      	cmp	r2, #11
 8008144:	d917      	bls.n	8008176 <_malloc_r+0xca>
 8008146:	1961      	adds	r1, r4, r5
 8008148:	42a3      	cmp	r3, r4
 800814a:	6025      	str	r5, [r4, #0]
 800814c:	bf18      	it	ne
 800814e:	6059      	strne	r1, [r3, #4]
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	bf08      	it	eq
 8008154:	f8c8 1000 	streq.w	r1, [r8]
 8008158:	5162      	str	r2, [r4, r5]
 800815a:	604b      	str	r3, [r1, #4]
 800815c:	4638      	mov	r0, r7
 800815e:	f104 060b 	add.w	r6, r4, #11
 8008162:	f000 f829 	bl	80081b8 <__malloc_unlock>
 8008166:	f026 0607 	bic.w	r6, r6, #7
 800816a:	1d23      	adds	r3, r4, #4
 800816c:	1af2      	subs	r2, r6, r3
 800816e:	d0ae      	beq.n	80080ce <_malloc_r+0x22>
 8008170:	1b9b      	subs	r3, r3, r6
 8008172:	50a3      	str	r3, [r4, r2]
 8008174:	e7ab      	b.n	80080ce <_malloc_r+0x22>
 8008176:	42a3      	cmp	r3, r4
 8008178:	6862      	ldr	r2, [r4, #4]
 800817a:	d1dd      	bne.n	8008138 <_malloc_r+0x8c>
 800817c:	f8c8 2000 	str.w	r2, [r8]
 8008180:	e7ec      	b.n	800815c <_malloc_r+0xb0>
 8008182:	4623      	mov	r3, r4
 8008184:	6864      	ldr	r4, [r4, #4]
 8008186:	e7ac      	b.n	80080e2 <_malloc_r+0x36>
 8008188:	4634      	mov	r4, r6
 800818a:	6876      	ldr	r6, [r6, #4]
 800818c:	e7b4      	b.n	80080f8 <_malloc_r+0x4c>
 800818e:	4613      	mov	r3, r2
 8008190:	e7cc      	b.n	800812c <_malloc_r+0x80>
 8008192:	230c      	movs	r3, #12
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4638      	mov	r0, r7
 8008198:	f000 f80e 	bl	80081b8 <__malloc_unlock>
 800819c:	e797      	b.n	80080ce <_malloc_r+0x22>
 800819e:	6025      	str	r5, [r4, #0]
 80081a0:	e7dc      	b.n	800815c <_malloc_r+0xb0>
 80081a2:	605b      	str	r3, [r3, #4]
 80081a4:	deff      	udf	#255	; 0xff
 80081a6:	bf00      	nop
 80081a8:	20000534 	.word	0x20000534

080081ac <__malloc_lock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_lock+0x8>)
 80081ae:	f7ff bf0f 	b.w	8007fd0 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20000530 	.word	0x20000530

080081b8 <__malloc_unlock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_unlock+0x8>)
 80081ba:	f7ff bf0a 	b.w	8007fd2 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20000530 	.word	0x20000530

080081c4 <__ssputs_r>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	688e      	ldr	r6, [r1, #8]
 80081ca:	461f      	mov	r7, r3
 80081cc:	42be      	cmp	r6, r7
 80081ce:	680b      	ldr	r3, [r1, #0]
 80081d0:	4682      	mov	sl, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4690      	mov	r8, r2
 80081d6:	d82c      	bhi.n	8008232 <__ssputs_r+0x6e>
 80081d8:	898a      	ldrh	r2, [r1, #12]
 80081da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081de:	d026      	beq.n	800822e <__ssputs_r+0x6a>
 80081e0:	6965      	ldr	r5, [r4, #20]
 80081e2:	6909      	ldr	r1, [r1, #16]
 80081e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081e8:	eba3 0901 	sub.w	r9, r3, r1
 80081ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081f0:	1c7b      	adds	r3, r7, #1
 80081f2:	444b      	add	r3, r9
 80081f4:	106d      	asrs	r5, r5, #1
 80081f6:	429d      	cmp	r5, r3
 80081f8:	bf38      	it	cc
 80081fa:	461d      	movcc	r5, r3
 80081fc:	0553      	lsls	r3, r2, #21
 80081fe:	d527      	bpl.n	8008250 <__ssputs_r+0x8c>
 8008200:	4629      	mov	r1, r5
 8008202:	f7ff ff53 	bl	80080ac <_malloc_r>
 8008206:	4606      	mov	r6, r0
 8008208:	b360      	cbz	r0, 8008264 <__ssputs_r+0xa0>
 800820a:	6921      	ldr	r1, [r4, #16]
 800820c:	464a      	mov	r2, r9
 800820e:	f000 faeb 	bl	80087e8 <memcpy>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	6126      	str	r6, [r4, #16]
 8008220:	6165      	str	r5, [r4, #20]
 8008222:	444e      	add	r6, r9
 8008224:	eba5 0509 	sub.w	r5, r5, r9
 8008228:	6026      	str	r6, [r4, #0]
 800822a:	60a5      	str	r5, [r4, #8]
 800822c:	463e      	mov	r6, r7
 800822e:	42be      	cmp	r6, r7
 8008230:	d900      	bls.n	8008234 <__ssputs_r+0x70>
 8008232:	463e      	mov	r6, r7
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	4632      	mov	r2, r6
 8008238:	4641      	mov	r1, r8
 800823a:	f000 faab 	bl	8008794 <memmove>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	1b9b      	subs	r3, r3, r6
 8008242:	60a3      	str	r3, [r4, #8]
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	4433      	add	r3, r6
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	2000      	movs	r0, #0
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	462a      	mov	r2, r5
 8008252:	f000 fad7 	bl	8008804 <_realloc_r>
 8008256:	4606      	mov	r6, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	d1e0      	bne.n	800821e <__ssputs_r+0x5a>
 800825c:	6921      	ldr	r1, [r4, #16]
 800825e:	4650      	mov	r0, sl
 8008260:	f7ff feb8 	bl	8007fd4 <_free_r>
 8008264:	230c      	movs	r3, #12
 8008266:	f8ca 3000 	str.w	r3, [sl]
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008270:	81a3      	strh	r3, [r4, #12]
 8008272:	f04f 30ff 	mov.w	r0, #4294967295
 8008276:	e7e9      	b.n	800824c <__ssputs_r+0x88>

08008278 <_svfiprintf_r>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	4698      	mov	r8, r3
 800827e:	898b      	ldrh	r3, [r1, #12]
 8008280:	061b      	lsls	r3, r3, #24
 8008282:	b09d      	sub	sp, #116	; 0x74
 8008284:	4607      	mov	r7, r0
 8008286:	460d      	mov	r5, r1
 8008288:	4614      	mov	r4, r2
 800828a:	d50e      	bpl.n	80082aa <_svfiprintf_r+0x32>
 800828c:	690b      	ldr	r3, [r1, #16]
 800828e:	b963      	cbnz	r3, 80082aa <_svfiprintf_r+0x32>
 8008290:	2140      	movs	r1, #64	; 0x40
 8008292:	f7ff ff0b 	bl	80080ac <_malloc_r>
 8008296:	6028      	str	r0, [r5, #0]
 8008298:	6128      	str	r0, [r5, #16]
 800829a:	b920      	cbnz	r0, 80082a6 <_svfiprintf_r+0x2e>
 800829c:	230c      	movs	r3, #12
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e0d0      	b.n	8008448 <_svfiprintf_r+0x1d0>
 80082a6:	2340      	movs	r3, #64	; 0x40
 80082a8:	616b      	str	r3, [r5, #20]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9309      	str	r3, [sp, #36]	; 0x24
 80082ae:	2320      	movs	r3, #32
 80082b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082b8:	2330      	movs	r3, #48	; 0x30
 80082ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008460 <_svfiprintf_r+0x1e8>
 80082be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c2:	f04f 0901 	mov.w	r9, #1
 80082c6:	4623      	mov	r3, r4
 80082c8:	469a      	mov	sl, r3
 80082ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ce:	b10a      	cbz	r2, 80082d4 <_svfiprintf_r+0x5c>
 80082d0:	2a25      	cmp	r2, #37	; 0x25
 80082d2:	d1f9      	bne.n	80082c8 <_svfiprintf_r+0x50>
 80082d4:	ebba 0b04 	subs.w	fp, sl, r4
 80082d8:	d00b      	beq.n	80082f2 <_svfiprintf_r+0x7a>
 80082da:	465b      	mov	r3, fp
 80082dc:	4622      	mov	r2, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff ff6f 	bl	80081c4 <__ssputs_r>
 80082e6:	3001      	adds	r0, #1
 80082e8:	f000 80a9 	beq.w	800843e <_svfiprintf_r+0x1c6>
 80082ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ee:	445a      	add	r2, fp
 80082f0:	9209      	str	r2, [sp, #36]	; 0x24
 80082f2:	f89a 3000 	ldrb.w	r3, [sl]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80a1 	beq.w	800843e <_svfiprintf_r+0x1c6>
 80082fc:	2300      	movs	r3, #0
 80082fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008306:	f10a 0a01 	add.w	sl, sl, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	9307      	str	r3, [sp, #28]
 800830e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008312:	931a      	str	r3, [sp, #104]	; 0x68
 8008314:	4654      	mov	r4, sl
 8008316:	2205      	movs	r2, #5
 8008318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831c:	4850      	ldr	r0, [pc, #320]	; (8008460 <_svfiprintf_r+0x1e8>)
 800831e:	f7f7 ff77 	bl	8000210 <memchr>
 8008322:	9a04      	ldr	r2, [sp, #16]
 8008324:	b9d8      	cbnz	r0, 800835e <_svfiprintf_r+0xe6>
 8008326:	06d0      	lsls	r0, r2, #27
 8008328:	bf44      	itt	mi
 800832a:	2320      	movmi	r3, #32
 800832c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008330:	0711      	lsls	r1, r2, #28
 8008332:	bf44      	itt	mi
 8008334:	232b      	movmi	r3, #43	; 0x2b
 8008336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833a:	f89a 3000 	ldrb.w	r3, [sl]
 800833e:	2b2a      	cmp	r3, #42	; 0x2a
 8008340:	d015      	beq.n	800836e <_svfiprintf_r+0xf6>
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	4654      	mov	r4, sl
 8008346:	2000      	movs	r0, #0
 8008348:	f04f 0c0a 	mov.w	ip, #10
 800834c:	4621      	mov	r1, r4
 800834e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008352:	3b30      	subs	r3, #48	; 0x30
 8008354:	2b09      	cmp	r3, #9
 8008356:	d94d      	bls.n	80083f4 <_svfiprintf_r+0x17c>
 8008358:	b1b0      	cbz	r0, 8008388 <_svfiprintf_r+0x110>
 800835a:	9207      	str	r2, [sp, #28]
 800835c:	e014      	b.n	8008388 <_svfiprintf_r+0x110>
 800835e:	eba0 0308 	sub.w	r3, r0, r8
 8008362:	fa09 f303 	lsl.w	r3, r9, r3
 8008366:	4313      	orrs	r3, r2
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	46a2      	mov	sl, r4
 800836c:	e7d2      	b.n	8008314 <_svfiprintf_r+0x9c>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	1d19      	adds	r1, r3, #4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	9103      	str	r1, [sp, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfbb      	ittet	lt
 800837a:	425b      	neglt	r3, r3
 800837c:	f042 0202 	orrlt.w	r2, r2, #2
 8008380:	9307      	strge	r3, [sp, #28]
 8008382:	9307      	strlt	r3, [sp, #28]
 8008384:	bfb8      	it	lt
 8008386:	9204      	strlt	r2, [sp, #16]
 8008388:	7823      	ldrb	r3, [r4, #0]
 800838a:	2b2e      	cmp	r3, #46	; 0x2e
 800838c:	d10c      	bne.n	80083a8 <_svfiprintf_r+0x130>
 800838e:	7863      	ldrb	r3, [r4, #1]
 8008390:	2b2a      	cmp	r3, #42	; 0x2a
 8008392:	d134      	bne.n	80083fe <_svfiprintf_r+0x186>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	9203      	str	r2, [sp, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfb8      	it	lt
 80083a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083a4:	3402      	adds	r4, #2
 80083a6:	9305      	str	r3, [sp, #20]
 80083a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008470 <_svfiprintf_r+0x1f8>
 80083ac:	7821      	ldrb	r1, [r4, #0]
 80083ae:	2203      	movs	r2, #3
 80083b0:	4650      	mov	r0, sl
 80083b2:	f7f7 ff2d 	bl	8000210 <memchr>
 80083b6:	b138      	cbz	r0, 80083c8 <_svfiprintf_r+0x150>
 80083b8:	9b04      	ldr	r3, [sp, #16]
 80083ba:	eba0 000a 	sub.w	r0, r0, sl
 80083be:	2240      	movs	r2, #64	; 0x40
 80083c0:	4082      	lsls	r2, r0
 80083c2:	4313      	orrs	r3, r2
 80083c4:	3401      	adds	r4, #1
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083cc:	4825      	ldr	r0, [pc, #148]	; (8008464 <_svfiprintf_r+0x1ec>)
 80083ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083d2:	2206      	movs	r2, #6
 80083d4:	f7f7 ff1c 	bl	8000210 <memchr>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d038      	beq.n	800844e <_svfiprintf_r+0x1d6>
 80083dc:	4b22      	ldr	r3, [pc, #136]	; (8008468 <_svfiprintf_r+0x1f0>)
 80083de:	bb1b      	cbnz	r3, 8008428 <_svfiprintf_r+0x1b0>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	3307      	adds	r3, #7
 80083e4:	f023 0307 	bic.w	r3, r3, #7
 80083e8:	3308      	adds	r3, #8
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ee:	4433      	add	r3, r6
 80083f0:	9309      	str	r3, [sp, #36]	; 0x24
 80083f2:	e768      	b.n	80082c6 <_svfiprintf_r+0x4e>
 80083f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083f8:	460c      	mov	r4, r1
 80083fa:	2001      	movs	r0, #1
 80083fc:	e7a6      	b.n	800834c <_svfiprintf_r+0xd4>
 80083fe:	2300      	movs	r3, #0
 8008400:	3401      	adds	r4, #1
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	4619      	mov	r1, r3
 8008406:	f04f 0c0a 	mov.w	ip, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008410:	3a30      	subs	r2, #48	; 0x30
 8008412:	2a09      	cmp	r2, #9
 8008414:	d903      	bls.n	800841e <_svfiprintf_r+0x1a6>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0c6      	beq.n	80083a8 <_svfiprintf_r+0x130>
 800841a:	9105      	str	r1, [sp, #20]
 800841c:	e7c4      	b.n	80083a8 <_svfiprintf_r+0x130>
 800841e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008422:	4604      	mov	r4, r0
 8008424:	2301      	movs	r3, #1
 8008426:	e7f0      	b.n	800840a <_svfiprintf_r+0x192>
 8008428:	ab03      	add	r3, sp, #12
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	462a      	mov	r2, r5
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <_svfiprintf_r+0x1f4>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	4638      	mov	r0, r7
 8008434:	f3af 8000 	nop.w
 8008438:	1c42      	adds	r2, r0, #1
 800843a:	4606      	mov	r6, r0
 800843c:	d1d6      	bne.n	80083ec <_svfiprintf_r+0x174>
 800843e:	89ab      	ldrh	r3, [r5, #12]
 8008440:	065b      	lsls	r3, r3, #25
 8008442:	f53f af2d 	bmi.w	80082a0 <_svfiprintf_r+0x28>
 8008446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008448:	b01d      	add	sp, #116	; 0x74
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	ab03      	add	r3, sp, #12
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	462a      	mov	r2, r5
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <_svfiprintf_r+0x1f4>)
 8008456:	a904      	add	r1, sp, #16
 8008458:	4638      	mov	r0, r7
 800845a:	f000 f879 	bl	8008550 <_printf_i>
 800845e:	e7eb      	b.n	8008438 <_svfiprintf_r+0x1c0>
 8008460:	080088fc 	.word	0x080088fc
 8008464:	08008906 	.word	0x08008906
 8008468:	00000000 	.word	0x00000000
 800846c:	080081c5 	.word	0x080081c5
 8008470:	08008902 	.word	0x08008902

08008474 <_printf_common>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	4616      	mov	r6, r2
 800847a:	4699      	mov	r9, r3
 800847c:	688a      	ldr	r2, [r1, #8]
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008484:	4293      	cmp	r3, r2
 8008486:	bfb8      	it	lt
 8008488:	4613      	movlt	r3, r2
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008490:	4607      	mov	r7, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b10a      	cbz	r2, 800849a <_printf_common+0x26>
 8008496:	3301      	adds	r3, #1
 8008498:	6033      	str	r3, [r6, #0]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	0699      	lsls	r1, r3, #26
 800849e:	bf42      	ittt	mi
 80084a0:	6833      	ldrmi	r3, [r6, #0]
 80084a2:	3302      	addmi	r3, #2
 80084a4:	6033      	strmi	r3, [r6, #0]
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	f015 0506 	ands.w	r5, r5, #6
 80084ac:	d106      	bne.n	80084bc <_printf_common+0x48>
 80084ae:	f104 0a19 	add.w	sl, r4, #25
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	6832      	ldr	r2, [r6, #0]
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc26      	bgt.n	800850a <_printf_common+0x96>
 80084bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c0:	1e13      	subs	r3, r2, #0
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	0692      	lsls	r2, r2, #26
 80084ca:	d42b      	bmi.n	8008524 <_printf_common+0xb0>
 80084cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d01e      	beq.n	8008518 <_printf_common+0xa4>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6922      	ldr	r2, [r4, #16]
 80084de:	f003 0306 	and.w	r3, r3, #6
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf02      	ittt	eq
 80084e6:	68e5      	ldreq	r5, [r4, #12]
 80084e8:	6833      	ldreq	r3, [r6, #0]
 80084ea:	1aed      	subeq	r5, r5, r3
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	bf0c      	ite	eq
 80084f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f4:	2500      	movne	r5, #0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bfc4      	itt	gt
 80084fa:	1a9b      	subgt	r3, r3, r2
 80084fc:	18ed      	addgt	r5, r5, r3
 80084fe:	2600      	movs	r6, #0
 8008500:	341a      	adds	r4, #26
 8008502:	42b5      	cmp	r5, r6
 8008504:	d11a      	bne.n	800853c <_printf_common+0xc8>
 8008506:	2000      	movs	r0, #0
 8008508:	e008      	b.n	800851c <_printf_common+0xa8>
 800850a:	2301      	movs	r3, #1
 800850c:	4652      	mov	r2, sl
 800850e:	4649      	mov	r1, r9
 8008510:	4638      	mov	r0, r7
 8008512:	47c0      	blx	r8
 8008514:	3001      	adds	r0, #1
 8008516:	d103      	bne.n	8008520 <_printf_common+0xac>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	3501      	adds	r5, #1
 8008522:	e7c6      	b.n	80084b2 <_printf_common+0x3e>
 8008524:	18e1      	adds	r1, r4, r3
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	2030      	movs	r0, #48	; 0x30
 800852a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800852e:	4422      	add	r2, r4
 8008530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008538:	3302      	adds	r3, #2
 800853a:	e7c7      	b.n	80084cc <_printf_common+0x58>
 800853c:	2301      	movs	r3, #1
 800853e:	4622      	mov	r2, r4
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d0e6      	beq.n	8008518 <_printf_common+0xa4>
 800854a:	3601      	adds	r6, #1
 800854c:	e7d9      	b.n	8008502 <_printf_common+0x8e>
	...

08008550 <_printf_i>:
 8008550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	7e0f      	ldrb	r7, [r1, #24]
 8008556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008558:	2f78      	cmp	r7, #120	; 0x78
 800855a:	4691      	mov	r9, r2
 800855c:	4680      	mov	r8, r0
 800855e:	460c      	mov	r4, r1
 8008560:	469a      	mov	sl, r3
 8008562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008566:	d807      	bhi.n	8008578 <_printf_i+0x28>
 8008568:	2f62      	cmp	r7, #98	; 0x62
 800856a:	d80a      	bhi.n	8008582 <_printf_i+0x32>
 800856c:	2f00      	cmp	r7, #0
 800856e:	f000 80d4 	beq.w	800871a <_printf_i+0x1ca>
 8008572:	2f58      	cmp	r7, #88	; 0x58
 8008574:	f000 80c0 	beq.w	80086f8 <_printf_i+0x1a8>
 8008578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800857c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008580:	e03a      	b.n	80085f8 <_printf_i+0xa8>
 8008582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008586:	2b15      	cmp	r3, #21
 8008588:	d8f6      	bhi.n	8008578 <_printf_i+0x28>
 800858a:	a101      	add	r1, pc, #4	; (adr r1, 8008590 <_printf_i+0x40>)
 800858c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085fd 	.word	0x080085fd
 8008598:	08008579 	.word	0x08008579
 800859c:	08008579 	.word	0x08008579
 80085a0:	08008579 	.word	0x08008579
 80085a4:	08008579 	.word	0x08008579
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008579 	.word	0x08008579
 80085b0:	08008579 	.word	0x08008579
 80085b4:	08008579 	.word	0x08008579
 80085b8:	08008579 	.word	0x08008579
 80085bc:	08008701 	.word	0x08008701
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080086bb 	.word	0x080086bb
 80085c8:	08008579 	.word	0x08008579
 80085cc:	08008579 	.word	0x08008579
 80085d0:	08008723 	.word	0x08008723
 80085d4:	08008579 	.word	0x08008579
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008579 	.word	0x08008579
 80085e0:	08008579 	.word	0x08008579
 80085e4:	080086c3 	.word	0x080086c3
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	1d1a      	adds	r2, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	602a      	str	r2, [r5, #0]
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f8:	2301      	movs	r3, #1
 80085fa:	e09f      	b.n	800873c <_printf_i+0x1ec>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	0607      	lsls	r7, r0, #24
 8008602:	f103 0104 	add.w	r1, r3, #4
 8008606:	6029      	str	r1, [r5, #0]
 8008608:	d501      	bpl.n	800860e <_printf_i+0xbe>
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	e003      	b.n	8008616 <_printf_i+0xc6>
 800860e:	0646      	lsls	r6, r0, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0xba>
 8008612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008616:	2e00      	cmp	r6, #0
 8008618:	da03      	bge.n	8008622 <_printf_i+0xd2>
 800861a:	232d      	movs	r3, #45	; 0x2d
 800861c:	4276      	negs	r6, r6
 800861e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008622:	485a      	ldr	r0, [pc, #360]	; (800878c <_printf_i+0x23c>)
 8008624:	230a      	movs	r3, #10
 8008626:	e012      	b.n	800864e <_printf_i+0xfe>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	6029      	str	r1, [r5, #0]
 8008630:	0605      	lsls	r5, r0, #24
 8008632:	d501      	bpl.n	8008638 <_printf_i+0xe8>
 8008634:	681e      	ldr	r6, [r3, #0]
 8008636:	e002      	b.n	800863e <_printf_i+0xee>
 8008638:	0641      	lsls	r1, r0, #25
 800863a:	d5fb      	bpl.n	8008634 <_printf_i+0xe4>
 800863c:	881e      	ldrh	r6, [r3, #0]
 800863e:	4853      	ldr	r0, [pc, #332]	; (800878c <_printf_i+0x23c>)
 8008640:	2f6f      	cmp	r7, #111	; 0x6f
 8008642:	bf0c      	ite	eq
 8008644:	2308      	moveq	r3, #8
 8008646:	230a      	movne	r3, #10
 8008648:	2100      	movs	r1, #0
 800864a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800864e:	6865      	ldr	r5, [r4, #4]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	2d00      	cmp	r5, #0
 8008654:	bfa2      	ittt	ge
 8008656:	6821      	ldrge	r1, [r4, #0]
 8008658:	f021 0104 	bicge.w	r1, r1, #4
 800865c:	6021      	strge	r1, [r4, #0]
 800865e:	b90e      	cbnz	r6, 8008664 <_printf_i+0x114>
 8008660:	2d00      	cmp	r5, #0
 8008662:	d04b      	beq.n	80086fc <_printf_i+0x1ac>
 8008664:	4615      	mov	r5, r2
 8008666:	fbb6 f1f3 	udiv	r1, r6, r3
 800866a:	fb03 6711 	mls	r7, r3, r1, r6
 800866e:	5dc7      	ldrb	r7, [r0, r7]
 8008670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008674:	4637      	mov	r7, r6
 8008676:	42bb      	cmp	r3, r7
 8008678:	460e      	mov	r6, r1
 800867a:	d9f4      	bls.n	8008666 <_printf_i+0x116>
 800867c:	2b08      	cmp	r3, #8
 800867e:	d10b      	bne.n	8008698 <_printf_i+0x148>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07de      	lsls	r6, r3, #31
 8008684:	d508      	bpl.n	8008698 <_printf_i+0x148>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4299      	cmp	r1, r3
 800868c:	bfde      	ittt	le
 800868e:	2330      	movle	r3, #48	; 0x30
 8008690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	6122      	str	r2, [r4, #16]
 800869c:	f8cd a000 	str.w	sl, [sp]
 80086a0:	464b      	mov	r3, r9
 80086a2:	aa03      	add	r2, sp, #12
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff fee4 	bl	8008474 <_printf_common>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d14a      	bne.n	8008746 <_printf_i+0x1f6>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b004      	add	sp, #16
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	4833      	ldr	r0, [pc, #204]	; (8008790 <_printf_i+0x240>)
 80086c4:	2778      	movs	r7, #120	; 0x78
 80086c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	061f      	lsls	r7, r3, #24
 80086d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d4:	d402      	bmi.n	80086dc <_printf_i+0x18c>
 80086d6:	065f      	lsls	r7, r3, #25
 80086d8:	bf48      	it	mi
 80086da:	b2b6      	uxthmi	r6, r6
 80086dc:	07df      	lsls	r7, r3, #31
 80086de:	bf48      	it	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	bf48      	it	mi
 80086e8:	6023      	strmi	r3, [r4, #0]
 80086ea:	b91e      	cbnz	r6, 80086f4 <_printf_i+0x1a4>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	2310      	movs	r3, #16
 80086f6:	e7a7      	b.n	8008648 <_printf_i+0xf8>
 80086f8:	4824      	ldr	r0, [pc, #144]	; (800878c <_printf_i+0x23c>)
 80086fa:	e7e4      	b.n	80086c6 <_printf_i+0x176>
 80086fc:	4615      	mov	r5, r2
 80086fe:	e7bd      	b.n	800867c <_printf_i+0x12c>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6826      	ldr	r6, [r4, #0]
 8008704:	6961      	ldr	r1, [r4, #20]
 8008706:	1d18      	adds	r0, r3, #4
 8008708:	6028      	str	r0, [r5, #0]
 800870a:	0635      	lsls	r5, r6, #24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	d501      	bpl.n	8008714 <_printf_i+0x1c4>
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	e002      	b.n	800871a <_printf_i+0x1ca>
 8008714:	0670      	lsls	r0, r6, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0x1c0>
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	4615      	mov	r5, r2
 8008720:	e7bc      	b.n	800869c <_printf_i+0x14c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	2100      	movs	r1, #0
 800872e:	4628      	mov	r0, r5
 8008730:	f7f7 fd6e 	bl	8000210 <memchr>
 8008734:	b108      	cbz	r0, 800873a <_printf_i+0x1ea>
 8008736:	1b40      	subs	r0, r0, r5
 8008738:	6060      	str	r0, [r4, #4]
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	2300      	movs	r3, #0
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	e7aa      	b.n	800869c <_printf_i+0x14c>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	462a      	mov	r2, r5
 800874a:	4649      	mov	r1, r9
 800874c:	4640      	mov	r0, r8
 800874e:	47d0      	blx	sl
 8008750:	3001      	adds	r0, #1
 8008752:	d0ad      	beq.n	80086b0 <_printf_i+0x160>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	079b      	lsls	r3, r3, #30
 8008758:	d413      	bmi.n	8008782 <_printf_i+0x232>
 800875a:	68e0      	ldr	r0, [r4, #12]
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	4298      	cmp	r0, r3
 8008760:	bfb8      	it	lt
 8008762:	4618      	movlt	r0, r3
 8008764:	e7a6      	b.n	80086b4 <_printf_i+0x164>
 8008766:	2301      	movs	r3, #1
 8008768:	4632      	mov	r2, r6
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d09d      	beq.n	80086b0 <_printf_i+0x160>
 8008774:	3501      	adds	r5, #1
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	9903      	ldr	r1, [sp, #12]
 800877a:	1a5b      	subs	r3, r3, r1
 800877c:	42ab      	cmp	r3, r5
 800877e:	dcf2      	bgt.n	8008766 <_printf_i+0x216>
 8008780:	e7eb      	b.n	800875a <_printf_i+0x20a>
 8008782:	2500      	movs	r5, #0
 8008784:	f104 0619 	add.w	r6, r4, #25
 8008788:	e7f5      	b.n	8008776 <_printf_i+0x226>
 800878a:	bf00      	nop
 800878c:	0800890d 	.word	0x0800890d
 8008790:	0800891e 	.word	0x0800891e

08008794 <memmove>:
 8008794:	4288      	cmp	r0, r1
 8008796:	b510      	push	{r4, lr}
 8008798:	eb01 0402 	add.w	r4, r1, r2
 800879c:	d902      	bls.n	80087a4 <memmove+0x10>
 800879e:	4284      	cmp	r4, r0
 80087a0:	4623      	mov	r3, r4
 80087a2:	d807      	bhi.n	80087b4 <memmove+0x20>
 80087a4:	1e43      	subs	r3, r0, #1
 80087a6:	42a1      	cmp	r1, r4
 80087a8:	d008      	beq.n	80087bc <memmove+0x28>
 80087aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087b2:	e7f8      	b.n	80087a6 <memmove+0x12>
 80087b4:	4402      	add	r2, r0
 80087b6:	4601      	mov	r1, r0
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d100      	bne.n	80087be <memmove+0x2a>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087c6:	e7f7      	b.n	80087b8 <memmove+0x24>

080087c8 <_sbrk_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_sbrk_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f9 fa18 	bl	8001c08 <_sbrk>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_sbrk_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_sbrk_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	2000052c 	.word	0x2000052c

080087e8 <memcpy>:
 80087e8:	440a      	add	r2, r1
 80087ea:	4291      	cmp	r1, r2
 80087ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80087f0:	d100      	bne.n	80087f4 <memcpy+0xc>
 80087f2:	4770      	bx	lr
 80087f4:	b510      	push	{r4, lr}
 80087f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087fe:	4291      	cmp	r1, r2
 8008800:	d1f9      	bne.n	80087f6 <memcpy+0xe>
 8008802:	bd10      	pop	{r4, pc}

08008804 <_realloc_r>:
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008808:	4680      	mov	r8, r0
 800880a:	4614      	mov	r4, r2
 800880c:	460e      	mov	r6, r1
 800880e:	b921      	cbnz	r1, 800881a <_realloc_r+0x16>
 8008810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	4611      	mov	r1, r2
 8008816:	f7ff bc49 	b.w	80080ac <_malloc_r>
 800881a:	b92a      	cbnz	r2, 8008828 <_realloc_r+0x24>
 800881c:	f7ff fbda 	bl	8007fd4 <_free_r>
 8008820:	4625      	mov	r5, r4
 8008822:	4628      	mov	r0, r5
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	f000 f81b 	bl	8008862 <_malloc_usable_size_r>
 800882c:	4284      	cmp	r4, r0
 800882e:	4607      	mov	r7, r0
 8008830:	d802      	bhi.n	8008838 <_realloc_r+0x34>
 8008832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008836:	d812      	bhi.n	800885e <_realloc_r+0x5a>
 8008838:	4621      	mov	r1, r4
 800883a:	4640      	mov	r0, r8
 800883c:	f7ff fc36 	bl	80080ac <_malloc_r>
 8008840:	4605      	mov	r5, r0
 8008842:	2800      	cmp	r0, #0
 8008844:	d0ed      	beq.n	8008822 <_realloc_r+0x1e>
 8008846:	42bc      	cmp	r4, r7
 8008848:	4622      	mov	r2, r4
 800884a:	4631      	mov	r1, r6
 800884c:	bf28      	it	cs
 800884e:	463a      	movcs	r2, r7
 8008850:	f7ff ffca 	bl	80087e8 <memcpy>
 8008854:	4631      	mov	r1, r6
 8008856:	4640      	mov	r0, r8
 8008858:	f7ff fbbc 	bl	8007fd4 <_free_r>
 800885c:	e7e1      	b.n	8008822 <_realloc_r+0x1e>
 800885e:	4635      	mov	r5, r6
 8008860:	e7df      	b.n	8008822 <_realloc_r+0x1e>

08008862 <_malloc_usable_size_r>:
 8008862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008866:	1f18      	subs	r0, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfbc      	itt	lt
 800886c:	580b      	ldrlt	r3, [r1, r0]
 800886e:	18c0      	addlt	r0, r0, r3
 8008870:	4770      	bx	lr
	...

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
