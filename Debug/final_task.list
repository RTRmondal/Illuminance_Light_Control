
final_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b10  08008b10  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000080  08008b98  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008b98  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016da3  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003203  00000000  00000000  00036e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  0003a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  0003b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279ca  00000000  00000000  0003c0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001921b  00000000  00000000  00063ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1e00  00000000  00000000  0007ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051a8  00000000  00000000  0016eadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00173c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800894c 	.word	0x0800894c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800894c 	.word	0x0800894c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f107 020f 	add.w	r2, r7, #15
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f001 fef1 	bl	8002bf0 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	791b      	ldrb	r3, [r3, #4]
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f107 020f 	add.w	r2, r7, #15
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	f001 fee2 	bl	8002bf0 <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	b299      	uxth	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2302      	movs	r3, #2
 8000e52:	f001 ffc1 	bl	8002dd8 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000e56:	7b3b      	ldrb	r3, [r7, #12]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	7b7a      	ldrb	r2, [r7, #13]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb78 	bl	8000554 <__aeabi_i2d>
 8000e64:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <BH1750_ReadLux+0x58>)
 8000e6a:	f7ff fd07 	bl	800087c <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fde9 	bl	8000a4c <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	ee07 3a90 	vmov	s15, r3
}
 8000e80:	eeb0 0a67 	vmov.f32	s0, s15
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	3ff33333 	.word	0x3ff33333

08000e90 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b81      	ldr	r3, [pc, #516]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a80      	ldr	r2, [pc, #512]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b75      	ldr	r3, [pc, #468]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a74      	ldr	r2, [pc, #464]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a68      	ldr	r2, [pc, #416]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b66      	ldr	r3, [pc, #408]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a62      	ldr	r2, [pc, #392]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b60      	ldr	r3, [pc, #384]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <MX_GPIO_Init+0x21c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f54:	4856      	ldr	r0, [pc, #344]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000f56:	f001 fd63 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	4855      	ldr	r0, [pc, #340]	; (80010b4 <MX_GPIO_Init+0x224>)
 8000f60:	f001 fd5e 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	484f      	ldr	r0, [pc, #316]	; (80010b8 <MX_GPIO_Init+0x228>)
 8000f7c:	f001 fba4 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4847      	ldr	r0, [pc, #284]	; (80010b8 <MX_GPIO_Init+0x228>)
 8000f9c:	f001 fb94 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fa0:	2386      	movs	r3, #134	; 0x86
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4840      	ldr	r0, [pc, #256]	; (80010bc <MX_GPIO_Init+0x22c>)
 8000fbc:	f001 fb84 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4835      	ldr	r0, [pc, #212]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000fda:	f001 fb75 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x220>)
 8000ffc:	f001 fb64 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x224>)
 8001018:	f001 fb56 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <MX_GPIO_Init+0x224>)
 8001030:	f001 fb4a 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001034:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001046:	230a      	movs	r3, #10
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <MX_GPIO_Init+0x22c>)
 8001052:	f001 fb39 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <MX_GPIO_Init+0x22c>)
 800106c:	f001 fb2c 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001070:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001082:	230b      	movs	r3, #11
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_GPIO_Init+0x224>)
 800108e:	f001 fb1b 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f001 fa3f 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f001 fa58 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_I2C1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_I2C1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_I2C1_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <MX_I2C1_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <MX_I2C1_Init+0x74>)
 80010fc:	f001 fce8 	bl	8002ad0 <HAL_I2C_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fcb9 	bl	8001a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <MX_I2C1_Init+0x74>)
 800110e:	f002 ff21 	bl	8003f54 <HAL_I2CEx_ConfigAnalogFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fcb0 	bl	8001a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_I2C1_Init+0x74>)
 8001120:	f002 ff63 	bl	8003fea <HAL_I2CEx_ConfigDigitalFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fca7 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000009c 	.word	0x2000009c
 8001138:	40005400 	.word	0x40005400
 800113c:	20404768 	.word	0x20404768

08001140 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_I2C2_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_I2C2_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <MX_I2C2_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_I2C2_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_I2C2_Init+0x74>)
 800117c:	f001 fca8 	bl	8002ad0 <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 fc79 	bl	8001a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_I2C2_Init+0x74>)
 800118e:	f002 fee1 	bl	8003f54 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 fc70 	bl	8001a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_I2C2_Init+0x74>)
 80011a0:	f002 ff23 	bl	8003fea <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 fc67 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000f0 	.word	0x200000f0
 80011b8:	40005800 	.word	0x40005800
 80011bc:	20404768 	.word	0x20404768

080011c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ac      	sub	sp, #176	; 0xb0
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	2284      	movs	r2, #132	; 0x84
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 ff2f 	bl	8008044 <memset>
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_I2C_MspInit+0x158>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d14d      	bne.n	800128c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fc6a 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800120a:	f000 fc37 	bl	8001a7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_I2C_MspInit+0x15c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001240:	2304      	movs	r3, #4
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800124a:	4619      	mov	r1, r3
 800124c:	4834      	ldr	r0, [pc, #208]	; (8001320 <HAL_I2C_MspInit+0x160>)
 800124e:	f001 fa3b 	bl	80026c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201f      	movs	r0, #31
 8001270:	f001 f953 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001274:	201f      	movs	r0, #31
 8001276:	f001 f96c 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2020      	movs	r0, #32
 8001280:	f001 f94b 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001284:	2020      	movs	r0, #32
 8001286:	f001 f964 	bl	8002552 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800128a:	e041      	b.n	8001310 <HAL_I2C_MspInit+0x150>
  else if(i2cHandle->Instance==I2C2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_I2C_MspInit+0x164>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d13c      	bne.n	8001310 <HAL_I2C_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fc16 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0xf6>
      Error_Handler();
 80012b2:	f000 fbe3 	bl	8001a7c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e6:	2304      	movs	r3, #4
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0x168>)
 80012f4:	f001 f9e8 	bl	80026c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_I2C_MspInit+0x15c>)
 80012fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_I2C_MspInit+0x15c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
}
 8001310:	bf00      	nop
 8001312:	37b0      	adds	r7, #176	; 0xb0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40005400 	.word	0x40005400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400
 8001324:	40005800 	.word	0x40005800
 8001328:	40021400 	.word	0x40021400

0800132c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001342:	2308      	movs	r3, #8
 8001344:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001346:	2028      	movs	r0, #40	; 0x28
 8001348:	f000 ffe8 	bl	800231c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	2130      	movs	r1, #48	; 0x30
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f829 	bl	80013ac <lcd_write>
	HAL_Delay(5);
 800135a:	2005      	movs	r0, #5
 800135c:	f000 ffde 	bl	800231c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	2130      	movs	r1, #48	; 0x30
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f81f 	bl	80013ac <lcd_write>
	HAL_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 ffd4 	bl	800231c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	2130      	movs	r1, #48	; 0x30
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f815 	bl	80013ac <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f80e 	bl	80013ac <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	210c      	movs	r1, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f807 	bl	80013ac <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f89f 	bl	80014e2 <lcd_clear>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	460b      	mov	r3, r1
 80013b8:	71bb      	strb	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80013d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013d8:	f023 030f 	bic.w	r3, r3, #15
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	b299      	uxth	r1, r3
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2304      	movs	r3, #4
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <lcd_write+0x88>)
 8001420:	f001 fbe6 	bl	8002bf0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 ff79 	bl	800231c <HAL_Delay>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000f0 	.word	0x200000f0

08001438 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	2300      	movs	r3, #0
 8001446:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001452:	2308      	movs	r3, #8
 8001454:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f843 	bl	80014e2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffa1 	bl	80013ac <lcd_write>
	while(lcd->f_line[i])
 800146a:	e00f      	b.n	800148c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7818      	ldrb	r0, [r3, #0]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	7859      	ldrb	r1, [r3, #1]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	f7ff ff93 	bl	80013ac <lcd_write>
		i++;
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	3301      	adds	r3, #1
 800148a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	21c0      	movs	r1, #192	; 0xc0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff81 	bl	80013ac <lcd_write>
	while(lcd->s_line[i])
 80014aa:	e00f      	b.n	80014cc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7818      	ldrb	r0, [r3, #0]
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	7c99      	ldrb	r1, [r3, #18]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	f7ff ff73 	bl	80013ac <lcd_write>
		i++;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	7c9b      	ldrb	r3, [r3, #18]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e9      	bne.n	80014ac <lcd_display+0x74>
	}
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80014f8:	2308      	movs	r3, #8
 80014fa:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	2101      	movs	r1, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff51 	bl	80013ac <lcd_write>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int v1,v2,v3;
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &input, 4);
 800151c:	2204      	movs	r2, #4
 800151e:	494c      	ldr	r1, [pc, #304]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 8001520:	484c      	ldr	r0, [pc, #304]	; (8001654 <HAL_UART_RxCpltCallback+0x140>)
 8001522:	f005 faa0 	bl	8006a66 <HAL_UART_Receive_IT>
	char idx =input[0];
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	75fb      	strb	r3, [r7, #23]

	if(idx=='S'){
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b53      	cmp	r3, #83	; 0x53
 8001530:	d10d      	bne.n	800154e <HAL_UART_RxCpltCallback+0x3a>
		set_point = atoi(&input[1]);
 8001532:	4849      	ldr	r0, [pc, #292]	; (8001658 <HAL_UART_RxCpltCallback+0x144>)
 8001534:	f006 fca2 	bl	8007e7c <atoi>
 8001538:	ee07 0a90 	vmov	s15, r0
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_UART_RxCpltCallback+0x148>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	4845      	ldr	r0, [pc, #276]	; (8001660 <HAL_UART_RxCpltCallback+0x14c>)
 800154a:	f001 fa82 	bl	8002a52 <HAL_GPIO_TogglePin>
	}
	 if(idx == 'g'){
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b67      	cmp	r3, #103	; 0x67
 8001552:	d178      	bne.n	8001646 <HAL_UART_RxCpltCallback+0x132>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001554:	2101      	movs	r1, #1
 8001556:	4842      	ldr	r0, [pc, #264]	; (8001660 <HAL_UART_RxCpltCallback+0x14c>)
 8001558:	f001 fa7b 	bl	8002a52 <HAL_GPIO_TogglePin>
		int disp_out;
		int disp_set;
		int disp_error;

		disp_out = (int)lightLUXint;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_UART_RxCpltCallback+0x150>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001566:	ee17 3a90 	vmov	r3, s15
 800156a:	613b      	str	r3, [r7, #16]
		disp_set = (int)set_point;
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_UART_RxCpltCallback+0x148>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	60fb      	str	r3, [r7, #12]
		disp_error=(int)error_p;
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_UART_RxCpltCallback+0x154>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	60bb      	str	r3, [r7, #8]

		length1 = snprintf(text1, 20, "SET:%d lux \r\n", disp_set);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_UART_RxCpltCallback+0x158>)
 8001590:	2114      	movs	r1, #20
 8001592:	4837      	ldr	r0, [pc, #220]	; (8001670 <HAL_UART_RxCpltCallback+0x15c>)
 8001594:	f006 fd02 	bl	8007f9c <sniprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	4a36      	ldr	r2, [pc, #216]	; (8001674 <HAL_UART_RxCpltCallback+0x160>)
 800159c:	6013      	str	r3, [r2, #0]
		length2 = snprintf(text2, 20, "OUT:%d lux \r\n", disp_out);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4a35      	ldr	r2, [pc, #212]	; (8001678 <HAL_UART_RxCpltCallback+0x164>)
 80015a2:	2114      	movs	r1, #20
 80015a4:	4835      	ldr	r0, [pc, #212]	; (800167c <HAL_UART_RxCpltCallback+0x168>)
 80015a6:	f006 fcf9 	bl	8007f9c <sniprintf>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_UART_RxCpltCallback+0x16c>)
 80015ae:	6013      	str	r3, [r2, #0]
		length3 = snprintf(text3, 20, "ERR:%d lux \r\n", disp_error);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4a34      	ldr	r2, [pc, #208]	; (8001684 <HAL_UART_RxCpltCallback+0x170>)
 80015b4:	2114      	movs	r1, #20
 80015b6:	4834      	ldr	r0, [pc, #208]	; (8001688 <HAL_UART_RxCpltCallback+0x174>)
 80015b8:	f006 fcf0 	bl	8007f9c <sniprintf>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 80015c0:	6013      	str	r3, [r2, #0]
		length_duty = snprintf(text4, 20, "DUTY:%d %%\r\n", (int)pwm_duty);
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_UART_RxCpltCallback+0x17c>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 3a90 	vmov	r3, s15
 80015d0:	4a30      	ldr	r2, [pc, #192]	; (8001694 <HAL_UART_RxCpltCallback+0x180>)
 80015d2:	2114      	movs	r1, #20
 80015d4:	4830      	ldr	r0, [pc, #192]	; (8001698 <HAL_UART_RxCpltCallback+0x184>)
 80015d6:	f006 fce1 	bl	8007f9c <sniprintf>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a2f      	ldr	r2, [pc, #188]	; (800169c <HAL_UART_RxCpltCallback+0x188>)
 80015de:	6013      	str	r3, [r2, #0]
		 
		if(input[3]=='U'){
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 80015e2:	78db      	ldrb	r3, [r3, #3]
 80015e4:	2b55      	cmp	r3, #85	; 0x55
 80015e6:	d108      	bne.n	80015fa <HAL_UART_RxCpltCallback+0xe6>
			HAL_UART_Transmit(&huart3, (uint8_t*)text1, length1, 100);
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_UART_RxCpltCallback+0x160>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	491f      	ldr	r1, [pc, #124]	; (8001670 <HAL_UART_RxCpltCallback+0x15c>)
 80015f2:	4818      	ldr	r0, [pc, #96]	; (8001654 <HAL_UART_RxCpltCallback+0x140>)
 80015f4:	f005 f9b4 	bl	8006960 <HAL_UART_Transmit>
		else if(input[3]=='D'){
			HAL_UART_Transmit(&huart3, (uint8_t*)text4, length_duty, 100);
		}
	}

}
 80015f8:	e025      	b.n	8001646 <HAL_UART_RxCpltCallback+0x132>
		else if(input[3]=='Y'){
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 80015fc:	78db      	ldrb	r3, [r3, #3]
 80015fe:	2b59      	cmp	r3, #89	; 0x59
 8001600:	d108      	bne.n	8001614 <HAL_UART_RxCpltCallback+0x100>
			HAL_UART_Transmit(&huart3, (uint8_t*)text2, length2, 100);
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_UART_RxCpltCallback+0x16c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29a      	uxth	r2, r3
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	491c      	ldr	r1, [pc, #112]	; (800167c <HAL_UART_RxCpltCallback+0x168>)
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <HAL_UART_RxCpltCallback+0x140>)
 800160e:	f005 f9a7 	bl	8006960 <HAL_UART_Transmit>
}
 8001612:	e018      	b.n	8001646 <HAL_UART_RxCpltCallback+0x132>
		else if(input[3]=='E'){
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b45      	cmp	r3, #69	; 0x45
 800161a:	d108      	bne.n	800162e <HAL_UART_RxCpltCallback+0x11a>
			HAL_UART_Transmit(&huart3, (uint8_t*)text3, length3, 100);
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_RxCpltCallback+0x178>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	4918      	ldr	r1, [pc, #96]	; (8001688 <HAL_UART_RxCpltCallback+0x174>)
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_UART_RxCpltCallback+0x140>)
 8001628:	f005 f99a 	bl	8006960 <HAL_UART_Transmit>
}
 800162c:	e00b      	b.n	8001646 <HAL_UART_RxCpltCallback+0x132>
		else if(input[3]=='D'){
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_UART_RxCpltCallback+0x13c>)
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	2b44      	cmp	r3, #68	; 0x44
 8001634:	d107      	bne.n	8001646 <HAL_UART_RxCpltCallback+0x132>
			HAL_UART_Transmit(&huart3, (uint8_t*)text4, length_duty, 100);
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_UART_RxCpltCallback+0x188>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29a      	uxth	r2, r3
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_UART_RxCpltCallback+0x184>)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x140>)
 8001642:	f005 f98d 	bl	8006960 <HAL_UART_Transmit>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000010 	.word	0x20000010
 8001654:	2000035c 	.word	0x2000035c
 8001658:	20000011 	.word	0x20000011
 800165c:	2000000c 	.word	0x2000000c
 8001660:	40020400 	.word	0x40020400
 8001664:	200001d0 	.word	0x200001d0
 8001668:	2000015c 	.word	0x2000015c
 800166c:	08008964 	.word	0x08008964
 8001670:	2000016c 	.word	0x2000016c
 8001674:	200001bc 	.word	0x200001bc
 8001678:	08008974 	.word	0x08008974
 800167c:	20000180 	.word	0x20000180
 8001680:	200001c0 	.word	0x200001c0
 8001684:	08008984 	.word	0x08008984
 8001688:	20000194 	.word	0x20000194
 800168c:	200001c4 	.word	0x200001c4
 8001690:	200001d4 	.word	0x200001d4
 8001694:	08008994 	.word	0x08008994
 8001698:	200001a8 	.word	0x200001a8
 800169c:	200001c8 	.word	0x200001c8

080016a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a42      	ldr	r2, [pc, #264]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d17d      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x10e>

		//read the input
		lightLUXint = BH1750_ReadLux(&hbh1750_1);
 80016b2:	4842      	ldr	r0, [pc, #264]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80016b4:	f7ff fbbe 	bl	8000e34 <BH1750_ReadLux>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
		//calculate the error
		error=set_point-lightLUXint;
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]
		//calculate error percentage
		error_p=error/1000*100;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80017cc <HAL_TIM_PeriodElapsedCallback+0x12c>
 80016e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80017d0 <HAL_TIM_PeriodElapsedCallback+0x130>
 80016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
		// PI Controll

		//Integral, prev_Integral;
		I = prev_Integral + error + prev_error;
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
		pwm_i=I*ki;
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001726:	edc3 7a00 	vstr	s15, [r3]

		prev_Integral=I;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001730:	6013      	str	r3, [r2, #0]
		prev_error = error;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001738:	6013      	str	r3, [r2, #0]

		//Proportional
		pwm_p=kp*error;
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800174c:	edc3 7a00 	vstr	s15, [r3]

		//calculating the PWM
		pwm_duty=pwm_i+pwm_p;
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001762:	edc3 7a00 	vstr	s15, [r3]

		if(pwm_duty>999)
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80017f8 <HAL_TIM_PeriodElapsedCallback+0x158>
 8001770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	dd03      	ble.n	8001782 <HAL_TIM_PeriodElapsedCallback+0xe2>
			pwm_duty=999;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800177c:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e00b      	b.n	800179a <HAL_TIM_PeriodElapsedCallback+0xfa>
		else if(pwm_duty<0)
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	d503      	bpl.n	800179a <HAL_TIM_PeriodElapsedCallback+0xfa>
			pwm_duty=0;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]


		// setting the PWM using timer 2 channel 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty);
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 2a90 	vmov	r2, s15
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40000400 	.word	0x40000400
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200001d0 	.word	0x200001d0
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000144 	.word	0x20000144
 80017cc:	447a0000 	.word	0x447a0000
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	2000015c 	.word	0x2000015c
 80017d8:	20000150 	.word	0x20000150
 80017dc:	20000148 	.word	0x20000148
 80017e0:	2000014c 	.word	0x2000014c
 80017e4:	20000020 	.word	0x20000020
 80017e8:	20000154 	.word	0x20000154
 80017ec:	2000001c 	.word	0x2000001c
 80017f0:	20000158 	.word	0x20000158
 80017f4:	200001d4 	.word	0x200001d4
 80017f8:	4479c000 	.word	0x4479c000
 80017fc:	4479c000 	.word	0x4479c000
 8001800:	2000022c 	.word	0x2000022c

08001804 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	//setting the counter for the encoder
	encoder_coutner=__HAL_TIM_GET_COUNTER(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001814:	6013      	str	r3, [r2, #0]
	//counts
	count = (int16_t)count;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001818:	f9b3 2000 	ldrsh.w	r2, [r3]
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_TIM_IC_CaptureCallback+0x54>)
 800181e:	801a      	strh	r2, [r3, #0]
	//position if we need it
	position = count/4;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da00      	bge.n	800182c <HAL_TIM_IC_CaptureCallback+0x28>
 800182a:	3303      	adds	r3, #3
 800182c:	109b      	asrs	r3, r3, #2
 800182e:	b21a      	sxth	r2, r3
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001832:	801a      	strh	r2, [r3, #0]
	//sconfiguring the setpoint with the rotary encoder
	set_point=encoder_coutner;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000018 	.word	0x20000018
 8001858:	20000222 	.word	0x20000222
 800185c:	20000224 	.word	0x20000224
 8001860:	2000000c 	.word	0x2000000c

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f000 fcfa 	bl	8002262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f897 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f7ff fb0d 	bl	8000e90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001876:	f7ff fc23 	bl	80010c0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800187a:	f000 fc31 	bl	80020e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800187e:	f000 f9e7 	bl	8001c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001882:	f000 fa5d 	bl	8001d40 <MX_TIM3_Init>
  MX_I2C2_Init();
 8001886:	f7ff fc5b 	bl	8001140 <MX_I2C2_Init>
  MX_TIM4_Init();
 800188a:	f000 faa7 	bl	8001ddc <MX_TIM4_Init>
  MX_TIM5_Init();
 800188e:	f000 fafb 	bl	8001e88 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	BH1750_Init(&hbh1750_1);
 8001892:	482f      	ldr	r0, [pc, #188]	; (8001950 <main+0xec>)
 8001894:	f7ff faa8 	bl	8000de8 <BH1750_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//Timer to Generate PWM
 8001898:	2100      	movs	r1, #0
 800189a:	482e      	ldr	r0, [pc, #184]	; (8001954 <main+0xf0>)
 800189c:	f003 fe3e 	bl	800551c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &input, 4); // Usart to configure the serial port Interface
 80018a0:	2204      	movs	r2, #4
 80018a2:	492d      	ldr	r1, [pc, #180]	; (8001958 <main+0xf4>)
 80018a4:	482d      	ldr	r0, [pc, #180]	; (800195c <main+0xf8>)
 80018a6:	f005 f8de 	bl	8006a66 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);//Timer with a frequency of 1MHz
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <main+0xfc>)
 80018ac:	f003 fd5c 	bl	8005368 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);//Timer configured in Encoder mode
 80018b0:	482c      	ldr	r0, [pc, #176]	; (8001964 <main+0x100>)
 80018b2:	f003 fd59 	bl	8005368 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);//
 80018b6:	482c      	ldr	r0, [pc, #176]	; (8001968 <main+0x104>)
 80018b8:	f003 fd56 	bl	8005368 <HAL_TIM_Base_Start_IT>


	//start the timer in encoder mode
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80018bc:	213c      	movs	r1, #60	; 0x3c
 80018be:	4829      	ldr	r0, [pc, #164]	; (8001964 <main+0x100>)
 80018c0:	f003 ffcc 	bl	800585c <HAL_TIM_Encoder_Start_IT>


	// LCD configuration
	disp.addr = (0x3F << 1); // defining the display adress
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <main+0x108>)
 80018c6:	227e      	movs	r2, #126	; 0x7e
 80018c8:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <main+0x108>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	lcd_init(&disp);// Init LCD
 80018d2:	4826      	ldr	r0, [pc, #152]	; (800196c <main+0x108>)
 80018d4:	f7ff fd2a 	bl	800132c <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		disp_out = (int)lightLUXint;
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <main+0x10c>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	60fb      	str	r3, [r7, #12]
		disp_set = (int)set_point;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <main+0x110>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	60bb      	str	r3, [r7, #8]
		disp_error=(int)error_p;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <main+0x114>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 3a90 	vmov	r3, s15
 8001906:	607b      	str	r3, [r7, #4]

		//printing the 1st line of display
		sprintf(LCDdisplay1, "OUT:%d lux", disp_out);
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	491c      	ldr	r1, [pc, #112]	; (800197c <main+0x118>)
 800190c:	481c      	ldr	r0, [pc, #112]	; (8001980 <main+0x11c>)
 800190e:	f006 fb79 	bl	8008004 <siprintf>
		//printing the 2nd line of display
		sprintf(LCDdisplay2, "SET:%d lux",disp_set);
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	491b      	ldr	r1, [pc, #108]	; (8001984 <main+0x120>)
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <main+0x124>)
 8001918:	f006 fb74 	bl	8008004 <siprintf>

		sprintf((char *)disp.f_line, LCDdisplay1);
 800191c:	4918      	ldr	r1, [pc, #96]	; (8001980 <main+0x11c>)
 800191e:	481b      	ldr	r0, [pc, #108]	; (800198c <main+0x128>)
 8001920:	f006 fb70 	bl	8008004 <siprintf>
		sprintf((char *)disp.s_line, LCDdisplay2);
 8001924:	4918      	ldr	r1, [pc, #96]	; (8001988 <main+0x124>)
 8001926:	481a      	ldr	r0, [pc, #104]	; (8001990 <main+0x12c>)
 8001928:	f006 fb6c 	bl	8008004 <siprintf>

		lcd_display(&disp);
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <main+0x108>)
 800192e:	f7ff fd83 	bl	8001438 <lcd_display>

		length = snprintf(text, 20, "OUT:%d lux \r\n", disp_out);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <main+0x130>)
 8001936:	2114      	movs	r1, #20
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <main+0x134>)
 800193a:	f006 fb2f 	bl	8007f9c <sniprintf>
 800193e:	4603      	mov	r3, r0
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <main+0x138>)
 8001944:	701a      	strb	r2, [r3, #0]

		HAL_Delay(500);// delay to refresh the LCD
 8001946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800194a:	f000 fce7 	bl	800231c <HAL_Delay>
		disp_out = (int)lightLUXint;
 800194e:	e7c3      	b.n	80018d8 <main+0x74>
 8001950:	20000000 	.word	0x20000000
 8001954:	2000022c 	.word	0x2000022c
 8001958:	20000010 	.word	0x20000010
 800195c:	2000035c 	.word	0x2000035c
 8001960:	20000278 	.word	0x20000278
 8001964:	200002c4 	.word	0x200002c4
 8001968:	20000310 	.word	0x20000310
 800196c:	200001d8 	.word	0x200001d8
 8001970:	200001d0 	.word	0x200001d0
 8001974:	2000000c 	.word	0x2000000c
 8001978:	2000015c 	.word	0x2000015c
 800197c:	080089a4 	.word	0x080089a4
 8001980:	200001fc 	.word	0x200001fc
 8001984:	080089b0 	.word	0x080089b0
 8001988:	20000210 	.word	0x20000210
 800198c:	200001d9 	.word	0x200001d9
 8001990:	200001ea 	.word	0x200001ea
 8001994:	08008974 	.word	0x08008974
 8001998:	20000160 	.word	0x20000160
 800199c:	200001cc 	.word	0x200001cc

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f006 fb48 	bl	8008044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019c4:	f002 fb5e 	bl	8004084 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SystemClock_Config+0xd4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <SystemClock_Config+0xd8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <SystemClock_Config+0xd8>)
 80019e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <SystemClock_Config+0xd8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a10:	23d8      	movs	r3, #216	; 0xd8
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fb8f 	bl	8004144 <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a2c:	f000 f826 	bl	8001a7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a30:	f002 fb38 	bl	80040a4 <HAL_PWREx_EnableOverDrive>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a3a:	f000 f81f 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2302      	movs	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2107      	movs	r1, #7
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fe15 	bl	800468c <HAL_RCC_ClockConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a68:	f000 f808 	bl	8001a7c <Error_Handler>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3750      	adds	r7, #80	; 0x50
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x44>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x44>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x44>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x44>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x44>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f000 fbde 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM2_IRQHandler+0x10>)
 8001b2a:	f003 ff45 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000022c 	.word	0x2000022c

08001b38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM3_IRQHandler+0x10>)
 8001b3e:	f003 ff3b 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000278 	.word	0x20000278

08001b4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM4_IRQHandler+0x10>)
 8001b52:	f003 ff31 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002c4 	.word	0x200002c4

08001b60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <I2C1_EV_IRQHandler+0x10>)
 8001b66:	f001 fa2d 	bl	8002fc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000009c 	.word	0x2000009c

08001b74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <I2C1_ER_IRQHandler+0x10>)
 8001b7a:	f001 fa3d 	bl	8002ff8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000009c 	.word	0x2000009c

08001b88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <USART3_IRQHandler+0x10>)
 8001b8e:	f004 ffaf 	bl	8006af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000035c 	.word	0x2000035c

08001b9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ba0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba4:	f000 ff70 	bl	8002a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM5_IRQHandler+0x10>)
 8001bb2:	f003 ff01 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000310 	.word	0x20000310

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f006 fa30 	bl	8008054 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20050000 	.word	0x20050000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	20000228 	.word	0x20000228
 8001c28:	20000530 	.word	0x20000530

08001c2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001c8c:	226b      	movs	r2, #107	; 0x6b
 8001c8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001c98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001caa:	4824      	ldr	r0, [pc, #144]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001cac:	f003 fb04 	bl	80052b8 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cb6:	f7ff fee1 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	481d      	ldr	r0, [pc, #116]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001cc8:	f004 f8aa 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cd2:	f7ff fed3 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd6:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001cd8:	f003 fbbe 	bl	8005458 <HAL_TIM_PWM_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ce2:	f7ff fecb 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001cf6:	f004 fd39 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d00:	f7ff febc 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d04:	2360      	movs	r3, #96	; 0x60
 8001d06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001d1e:	f003 ff6b 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d28:	f7ff fea8 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM2_Init+0xec>)
 8001d2e:	f000 f9a1 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3738      	adds	r7, #56	; 0x38
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000022c 	.word	0x2000022c

08001d40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <MX_TIM3_Init+0x98>)
 8001d62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d66:	226b      	movs	r2, #107	; 0x6b
 8001d68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d84:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d86:	f003 fa97 	bl	80052b8 <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d90:	f7ff fe74 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001da2:	f004 f83d 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001dac:	f7ff fe66 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001dbe:	f004 fcd5 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001dc8:	f7ff fe58 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000278 	.word	0x20000278
 8001dd8:	40000400 	.word	0x40000400

08001ddc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f006 f92a 	bl	8008044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <MX_TIM4_Init+0xa8>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e20:	2303      	movs	r3, #3
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e30:	230f      	movs	r3, #15
 8001e32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001e40:	230f      	movs	r3, #15
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480d      	ldr	r0, [pc, #52]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e4c:	f003 fc60 	bl	8005710 <HAL_TIM_Encoder_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e56:	f7ff fe11 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e62:	463b      	mov	r3, r7
 8001e64:	4619      	mov	r1, r3
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <MX_TIM4_Init+0xa4>)
 8001e68:	f004 fc80 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e72:	f7ff fe03 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	3730      	adds	r7, #48	; 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002c4 	.word	0x200002c4
 8001e84:	40000800 	.word	0x40000800

08001e88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <MX_TIM5_Init+0x98>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eae:	226b      	movs	r2, #107	; 0x6b
 8001eb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ebe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ece:	f003 f9f3 	bl	80052b8 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ed8:	f7ff fdd0 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eea:	f003 ff99 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ef4:	f7ff fdc2 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001f06:	f004 fc31 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f7ff fdb4 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000310 	.word	0x20000310
 8001f20:	40000c00 	.word	0x40000c00

08001f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d114      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	201c      	movs	r0, #28
 8001f54:	f000 fae1 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f000 fafa 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f5e:	e032      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_TIM_Base_MspInit+0xb0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d114      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	201d      	movs	r0, #29
 8001f88:	f000 fac7 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f8c:	201d      	movs	r0, #29
 8001f8e:	f000 fae0 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001f92:	e018      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d113      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_Base_MspInit+0xac>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2032      	movs	r0, #50	; 0x32
 8001fbc:	f000 faad 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fc0:	2032      	movs	r0, #50	; 0x32
 8001fc2:	f000 fac6 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000c00 	.word	0x40000c00

08001fdc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d130      	bne.n	8002060 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a1a      	ldr	r2, [pc, #104]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_TIM_Encoder_MspInit+0x90>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800202e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002040:	2302      	movs	r3, #2
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4809      	ldr	r0, [pc, #36]	; (8002070 <HAL_TIM_Encoder_MspInit+0x94>)
 800204c:	f000 fb3c 	bl	80026c8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	201e      	movs	r0, #30
 8002056:	f000 fa60 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800205a:	201e      	movs	r0, #30
 800205c:	f000 fa79 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40000800 	.word	0x40000800
 800206c:	40023800 	.word	0x40023800
 8002070:	40020c00 	.word	0x40020c00

08002074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d11b      	bne.n	80020ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_TIM_MspPostInit+0x64>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_TIM_MspPostInit+0x64>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_TIM_MspPostInit+0x64>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ae:	2320      	movs	r3, #32
 80020b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <HAL_TIM_MspPostInit+0x68>)
 80020ca:	f000 fafd 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000

080020e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <MX_USART3_UART_Init+0x5c>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_USART3_UART_Init+0x58>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_USART3_UART_Init+0x58>)
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002124:	f004 fbce 	bl	80068c4 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800212e:	f7ff fca5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000035c 	.word	0x2000035c
 800213c:	40004800 	.word	0x40004800

08002140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0aa      	sub	sp, #168	; 0xa8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2284      	movs	r2, #132	; 0x84
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f005 ff6f 	bl	8008044 <memset>
  if(uartHandle->Instance==USART3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a26      	ldr	r2, [pc, #152]	; (8002204 <HAL_UART_MspInit+0xc4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d144      	bne.n	80021fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002176:	2300      	movs	r3, #0
 8002178:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fcaa 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff fc77 	bl	8001a7c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_UART_MspInit+0xc8>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_UART_MspInit+0xc8>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_MspInit+0xc8>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d8:	2307      	movs	r3, #7
 80021da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021e2:	4619      	mov	r1, r3
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <HAL_UART_MspInit+0xcc>)
 80021e6:	f000 fa6f 	bl	80026c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2027      	movs	r0, #39	; 0x27
 80021f0:	f000 f993 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f4:	2027      	movs	r0, #39	; 0x27
 80021f6:	f000 f9ac 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	37a8      	adds	r7, #168	; 0xa8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40004800 	.word	0x40004800
 8002208:	40023800 	.word	0x40023800
 800220c:	40020c00 	.word	0x40020c00

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <LoopFillZerobss+0x26>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800223a:	f7ff fcf7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f005 ff0f 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7ff fb0f 	bl	8001864 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002254:	08008b18 	.word	0x08008b18
  ldr r2, =_sbss
 8002258:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800225c:	20000530 	.word	0x20000530

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>

08002262 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002266:	2003      	movs	r0, #3
 8002268:	f000 f94c 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f805 	bl	800227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002272:	f7ff fc09 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f967 	bl	800256e <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f92f 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000024 	.word	0x20000024
 80022d4:	2000002c 	.word	0x2000002c
 80022d8:	20000028 	.word	0x20000028

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	2000002c 	.word	0x2000002c
 8002300:	200003e4 	.word	0x200003e4

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200003e4 	.word	0x200003e4

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000002c 	.word	0x2000002c

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff feb6 	bl	8002304 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e052      	b.n	800265e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0216 	bic.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_DMA_Abort+0x62>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0208 	bic.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e013      	b.n	8002632 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff fe7b 	bl	8002304 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d90c      	bls.n	8002632 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e015      	b.n	800265e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e4      	bne.n	800260a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	223f      	movs	r2, #63	; 0x3f
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d004      	beq.n	8002684 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e00c      	b.n	800269e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2205      	movs	r2, #5
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e175      	b.n	80029d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8164 	bne.w	80029ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x56>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80be 	beq.w	80029ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800286a:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <HAL_GPIO_Init+0x328>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_GPIO_Init+0x32c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d037      	beq.n	8002906 <HAL_GPIO_Init+0x23e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_GPIO_Init+0x330>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <HAL_GPIO_Init+0x23a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a56      	ldr	r2, [pc, #344]	; (80029fc <HAL_GPIO_Init+0x334>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02b      	beq.n	80028fe <HAL_GPIO_Init+0x236>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a55      	ldr	r2, [pc, #340]	; (8002a00 <HAL_GPIO_Init+0x338>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d025      	beq.n	80028fa <HAL_GPIO_Init+0x232>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a54      	ldr	r2, [pc, #336]	; (8002a04 <HAL_GPIO_Init+0x33c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <HAL_GPIO_Init+0x22e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <HAL_GPIO_Init+0x340>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x22a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_GPIO_Init+0x344>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x226>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a51      	ldr	r2, [pc, #324]	; (8002a10 <HAL_GPIO_Init+0x348>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x222>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a50      	ldr	r2, [pc, #320]	; (8002a14 <HAL_GPIO_Init+0x34c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x21e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4f      	ldr	r2, [pc, #316]	; (8002a18 <HAL_GPIO_Init+0x350>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x21a>
 80028de:	2309      	movs	r3, #9
 80028e0:	e012      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028e2:	230a      	movs	r3, #10
 80028e4:	e010      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028e6:	2308      	movs	r3, #8
 80028e8:	e00e      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x240>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x240>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x328>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_GPIO_Init+0x354>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <HAL_GPIO_Init+0x354>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_GPIO_Init+0x354>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_GPIO_Init+0x354>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_GPIO_Init+0x354>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_GPIO_Init+0x354>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_GPIO_Init+0x354>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_GPIO_Init+0x354>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae86 	bls.w	80026e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40022400 	.word	0x40022400
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a3c:	e003      	b.n	8002a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	041a      	lsls	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	041a      	lsls	r2, r3, #16
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	400b      	ands	r3, r1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	619a      	str	r2, [r3, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f806 	bl	8002ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fb62 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	e006      	b.n	8002b58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d104      	bne.n	8002b6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_I2C_Init+0x11c>)
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69d9      	ldr	r1, [r3, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	02008000 	.word	0x02008000

08002bf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
 8002c00:	4613      	mov	r3, r2
 8002c02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f040 80da 	bne.w	8002dc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2C_Master_Transmit+0x30>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e0d3      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c28:	f7ff fb6c 	bl	8002304 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2319      	movs	r3, #25
 8002c34:	2201      	movs	r2, #1
 8002c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fee3 	bl	8003a06 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0be      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	893a      	ldrh	r2, [r7, #8]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d90e      	bls.n	8002c9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f001 f8ce 	bl	8003e34 <I2C_TransferConfig>
 8002c98:	e06c      	b.n	8002d74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f001 f8bd 	bl	8003e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cba:	e05b      	b.n	8002d74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6a39      	ldr	r1, [r7, #32]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fee0 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e07b      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d034      	beq.n	8002d74 <HAL_I2C_Master_Transmit+0x184>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d130      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fe72 	bl	8003a06 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e04d      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f001 f871 	bl	8003e34 <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f001 f860 	bl	8003e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d19e      	bne.n	8002cbc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6a39      	ldr	r1, [r7, #32]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 febf 	bl	8003b06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01a      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80002000 	.word	0x80002000
 8002dd4:	fe00e800 	.word	0xfe00e800

08002dd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	460b      	mov	r3, r1
 8002de6:	817b      	strh	r3, [r7, #10]
 8002de8:	4613      	mov	r3, r2
 8002dea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f040 80db 	bne.w	8002fb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_I2C_Master_Receive+0x30>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0d4      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e10:	f7ff fa78 	bl	8002304 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2319      	movs	r3, #25
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fdef 	bl	8003a06 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0bf      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2222      	movs	r2, #34	; 0x22
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2bff      	cmp	r3, #255	; 0xff
 8002e62:	d90e      	bls.n	8002e82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	8979      	ldrh	r1, [r7, #10]
 8002e72:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_I2C_Master_Receive+0x1e4>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 ffda 	bl	8003e34 <I2C_TransferConfig>
 8002e80:	e06d      	b.n	8002f5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_I2C_Master_Receive+0x1e4>)
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 ffc9 	bl	8003e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ea2:	e05c      	b.n	8002f5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6a39      	ldr	r1, [r7, #32]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fe69 	bl	8003b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e07c      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d034      	beq.n	8002f5e <HAL_I2C_Master_Receive+0x186>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d130      	bne.n	8002f5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fd7d 	bl	8003a06 <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e04d      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	d90e      	bls.n	8002f3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	8979      	ldrh	r1, [r7, #10]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 ff7c 	bl	8003e34 <I2C_TransferConfig>
 8002f3c:	e00f      	b.n	8002f5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	8979      	ldrh	r1, [r7, #10]
 8002f50:	2300      	movs	r3, #0
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 ff6b 	bl	8003e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d19d      	bne.n	8002ea4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	6a39      	ldr	r1, [r7, #32]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fdca 	bl	8003b06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_I2C_Master_Receive+0x1e8>)
 8002f90:	400b      	ands	r3, r1
 8002f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	80002400 	.word	0x80002400
 8002fc0:	fe00e800 	.word	0xfe00e800

08002fc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00f      	beq.n	800303a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003038:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f043 0208 	orr.w	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003062:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00f      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 030b 	and.w	r3, r3, #11
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb77 	bl	8003794 <I2C_ITError>
  }
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	70fb      	strb	r3, [r7, #3]
 80030e2:	4613      	mov	r3, r2
 80030e4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <I2C_Slave_ISR_IT+0x24>
 800314e:	2302      	movs	r3, #2
 8003150:	e0e1      	b.n	8003316 <I2C_Slave_ISR_IT+0x1e8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f9b5 	bl	80034e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d04b      	beq.n	8003218 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003186:	2b00      	cmp	r3, #0
 8003188:	d046      	beq.n	8003218 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d128      	bne.n	80031e6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b28      	cmp	r3, #40	; 0x28
 800319e:	d108      	bne.n	80031b2 <I2C_Slave_ISR_IT+0x84>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a6:	d104      	bne.n	80031b2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa9e 	bl	80036ec <I2C_ITListenCplt>
 80031b0:	e031      	b.n	8003216 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b29      	cmp	r3, #41	; 0x29
 80031bc:	d10e      	bne.n	80031dc <I2C_Slave_ISR_IT+0xae>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c4:	d00a      	beq.n	80031dc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2210      	movs	r2, #16
 80031cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fbd7 	bl	8003982 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f926 	bl	8003426 <I2C_ITSlaveSeqCplt>
 80031da:	e01c      	b.n	8003216 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2210      	movs	r2, #16
 80031e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80031e4:	e08f      	b.n	8003306 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2210      	movs	r2, #16
 80031ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <I2C_Slave_ISR_IT+0xda>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003206:	d17e      	bne.n	8003306 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	4619      	mov	r1, r3
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fac0 	bl	8003794 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003214:	e077      	b.n	8003306 <I2C_Slave_ISR_IT+0x1d8>
 8003216:	e076      	b.n	8003306 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02f      	beq.n	8003282 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02a      	beq.n	8003282 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d14b      	bne.n	800330a <I2C_Slave_ISR_IT+0x1dc>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003278:	d047      	beq.n	800330a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f8d3 	bl	8003426 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003280:	e043      	b.n	800330a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003296:	6939      	ldr	r1, [r7, #16]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f840 	bl	800331e <I2C_ITAddrCplt>
 800329e:	e035      	b.n	800330c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d030      	beq.n	800330c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80032ee:	e00d      	b.n	800330c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f6:	d002      	beq.n	80032fe <I2C_Slave_ISR_IT+0x1d0>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f891 	bl	8003426 <I2C_ITSlaveSeqCplt>
 8003304:	e002      	b.n	800330c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800330a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003334:	2b28      	cmp	r3, #40	; 0x28
 8003336:	d16a      	bne.n	800340e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b29b      	uxth	r3, r3
 8003352:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003356:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003364:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003372:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d138      	bne.n	80033ee <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800337c:	897b      	ldrh	r3, [r7, #10]
 800337e:	09db      	lsrs	r3, r3, #7
 8003380:	b29a      	uxth	r2, r3
 8003382:	89bb      	ldrh	r3, [r7, #12]
 8003384:	4053      	eors	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	f003 0306 	and.w	r3, r3, #6
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11c      	bne.n	80033ca <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003390:	897b      	ldrh	r3, [r7, #10]
 8003392:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d13b      	bne.n	800341e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2208      	movs	r2, #8
 80033b2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033bc:	89ba      	ldrh	r2, [r7, #12]
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe87 	bl	80030d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033c8:	e029      	b.n	800341e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fd60 	bl	8003e98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033e0:	89ba      	ldrh	r2, [r7, #12]
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fe75 	bl	80030d6 <HAL_I2C_AddrCallback>
}
 80033ec:	e017      	b.n	800341e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fd50 	bl	8003e98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003400:	89ba      	ldrh	r2, [r7, #12]
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fe65 	bl	80030d6 <HAL_I2C_AddrCallback>
}
 800340c:	e007      	b.n	800341e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2208      	movs	r2, #8
 8003414:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e00c      	b.n	8003474 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b29      	cmp	r3, #41	; 0x29
 800347e:	d112      	bne.n	80034a6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2228      	movs	r2, #40	; 0x28
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800348e:	2101      	movs	r1, #1
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fd01 	bl	8003e98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fe05 	bl	80030ae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034a4:	e017      	b.n	80034d6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b2a      	cmp	r3, #42	; 0x2a
 80034b0:	d111      	bne.n	80034d6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2228      	movs	r2, #40	; 0x28
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2222      	movs	r2, #34	; 0x22
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034c0:	2102      	movs	r1, #2
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fce8 	bl	8003e98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fdf6 	bl	80030c2 <HAL_I2C_SlaveRxCpltCallback>
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2220      	movs	r2, #32
 8003504:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b21      	cmp	r3, #33	; 0x21
 800350a:	d002      	beq.n	8003512 <I2C_ITSlaveCplt+0x32>
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b29      	cmp	r3, #41	; 0x29
 8003510:	d108      	bne.n	8003524 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003512:	f248 0101 	movw	r1, #32769	; 0x8001
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fcbe 	bl	8003e98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
 8003522:	e00d      	b.n	8003540 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b22      	cmp	r3, #34	; 0x22
 8003528:	d002      	beq.n	8003530 <I2C_ITSlaveCplt+0x50>
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b2a      	cmp	r3, #42	; 0x2a
 800352e:	d107      	bne.n	8003540 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003530:	f248 0102 	movw	r1, #32770	; 0x8002
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fcaf 	bl	8003e98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2222      	movs	r2, #34	; 0x22
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b62      	ldr	r3, [pc, #392]	; (80036e4 <I2C_ITSlaveCplt+0x204>)
 800355c:	400b      	ands	r3, r1
 800355e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa0e 	bl	8003982 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01f      	beq.n	80035c8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003596:	e017      	b.n	80035c8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8a4 	bl	8003794 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b28      	cmp	r3, #40	; 0x28
 8003656:	d141      	bne.n	80036dc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003658:	6979      	ldr	r1, [r7, #20]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f846 	bl	80036ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003660:	e03c      	b.n	80036dc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366a:	d014      	beq.n	8003696 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff feda 	bl	8003426 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <I2C_ITSlaveCplt+0x208>)
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fd2f 	bl	80030f2 <HAL_I2C_ListenCpltCallback>
}
 8003694:	e022      	b.n	80036dc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	d10e      	bne.n	80036c0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fd02 	bl	80030c2 <HAL_I2C_SlaveRxCpltCallback>
}
 80036be:	e00d      	b.n	80036dc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fce9 	bl	80030ae <HAL_I2C_SlaveTxCpltCallback>
}
 80036dc:	bf00      	nop
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	fe00e800 	.word	0xfe00e800
 80036e8:	ffff0000 	.word	0xffff0000

080036ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <I2C_ITListenCplt+0xa4>)
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d022      	beq.n	8003768 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003768:	f248 0103 	movw	r1, #32771	; 0x8003
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb93 	bl	8003e98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2210      	movs	r2, #16
 8003778:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fcb5 	bl	80030f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	ffff0000 	.word	0xffff0000

08003794 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <I2C_ITError+0x194>)
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b28      	cmp	r3, #40	; 0x28
 80037ca:	d005      	beq.n	80037d8 <I2C_ITError+0x44>
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b29      	cmp	r3, #41	; 0x29
 80037d0:	d002      	beq.n	80037d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b2a      	cmp	r3, #42	; 0x2a
 80037d6:	d10b      	bne.n	80037f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037d8:	2103      	movs	r1, #3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb5c 	bl	8003e98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2228      	movs	r2, #40	; 0x28
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a50      	ldr	r2, [pc, #320]	; (800392c <I2C_ITError+0x198>)
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
 80037ee:	e011      	b.n	8003814 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fb4f 	bl	8003e98 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b60      	cmp	r3, #96	; 0x60
 8003804:	d003      	beq.n	800380e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d039      	beq.n	8003896 <I2C_ITError+0x102>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b11      	cmp	r3, #17
 8003826:	d002      	beq.n	800382e <I2C_ITError+0x9a>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b21      	cmp	r3, #33	; 0x21
 800382c:	d133      	bne.n	8003896 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383c:	d107      	bne.n	800384e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800384c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe ff29 	bl	80026aa <HAL_DMA_GetState>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d017      	beq.n	800388e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	4a33      	ldr	r2, [pc, #204]	; (8003930 <I2C_ITError+0x19c>)
 8003864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fef7 	bl	8002666 <HAL_DMA_Abort_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d04d      	beq.n	800391a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800388c:	e045      	b.n	800391a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f850 	bl	8003934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003894:	e041      	b.n	800391a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d039      	beq.n	8003912 <I2C_ITError+0x17e>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b12      	cmp	r3, #18
 80038a2:	d002      	beq.n	80038aa <I2C_ITError+0x116>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b22      	cmp	r3, #34	; 0x22
 80038a8:	d133      	bne.n	8003912 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b8:	d107      	bne.n	80038ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe feeb 	bl	80026aa <HAL_DMA_GetState>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d017      	beq.n	800390a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <I2C_ITError+0x19c>)
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe feb9 	bl	8002666 <HAL_DMA_Abort_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003904:	4610      	mov	r0, r2
 8003906:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003908:	e009      	b.n	800391e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f812 	bl	8003934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003910:	e005      	b.n	800391e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f80e 	bl	8003934 <I2C_TreatErrorCallback>
  }
}
 8003918:	e002      	b.n	8003920 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800391e:	bf00      	nop
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	ffff0000 	.word	0xffff0000
 800392c:	0800312f 	.word	0x0800312f
 8003930:	080039cb 	.word	0x080039cb

08003934 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b60      	cmp	r3, #96	; 0x60
 8003946:	d10e      	bne.n	8003966 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fbdb 	bl	800311a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003964:	e009      	b.n	800397a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fbc6 	bl	8003106 <HAL_I2C_ErrorCallback>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b02      	cmp	r3, #2
 8003996:	d103      	bne.n	80039a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d007      	beq.n	80039be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	619a      	str	r2, [r3, #24]
  }
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	2200      	movs	r2, #0
 80039e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	2200      	movs	r2, #0
 80039f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff ff9b 	bl	8003934 <I2C_TreatErrorCallback>
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a16:	e022      	b.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d01e      	beq.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fe fc70 	bl	8002304 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00f      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d0cd      	beq.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a92:	e02c      	b.n	8003aee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f8eb 	bl	8003c74 <I2C_IsErrorOccurred>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e02a      	b.n	8003afe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d01e      	beq.n	8003aee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fc28 	bl	8002304 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d1cb      	bne.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b12:	e028      	b.n	8003b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8ab 	bl	8003c74 <I2C_IsErrorOccurred>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e026      	b.n	8003b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe fbec 	bl	8002304 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d113      	bne.n	8003b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e007      	b.n	8003b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d1cf      	bne.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b8c:	e064      	b.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f86e 	bl	8003c74 <I2C_IsErrorOccurred>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e062      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d138      	bne.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d105      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e04e      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d107      	bne.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2204      	movs	r2, #4
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
 8003be6:	e002      	b.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fe fb6f 	bl	8002304 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d193      	bne.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	fe00e800 	.word	0xfe00e800

08003c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d068      	beq.n	8003d72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ca8:	e049      	b.n	8003d3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d045      	beq.n	8003d3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fe fb27 	bl	8002304 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_IsErrorOccurred+0x54>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d13a      	bne.n	8003d3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cea:	d121      	bne.n	8003d30 <I2C_IsErrorOccurred+0xbc>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf2:	d01d      	beq.n	8003d30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d01a      	beq.n	8003d30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d0a:	f7fe fafb 	bl	8002304 <HAL_GetTick>
 8003d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d10:	e00e      	b.n	8003d30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d12:	f7fe faf7 	bl	8002304 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b19      	cmp	r3, #25
 8003d1e:	d907      	bls.n	8003d30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f043 0320 	orr.w	r3, r3, #32
 8003d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d2e:	e006      	b.n	8003d3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d1e9      	bne.n	8003d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d003      	beq.n	8003d54 <I2C_IsErrorOccurred+0xe0>
 8003d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0aa      	beq.n	8003caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2220      	movs	r2, #32
 8003d62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01c      	beq.n	8003e22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff fdca 	bl	8003982 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <I2C_IsErrorOccurred+0x1bc>)
 8003dfa:	400b      	ands	r3, r1
 8003dfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3728      	adds	r7, #40	; 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	fe00e800 	.word	0xfe00e800

08003e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	4613      	mov	r3, r2
 8003e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e4c:	7a7b      	ldrb	r3, [r7, #9]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	0d5b      	lsrs	r3, r3, #21
 8003e6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <I2C_TransferConfig+0x60>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	43db      	mvns	r3, r3
 8003e78:	ea02 0103 	and.w	r1, r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	03ff63ff 	.word	0x03ff63ff

08003e98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00f      	beq.n	8003ed2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003eb8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec6:	2b28      	cmp	r3, #40	; 0x28
 8003ec8:	d003      	beq.n	8003ed2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00f      	beq.n	8003efc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003ee2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef0:	2b28      	cmp	r3, #40	; 0x28
 8003ef2:	d003      	beq.n	8003efc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003efa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	da03      	bge.n	8003f0c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d103      	bne.n	8003f1a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d103      	bne.n	8003f28 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f043 0320 	orr.w	r3, r3, #32
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d103      	bne.n	8003f36 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d138      	bne.n	8003fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e032      	b.n	8003fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d139      	bne.n	8004074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800400a:	2302      	movs	r3, #2
 800400c:	e033      	b.n	8004076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	; 0x24
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800403c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40007000 	.word	0x40007000

080040a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	4b23      	ldr	r3, [pc, #140]	; (800413c <HAL_PWREx_EnableOverDrive+0x98>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_PWREx_EnableOverDrive+0x98>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_PWREx_EnableOverDrive+0x98>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d2:	f7fe f917 	bl	8002304 <HAL_GetTick>
 80040d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d8:	e009      	b.n	80040ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040da:	f7fe f913 	bl	8002304 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e8:	d901      	bls.n	80040ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e022      	b.n	8004134 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fa:	d1ee      	bne.n	80040da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004106:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004108:	f7fe f8fc 	bl	8002304 <HAL_GetTick>
 800410c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800410e:	e009      	b.n	8004124 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004110:	f7fe f8f8 	bl	8002304 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800411e:	d901      	bls.n	8004124 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e007      	b.n	8004134 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004130:	d1ee      	bne.n	8004110 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	40007000 	.word	0x40007000

08004144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e291      	b.n	800467e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	4b96      	ldr	r3, [pc, #600]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b04      	cmp	r3, #4
 8004172:	d00c      	beq.n	800418e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004174:	4b93      	ldr	r3, [pc, #588]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d112      	bne.n	80041a6 <HAL_RCC_OscConfig+0x62>
 8004180:	4b90      	ldr	r3, [pc, #576]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418c:	d10b      	bne.n	80041a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418e:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d06c      	beq.n	8004274 <HAL_RCC_OscConfig+0x130>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d168      	bne.n	8004274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e26b      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x7a>
 80041b0:	4b84      	ldr	r3, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a83      	ldr	r2, [pc, #524]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e02e      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x9c>
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b7c      	ldr	r3, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0xc0>
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a72      	ldr	r2, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6b      	ldr	r2, [pc, #428]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe f86e 	bl	8002304 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe f86a 	bl	8002304 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e21f      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xe8>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f85a 	bl	8002304 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe f856 	bl	8002304 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e20b      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x110>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d069      	beq.n	8004356 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x190>
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x17a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1df      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	493d      	ldr	r1, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe f80c 	bl	8002304 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f0:	f7fe f808 	bl	8002304 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1bd      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4929      	ldr	r1, [pc, #164]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
 8004322:	e018      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd ffe8 	bl	8002304 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004338:	f7fd ffe4 	bl	8002304 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e199      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d038      	beq.n	80043d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d019      	beq.n	800439e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436a:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fd ffc5 	bl	8002304 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437e:	f7fd ffc1 	bl	8002304 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e176      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x23a>
 800439c:	e01a      	b.n	80043d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fd ffab 	bl	8002304 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fd ffa7 	bl	8002304 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d903      	bls.n	80043c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e15c      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
 80043c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	4b91      	ldr	r3, [pc, #580]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a4 	beq.w	800452a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b8b      	ldr	r3, [pc, #556]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b88      	ldr	r3, [pc, #544]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a87      	ldr	r2, [pc, #540]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b85      	ldr	r3, [pc, #532]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440a:	4b82      	ldr	r3, [pc, #520]	; (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004416:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7e      	ldr	r2, [pc, #504]	; (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fd ff6f 	bl	8002304 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fd ff6b 	bl	8002304 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e120      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	4b75      	ldr	r3, [pc, #468]	; (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x31a>
 8004450:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	e02d      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x33c>
 8004466:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a69      	ldr	r2, [pc, #420]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	4b67      	ldr	r3, [pc, #412]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a66      	ldr	r2, [pc, #408]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e01c      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x35e>
 8004488:	4b61      	ldr	r3, [pc, #388]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a60      	ldr	r2, [pc, #384]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a5d      	ldr	r2, [pc, #372]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 80044a2:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a5a      	ldr	r2, [pc, #360]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
 80044ae:	4b58      	ldr	r3, [pc, #352]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a57      	ldr	r2, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd ff1f 	bl	8002304 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd ff1b 	bl	8002304 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0ce      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCC_OscConfig+0x386>
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd ff09 	bl	8002304 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fd ff05 	bl	8002304 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b8      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	4b40      	ldr	r3, [pc, #256]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ee      	bne.n	80044f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b3c      	ldr	r3, [pc, #240]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a3b      	ldr	r2, [pc, #236]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a4 	beq.w	800467c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	4b36      	ldr	r3, [pc, #216]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d06b      	beq.n	8004618 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d149      	bne.n	80045dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a30      	ldr	r2, [pc, #192]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fed6 	bl	8002304 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fed2 	bl	8002304 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e087      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4313      	orrs	r3, r2
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fea6 	bl	8002304 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fd fea2 	bl	8002304 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e057      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x478>
 80045da:	e04f      	b.n	800467c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fe8c 	bl	8002304 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fe88 	bl	8002304 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03d      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4ac>
 800460e:	e035      	b.n	800467c <HAL_RCC_OscConfig+0x538>
 8004610:	40023800 	.word	0x40023800
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004618:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x544>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d028      	beq.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d121      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d11a      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d0      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b67      	ldr	r3, [pc, #412]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	4965      	ldr	r1, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d040      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d115      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e073      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e06b      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4936      	ldr	r1, [pc, #216]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd fdc0 	bl	8002304 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fd fdbc 	bl	8002304 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e053      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d210      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	4922      	ldr	r1, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1d4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fd1c 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	080089bc 	.word	0x080089bc
 800485c:	20000024 	.word	0x20000024
 8004860:	20000028 	.word	0x20000028

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b094      	sub	sp, #80	; 0x50
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
 8004870:	2300      	movs	r3, #0
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	2300      	movs	r3, #0
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80e1 	bhi.w	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e0db      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800489c:	e0db      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a2:	e0d8      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d063      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
 80048d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4621      	mov	r1, r4
 80048f0:	1a51      	subs	r1, r2, r1
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb63 0301 	sbc.w	r3, r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	018b      	lsls	r3, r1, #6
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004912:	4651      	mov	r1, sl
 8004914:	018a      	lsls	r2, r1, #6
 8004916:	4651      	mov	r1, sl
 8004918:	ebb2 0801 	subs.w	r8, r2, r1
 800491c:	4659      	mov	r1, fp
 800491e:	eb63 0901 	sbc.w	r9, r3, r1
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800492e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	4623      	mov	r3, r4
 800493c:	eb18 0303 	adds.w	r3, r8, r3
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	462b      	mov	r3, r5
 8004944:	eb49 0303 	adc.w	r3, r9, r3
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004956:	4629      	mov	r1, r5
 8004958:	024b      	lsls	r3, r1, #9
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004960:	4621      	mov	r1, r4
 8004962:	024a      	lsls	r2, r1, #9
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004974:	f7fc f8ba 	bl	8000aec <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	e058      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	2200      	movs	r2, #0
 800498a:	4618      	mov	r0, r3
 800498c:	4611      	mov	r1, r2
 800498e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ae:	0150      	lsls	r0, r2, #5
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4641      	mov	r1, r8
 80049b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049d4:	ebb2 040a 	subs.w	r4, r2, sl
 80049d8:	eb63 050b 	sbc.w	r5, r3, fp
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	464b      	mov	r3, r9
 80049f8:	eb45 0303 	adc.w	r3, r5, r3
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	028b      	lsls	r3, r1, #10
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a14:	4621      	mov	r1, r4
 8004a16:	028a      	lsls	r2, r1, #10
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	61fa      	str	r2, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	f7fc f860 	bl	8000aec <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3750      	adds	r7, #80	; 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000024 	.word	0x20000024

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	080089cc 	.word	0x080089cc

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab4:	f7ff ffdc 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0b5b      	lsrs	r3, r3, #13
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	080089cc 	.word	0x080089cc

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b00:	4b69      	ldr	r3, [pc, #420]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a68      	ldr	r2, [pc, #416]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b0a:	6093      	str	r3, [r2, #8]
 8004b0c:	4b66      	ldr	r3, [pc, #408]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	4964      	ldr	r1, [pc, #400]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d017      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b32:	4b5d      	ldr	r3, [pc, #372]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	4959      	ldr	r1, [pc, #356]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b50:	d101      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d017      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	494a      	ldr	r1, [pc, #296]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 808b 	beq.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b3a      	ldr	r3, [pc, #232]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	4a39      	ldr	r2, [pc, #228]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bd4:	4b35      	ldr	r3, [pc, #212]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fd fb90 	bl	8002304 <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fd fb8c 	bl	8002304 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e357      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bfa:	4b2c      	ldr	r3, [pc, #176]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c06:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d035      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d02e      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c24:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c4c:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d114      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fb54 	bl	8002304 <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fb50 	bl	8002304 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e319      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ee      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	4901      	ldr	r1, [pc, #4]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	0ffffcff 	.word	0x0ffffcff
 8004cb4:	4baa      	ldr	r3, [pc, #680]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4aa9      	ldr	r2, [pc, #676]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	4ba7      	ldr	r3, [pc, #668]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	49a4      	ldr	r1, [pc, #656]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cde:	4ba0      	ldr	r3, [pc, #640]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	4a9e      	ldr	r2, [pc, #632]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cee:	4b9c      	ldr	r3, [pc, #624]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	4999      	ldr	r1, [pc, #612]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0c:	4b94      	ldr	r3, [pc, #592]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1a:	4991      	ldr	r1, [pc, #580]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3c:	4988      	ldr	r1, [pc, #544]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d50:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5e:	4980      	ldr	r1, [pc, #512]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d72:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4977      	ldr	r1, [pc, #476]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d94:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	496f      	ldr	r1, [pc, #444]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db6:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f023 020c 	bic.w	r2, r3, #12
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	4966      	ldr	r1, [pc, #408]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dd8:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	495e      	ldr	r1, [pc, #376]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dfa:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	4955      	ldr	r1, [pc, #340]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	494d      	ldr	r1, [pc, #308]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e3e:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	4944      	ldr	r1, [pc, #272]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e60:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6e:	493c      	ldr	r1, [pc, #240]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e90:	4933      	ldr	r1, [pc, #204]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb2:	492b      	ldr	r1, [pc, #172]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d011      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed4:	4922      	ldr	r1, [pc, #136]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	4912      	ldr	r1, [pc, #72]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f38:	4909      	ldr	r1, [pc, #36]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d006      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80d9 	beq.w	8005106 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a01      	ldr	r2, [pc, #4]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fd f9cd 	bl	8002304 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f6e:	f7fd f9c9 	bl	8002304 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b64      	cmp	r3, #100	; 0x64
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e194      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d021      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11d      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa0:	4b64      	ldr	r3, [pc, #400]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fae:	4b61      	ldr	r3, [pc, #388]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb4:	0e1b      	lsrs	r3, r3, #24
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	019a      	lsls	r2, r3, #6
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	071b      	lsls	r3, r3, #28
 8004fd4:	4957      	ldr	r1, [pc, #348]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02e      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005006:	d129      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005008:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005016:	4b47      	ldr	r3, [pc, #284]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501c:	0f1b      	lsrs	r3, r3, #28
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	019a      	lsls	r2, r3, #6
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	493d      	ldr	r1, [pc, #244]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005044:	4b3b      	ldr	r3, [pc, #236]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	f023 021f 	bic.w	r2, r3, #31
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	3b01      	subs	r3, #1
 8005054:	4937      	ldr	r1, [pc, #220]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507c:	0f1b      	lsrs	r3, r3, #28
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	019a      	lsls	r2, r3, #6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	431a      	orrs	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	071b      	lsls	r3, r3, #28
 800509c:	4925      	ldr	r1, [pc, #148]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d011      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	019a      	lsls	r2, r3, #6
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	4919      	ldr	r1, [pc, #100]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e0:	f7fd f910 	bl	8002304 <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e8:	f7fd f90c 	bl	8002304 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0d7      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b01      	cmp	r3, #1
 800510a:	f040 80cd 	bne.w	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fd f8f3 	bl	8002304 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005122:	f7fd f8ef 	bl	8002304 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	; 0x64
 800512e:	d903      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0ba      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005134:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005138:	4b5e      	ldr	r3, [pc, #376]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005144:	d0ed      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12a      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800516e:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800517c:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	0f1b      	lsrs	r3, r3, #28
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	019a      	lsls	r2, r3, #6
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	071b      	lsls	r3, r3, #28
 80051a2:	4944      	ldr	r1, [pc, #272]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051aa:	4b42      	ldr	r3, [pc, #264]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	493d      	ldr	r1, [pc, #244]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d8:	d11d      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	0e1b      	lsrs	r3, r3, #24
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e8:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	0f1b      	lsrs	r3, r3, #28
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	019a      	lsls	r2, r3, #6
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	4929      	ldr	r1, [pc, #164]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d028      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	0e1b      	lsrs	r3, r3, #24
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	019a      	lsls	r2, r3, #6
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	4917      	ldr	r1, [pc, #92]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4911      	ldr	r1, [pc, #68]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fd f840 	bl	8002304 <HAL_GetTick>
 8005284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005288:	f7fd f83c 	bl	8002304 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e007      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d1ef      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40023800 	.word	0x40023800

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fe20 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fe7a 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d001      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e054      	b.n	800542a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a26      	ldr	r2, [pc, #152]	; (8005438 <HAL_TIM_Base_Start_IT+0xd0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d01d      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <HAL_TIM_Base_Start_IT+0xd4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_TIM_Base_Start_IT+0xd8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <HAL_TIM_Base_Start_IT+0xdc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_TIM_Base_Start_IT+0xe0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <HAL_TIM_Base_Start_IT+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_TIM_Base_Start_IT+0xe8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d115      	bne.n	8005414 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_TIM_Base_Start_IT+0xec>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d015      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d011      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	e008      	b.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e000      	b.n	8005428 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800
 8005454:	00010007 	.word	0x00010007

08005458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e049      	b.n	80054fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f841 	bl	8005506 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fdaa 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x24>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e03c      	b.n	80055ba <HAL_TIM_PWM_Start+0x9e>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d109      	bne.n	800555a <HAL_TIM_PWM_Start+0x3e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e02f      	b.n	80055ba <HAL_TIM_PWM_Start+0x9e>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d109      	bne.n	8005574 <HAL_TIM_PWM_Start+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e022      	b.n	80055ba <HAL_TIM_PWM_Start+0x9e>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d109      	bne.n	800558e <HAL_TIM_PWM_Start+0x72>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e015      	b.n	80055ba <HAL_TIM_PWM_Start+0x9e>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b10      	cmp	r3, #16
 8005592:	d109      	bne.n	80055a8 <HAL_TIM_PWM_Start+0x8c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e008      	b.n	80055ba <HAL_TIM_PWM_Start+0x9e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e092      	b.n	80056e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xb6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d0:	e023      	b.n	800561a <HAL_TIM_PWM_Start+0xfe>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start+0xc6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	e01b      	b.n	800561a <HAL_TIM_PWM_Start+0xfe>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	e013      	b.n	800561a <HAL_TIM_PWM_Start+0xfe>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0xe6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	e00b      	b.n	800561a <HAL_TIM_PWM_Start+0xfe>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b10      	cmp	r3, #16
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xf6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	e003      	b.n	800561a <HAL_TIM_PWM_Start+0xfe>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f001 f87c 	bl	8006720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a30      	ldr	r2, [pc, #192]	; (80056f0 <HAL_TIM_PWM_Start+0x1d4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_PWM_Start+0x120>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <HAL_TIM_PWM_Start+0x1d8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Start+0x124>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_TIM_PWM_Start+0x126>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <HAL_TIM_PWM_Start+0x1d4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d01d      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_TIM_PWM_Start+0x1dc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <HAL_TIM_PWM_Start+0x1e0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <HAL_TIM_PWM_Start+0x1e4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_TIM_PWM_Start+0x1d8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_TIM_PWM_Start+0x1e8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x18a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <HAL_TIM_PWM_Start+0x1ec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d115      	bne.n	80056d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	4b17      	ldr	r3, [pc, #92]	; (800570c <HAL_TIM_PWM_Start+0x1f0>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d015      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x1c8>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056be:	d011      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	e008      	b.n	80056e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e000      	b.n	80056e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40014000 	.word	0x40014000
 8005708:	40001800 	.word	0x40001800
 800570c:	00010007 	.word	0x00010007

08005710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e08f      	b.n	8005844 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc fc4f 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_TIM_Encoder_Init+0x13c>)
 8005752:	400b      	ands	r3, r1
 8005754:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fc45 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_TIM_Encoder_Init+0x140>)
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	4313      	orrs	r3, r2
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_TIM_Encoder_Init+0x144>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <HAL_TIM_Encoder_Init+0x148>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4313      	orrs	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4313      	orrs	r3, r2
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	fffebff8 	.word	0xfffebff8
 8005850:	fffffcfc 	.word	0xfffffcfc
 8005854:	fffff3f3 	.word	0xfffff3f3
 8005858:	ffff0f0f 	.word	0xffff0f0f

0800585c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d110      	bne.n	80058ae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005892:	7b7b      	ldrb	r3, [r7, #13]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d001      	beq.n	800589c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e089      	b.n	80059b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	e031      	b.n	8005912 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d110      	bne.n	80058d6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ba:	7b3b      	ldrb	r3, [r7, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e075      	b.n	80059b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d4:	e01d      	b.n	8005912 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	7b7b      	ldrb	r3, [r7, #13]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d102      	bne.n	80058ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e8:	7b3b      	ldrb	r3, [r7, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e05e      	b.n	80059b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d010      	beq.n	8005940 <HAL_TIM_Encoder_Start_IT+0xe4>
 800591e:	e01f      	b.n	8005960 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2201      	movs	r2, #1
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fef9 	bl	8006720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0202 	orr.w	r2, r2, #2
 800593c:	60da      	str	r2, [r3, #12]
      break;
 800593e:	e02e      	b.n	800599e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	2104      	movs	r1, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fee9 	bl	8006720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0204 	orr.w	r2, r2, #4
 800595c:	60da      	str	r2, [r3, #12]
      break;
 800595e:	e01e      	b.n	800599e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fed9 	bl	8006720 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	2104      	movs	r1, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fed2 	bl	8006720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0202 	orr.w	r2, r2, #2
 800598a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0204 	orr.w	r2, r2, #4
 800599a:	60da      	str	r2, [r3, #12]
      break;
 800599c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb ff02 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fad6 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fadd 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0204 	mvn.w	r2, #4
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fb fed8 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 faac 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fab3 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0208 	mvn.w	r2, #8
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2204      	movs	r2, #4
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb feae 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa82 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa89 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fb fe84 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa58 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa5f 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0201 	mvn.w	r2, #1
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb fdb2 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fe9a 	bl	800689c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d10e      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d107      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fe8d 	bl	80068b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d107      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa0d 	bl	8005fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d10e      	bne.n	8005bee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d107      	bne.n	8005bee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0220 	mvn.w	r2, #32
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fe4d 	bl	8006888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0ff      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b14      	cmp	r3, #20
 8005c22:	f200 80f0 	bhi.w	8005e06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005e07 	.word	0x08005e07
 8005c34:	08005e07 	.word	0x08005e07
 8005c38:	08005e07 	.word	0x08005e07
 8005c3c:	08005cc1 	.word	0x08005cc1
 8005c40:	08005e07 	.word	0x08005e07
 8005c44:	08005e07 	.word	0x08005e07
 8005c48:	08005e07 	.word	0x08005e07
 8005c4c:	08005d03 	.word	0x08005d03
 8005c50:	08005e07 	.word	0x08005e07
 8005c54:	08005e07 	.word	0x08005e07
 8005c58:	08005e07 	.word	0x08005e07
 8005c5c:	08005d43 	.word	0x08005d43
 8005c60:	08005e07 	.word	0x08005e07
 8005c64:	08005e07 	.word	0x08005e07
 8005c68:	08005e07 	.word	0x08005e07
 8005c6c:	08005d85 	.word	0x08005d85
 8005c70:	08005e07 	.word	0x08005e07
 8005c74:	08005e07 	.word	0x08005e07
 8005c78:	08005e07 	.word	0x08005e07
 8005c7c:	08005dc5 	.word	0x08005dc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fa52 	bl	8006130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0208 	orr.w	r2, r2, #8
 8005c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0204 	bic.w	r2, r2, #4
 8005caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6999      	ldr	r1, [r3, #24]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	619a      	str	r2, [r3, #24]
      break;
 8005cbe:	e0a5      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 faa4 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6999      	ldr	r1, [r3, #24]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	619a      	str	r2, [r3, #24]
      break;
 8005d00:	e084      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fafb 	bl	8006304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0208 	orr.w	r2, r2, #8
 8005d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0204 	bic.w	r2, r2, #4
 8005d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69d9      	ldr	r1, [r3, #28]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	61da      	str	r2, [r3, #28]
      break;
 8005d40:	e064      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fb51 	bl	80063f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	021a      	lsls	r2, r3, #8
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	61da      	str	r2, [r3, #28]
      break;
 8005d82:	e043      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb88 	bl	80064a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dc2:	e023      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fbba 	bl	8006544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	021a      	lsls	r2, r3, #8
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e04:	e002      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
      break;
 8005e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop

08005e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_ConfigClockSource+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e0b4      	b.n	8005fa6 <HAL_TIM_ConfigClockSource+0x186>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <HAL_TIM_ConfigClockSource+0x190>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e74:	d03e      	beq.n	8005ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	f200 8087 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_TIM_ConfigClockSource+0x172>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d87f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d01a      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d87b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d050      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x11a>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d877      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b50      	cmp	r3, #80	; 0x50
 8005e9e:	d03c      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0xfa>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d873      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d058      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x13a>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d86f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d064      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d86b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d060      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d867      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05c      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d05a      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	e062      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed6:	f000 fc03 	bl	80066e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
      break;
 8005ef2:	e04f      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	f000 fbec 	bl	80066e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f16:	609a      	str	r2, [r3, #8]
      break;
 8005f18:	e03c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 fb60 	bl	80065ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2150      	movs	r1, #80	; 0x50
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fbb9 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 8005f38:	e02c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 fb7f 	bl	800664a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2160      	movs	r1, #96	; 0x60
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fba9 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 8005f58:	e01c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	461a      	mov	r2, r3
 8005f68:	f000 fb40 	bl	80065ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2140      	movs	r1, #64	; 0x40
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb99 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 8005f78:	e00c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f000 fb90 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 8005f8a:	e003      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e000      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	fffeff88 	.word	0xfffeff88

08005fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d027      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d023      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <TIM_Base_SetConfig+0x138>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <TIM_Base_SetConfig+0x13c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <TIM_Base_SetConfig+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40010400 	.word	0x40010400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	40001800 	.word	0x40001800
 8006128:	40001c00 	.word	0x40001c00
 800612c:	40002000 	.word	0x40002000

08006130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <TIM_OC1_SetConfig+0xd8>)
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a21      	ldr	r2, [pc, #132]	; (800620c <TIM_OC1_SetConfig+0xdc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC1_SetConfig+0x64>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <TIM_OC1_SetConfig+0xe0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10c      	bne.n	80061ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 0308 	bic.w	r3, r3, #8
 800619a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f023 0304 	bic.w	r3, r3, #4
 80061ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <TIM_OC1_SetConfig+0xdc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_OC1_SetConfig+0x8e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a15      	ldr	r2, [pc, #84]	; (8006210 <TIM_OC1_SetConfig+0xe0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d111      	bne.n	80061e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	fffeff8f 	.word	0xfffeff8f
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a23      	ldr	r2, [pc, #140]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x68>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a22      	ldr	r2, [pc, #136]	; (8006300 <TIM_OC2_SetConfig+0xec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x94>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <TIM_OC2_SetConfig+0xec>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	feff8fff 	.word	0xfeff8fff
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400

08006304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <TIM_OC3_SetConfig+0xe0>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <TIM_OC3_SetConfig+0xe4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x66>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a21      	ldr	r2, [pc, #132]	; (80063ec <TIM_OC3_SetConfig+0xe8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10d      	bne.n	8006386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <TIM_OC3_SetConfig+0xe4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC3_SetConfig+0x92>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <TIM_OC3_SetConfig+0xe8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d113      	bne.n	80063be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	fffeff8f 	.word	0xfffeff8f
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <TIM_OC4_SetConfig+0xa4>)
 800641c:	4013      	ands	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	031b      	lsls	r3, r3, #12
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a13      	ldr	r2, [pc, #76]	; (8006498 <TIM_OC4_SetConfig+0xa8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC4_SetConfig+0x68>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a12      	ldr	r2, [pc, #72]	; (800649c <TIM_OC4_SetConfig+0xac>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d109      	bne.n	800646c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	019b      	lsls	r3, r3, #6
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	feff8fff 	.word	0xfeff8fff
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400

080064a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <TIM_OC5_SetConfig+0x98>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	041b      	lsls	r3, r3, #16
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <TIM_OC5_SetConfig+0x9c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC5_SetConfig+0x5e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <TIM_OC5_SetConfig+0xa0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d109      	bne.n	8006512 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	621a      	str	r2, [r3, #32]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	fffeff8f 	.word	0xfffeff8f
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400

08006544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <TIM_OC6_SetConfig+0x9c>)
 8006570:	4013      	ands	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	051b      	lsls	r3, r3, #20
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <TIM_OC6_SetConfig+0xa0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC6_SetConfig+0x60>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a12      	ldr	r2, [pc, #72]	; (80065e8 <TIM_OC6_SetConfig+0xa4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d109      	bne.n	80065b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	feff8fff 	.word	0xfeff8fff
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40010400 	.word	0x40010400

080065ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 030a 	bic.w	r3, r3, #10
 8006628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800664a:	b480      	push	{r7}
 800664c:	b087      	sub	sp, #28
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0210 	bic.w	r2, r3, #16
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f043 0307 	orr.w	r3, r3, #7
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e06d      	b.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a30      	ldr	r2, [pc, #192]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2f      	ldr	r2, [pc, #188]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a20      	ldr	r2, [pc, #128]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d01d      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1a      	ldr	r2, [pc, #104]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d10c      	bne.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40014000 	.word	0x40014000
 8006884:	40001800 	.word	0x40001800

08006888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e040      	b.n	8006958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fb fc2a 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2224      	movs	r2, #36	; 0x24
 80068f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0201 	bic.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fbe6 	bl	80070d4 <UART_SetConfig>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e022      	b.n	8006958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fe3e 	bl	800759c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fec5 	bl	80076e0 <UART_CheckIdleState>
 8006956:	4603      	mov	r3, r0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006974:	2b20      	cmp	r3, #32
 8006976:	d171      	bne.n	8006a5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Transmit+0x24>
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e06a      	b.n	8006a5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2221      	movs	r2, #33	; 0x21
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006996:	f7fb fcb5 	bl	8002304 <HAL_GetTick>
 800699a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d108      	bne.n	80069c8 <HAL_UART_Transmit+0x68>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e003      	b.n	80069d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069d0:	e02c      	b.n	8006a2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	2180      	movs	r1, #128	; 0x80
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 feb6 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e038      	b.n	8006a5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	3302      	adds	r3, #2
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e007      	b.n	8006a1a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cc      	bne.n	80069d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2140      	movs	r1, #64	; 0x40
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fe83 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e005      	b.n	8006a5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b08a      	sub	sp, #40	; 0x28
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	4613      	mov	r3, r2
 8006a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d132      	bne.n	8006ae4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <HAL_UART_Receive_IT+0x24>
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02b      	b.n	8006ae6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d018      	beq.n	8006ad4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fefe 	bl	80078dc <UART_Start_Receive_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	; 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b0ba      	sub	sp, #232	; 0xe8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b1e:	4013      	ands	r3, r2
 8006b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d115      	bne.n	8006b58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00f      	beq.n	8006b58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8297 	beq.w	800707c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
      }
      return;
 8006b56:	e291      	b.n	800707c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8117 	beq.w	8006d90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b72:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_UART_IRQHandler+0x298>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 810a 	beq.w	8006d90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d011      	beq.n	8006bac <HAL_UART_IRQHandler+0xbc>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba2:	f043 0201 	orr.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_UART_IRQHandler+0xec>
 8006bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <HAL_UART_IRQHandler+0x11c>
 8006be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c02:	f043 0202 	orr.w	r2, r3, #2
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d017      	beq.n	8006c48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2208      	movs	r2, #8
 8006c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c3e:	f043 0208 	orr.w	r2, r3, #8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <HAL_UART_IRQHandler+0x18a>
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c70:	f043 0220 	orr.w	r2, r3, #32
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 81fd 	beq.w	8007080 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00d      	beq.n	8006cae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d005      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04f      	beq.n	8006d72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fec8 	bl	8007a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d141      	bne.n	8006d6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1d9      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_UART_IRQHandler+0x29c>)
 8006d40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fb fc8d 	bl	8002666 <HAL_DMA_Abort_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d017      	beq.n	8006d82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e00f      	b.n	8006d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9a0 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00b      	b.n	8006d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f99c 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e007      	b.n	8006d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f998 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006d80:	e17e      	b.n	8007080 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d82:	bf00      	nop
    return;
 8006d84:	e17c      	b.n	8007080 <HAL_UART_IRQHandler+0x590>
 8006d86:	bf00      	nop
 8006d88:	04000120 	.word	0x04000120
 8006d8c:	08007b31 	.word	0x08007b31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 814c 	bne.w	8007032 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8145 	beq.w	8007032 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 813e 	beq.w	8007032 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	f040 80b6 	bne.w	8006f3a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8150 	beq.w	8007084 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f080 8148 	bcs.w	8007084 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e08:	f000 8086 	beq.w	8006f18 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1da      	bne.n	8006e0c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e1      	bne.n	8006e56 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e3      	bne.n	8006e92 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee8:	f023 0310 	bic.w	r3, r3, #16
 8006eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006efc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e4      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fb fb37 	bl	8002586 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8c2 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f38:	e0a4      	b.n	8007084 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8096 	beq.w	8007088 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8091 	beq.w	8007088 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e4      	bne.n	8006f66 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	623b      	str	r3, [r7, #32]
   return(result);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e3      	bne.n	8006f9c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f023 0310 	bic.w	r3, r3, #16
 8006ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	69b9      	ldr	r1, [r7, #24]
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	617b      	str	r3, [r7, #20]
   return(result);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e4      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f846 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007030:	e02a      	b.n	8007088 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00e      	beq.n	800705c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800703e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01c      	beq.n	800708c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
    }
    return;
 800705a:	e017      	b.n	800708c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d012      	beq.n	800708e <HAL_UART_IRQHandler+0x59e>
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd71 	bl	8007b5c <UART_EndTransmit_IT>
    return;
 800707a:	e008      	b.n	800708e <HAL_UART_IRQHandler+0x59e>
      return;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <HAL_UART_IRQHandler+0x59e>
    return;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <HAL_UART_IRQHandler+0x59e>
      return;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <HAL_UART_IRQHandler+0x59e>
      return;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_UART_IRQHandler+0x59e>
    return;
 800708c:	bf00      	nop
  }

}
 800708e:	37e8      	adds	r7, #232	; 0xe8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4ba6      	ldr	r3, [pc, #664]	; (8007398 <UART_SetConfig+0x2c4>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	430b      	orrs	r3, r1
 800710a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	430a      	orrs	r2, r1
 8007144:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a94      	ldr	r2, [pc, #592]	; (800739c <UART_SetConfig+0x2c8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d120      	bne.n	8007192 <UART_SetConfig+0xbe>
 8007150:	4b93      	ldr	r3, [pc, #588]	; (80073a0 <UART_SetConfig+0x2cc>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d816      	bhi.n	800718c <UART_SetConfig+0xb8>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x90>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	08007181 	.word	0x08007181
 800716c:	0800717b 	.word	0x0800717b
 8007170:	08007187 	.word	0x08007187
 8007174:	2301      	movs	r3, #1
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e150      	b.n	800741c <UART_SetConfig+0x348>
 800717a:	2302      	movs	r3, #2
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e14d      	b.n	800741c <UART_SetConfig+0x348>
 8007180:	2304      	movs	r3, #4
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e14a      	b.n	800741c <UART_SetConfig+0x348>
 8007186:	2308      	movs	r3, #8
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e147      	b.n	800741c <UART_SetConfig+0x348>
 800718c:	2310      	movs	r3, #16
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e144      	b.n	800741c <UART_SetConfig+0x348>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a83      	ldr	r2, [pc, #524]	; (80073a4 <UART_SetConfig+0x2d0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d132      	bne.n	8007202 <UART_SetConfig+0x12e>
 800719c:	4b80      	ldr	r3, [pc, #512]	; (80073a0 <UART_SetConfig+0x2cc>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d828      	bhi.n	80071fc <UART_SetConfig+0x128>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <UART_SetConfig+0xdc>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071e5 	.word	0x080071e5
 80071b4:	080071fd 	.word	0x080071fd
 80071b8:	080071fd 	.word	0x080071fd
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	080071f1 	.word	0x080071f1
 80071c4:	080071fd 	.word	0x080071fd
 80071c8:	080071fd 	.word	0x080071fd
 80071cc:	080071fd 	.word	0x080071fd
 80071d0:	080071eb 	.word	0x080071eb
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	080071fd 	.word	0x080071fd
 80071e0:	080071f7 	.word	0x080071f7
 80071e4:	2300      	movs	r3, #0
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e118      	b.n	800741c <UART_SetConfig+0x348>
 80071ea:	2302      	movs	r3, #2
 80071ec:	77fb      	strb	r3, [r7, #31]
 80071ee:	e115      	b.n	800741c <UART_SetConfig+0x348>
 80071f0:	2304      	movs	r3, #4
 80071f2:	77fb      	strb	r3, [r7, #31]
 80071f4:	e112      	b.n	800741c <UART_SetConfig+0x348>
 80071f6:	2308      	movs	r3, #8
 80071f8:	77fb      	strb	r3, [r7, #31]
 80071fa:	e10f      	b.n	800741c <UART_SetConfig+0x348>
 80071fc:	2310      	movs	r3, #16
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e10c      	b.n	800741c <UART_SetConfig+0x348>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a68      	ldr	r2, [pc, #416]	; (80073a8 <UART_SetConfig+0x2d4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d120      	bne.n	800724e <UART_SetConfig+0x17a>
 800720c:	4b64      	ldr	r3, [pc, #400]	; (80073a0 <UART_SetConfig+0x2cc>)
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007212:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007216:	2b30      	cmp	r3, #48	; 0x30
 8007218:	d013      	beq.n	8007242 <UART_SetConfig+0x16e>
 800721a:	2b30      	cmp	r3, #48	; 0x30
 800721c:	d814      	bhi.n	8007248 <UART_SetConfig+0x174>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d009      	beq.n	8007236 <UART_SetConfig+0x162>
 8007222:	2b20      	cmp	r3, #32
 8007224:	d810      	bhi.n	8007248 <UART_SetConfig+0x174>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <UART_SetConfig+0x15c>
 800722a:	2b10      	cmp	r3, #16
 800722c:	d006      	beq.n	800723c <UART_SetConfig+0x168>
 800722e:	e00b      	b.n	8007248 <UART_SetConfig+0x174>
 8007230:	2300      	movs	r3, #0
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e0f2      	b.n	800741c <UART_SetConfig+0x348>
 8007236:	2302      	movs	r3, #2
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e0ef      	b.n	800741c <UART_SetConfig+0x348>
 800723c:	2304      	movs	r3, #4
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e0ec      	b.n	800741c <UART_SetConfig+0x348>
 8007242:	2308      	movs	r3, #8
 8007244:	77fb      	strb	r3, [r7, #31]
 8007246:	e0e9      	b.n	800741c <UART_SetConfig+0x348>
 8007248:	2310      	movs	r3, #16
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e0e6      	b.n	800741c <UART_SetConfig+0x348>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a56      	ldr	r2, [pc, #344]	; (80073ac <UART_SetConfig+0x2d8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d120      	bne.n	800729a <UART_SetConfig+0x1c6>
 8007258:	4b51      	ldr	r3, [pc, #324]	; (80073a0 <UART_SetConfig+0x2cc>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007262:	2bc0      	cmp	r3, #192	; 0xc0
 8007264:	d013      	beq.n	800728e <UART_SetConfig+0x1ba>
 8007266:	2bc0      	cmp	r3, #192	; 0xc0
 8007268:	d814      	bhi.n	8007294 <UART_SetConfig+0x1c0>
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d009      	beq.n	8007282 <UART_SetConfig+0x1ae>
 800726e:	2b80      	cmp	r3, #128	; 0x80
 8007270:	d810      	bhi.n	8007294 <UART_SetConfig+0x1c0>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <UART_SetConfig+0x1a8>
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d006      	beq.n	8007288 <UART_SetConfig+0x1b4>
 800727a:	e00b      	b.n	8007294 <UART_SetConfig+0x1c0>
 800727c:	2300      	movs	r3, #0
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e0cc      	b.n	800741c <UART_SetConfig+0x348>
 8007282:	2302      	movs	r3, #2
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e0c9      	b.n	800741c <UART_SetConfig+0x348>
 8007288:	2304      	movs	r3, #4
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e0c6      	b.n	800741c <UART_SetConfig+0x348>
 800728e:	2308      	movs	r3, #8
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e0c3      	b.n	800741c <UART_SetConfig+0x348>
 8007294:	2310      	movs	r3, #16
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e0c0      	b.n	800741c <UART_SetConfig+0x348>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a44      	ldr	r2, [pc, #272]	; (80073b0 <UART_SetConfig+0x2dc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d125      	bne.n	80072f0 <UART_SetConfig+0x21c>
 80072a4:	4b3e      	ldr	r3, [pc, #248]	; (80073a0 <UART_SetConfig+0x2cc>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b2:	d017      	beq.n	80072e4 <UART_SetConfig+0x210>
 80072b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b8:	d817      	bhi.n	80072ea <UART_SetConfig+0x216>
 80072ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072be:	d00b      	beq.n	80072d8 <UART_SetConfig+0x204>
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c4:	d811      	bhi.n	80072ea <UART_SetConfig+0x216>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <UART_SetConfig+0x1fe>
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	d006      	beq.n	80072de <UART_SetConfig+0x20a>
 80072d0:	e00b      	b.n	80072ea <UART_SetConfig+0x216>
 80072d2:	2300      	movs	r3, #0
 80072d4:	77fb      	strb	r3, [r7, #31]
 80072d6:	e0a1      	b.n	800741c <UART_SetConfig+0x348>
 80072d8:	2302      	movs	r3, #2
 80072da:	77fb      	strb	r3, [r7, #31]
 80072dc:	e09e      	b.n	800741c <UART_SetConfig+0x348>
 80072de:	2304      	movs	r3, #4
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e09b      	b.n	800741c <UART_SetConfig+0x348>
 80072e4:	2308      	movs	r3, #8
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e098      	b.n	800741c <UART_SetConfig+0x348>
 80072ea:	2310      	movs	r3, #16
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e095      	b.n	800741c <UART_SetConfig+0x348>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2f      	ldr	r2, [pc, #188]	; (80073b4 <UART_SetConfig+0x2e0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d125      	bne.n	8007346 <UART_SetConfig+0x272>
 80072fa:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <UART_SetConfig+0x2cc>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007308:	d017      	beq.n	800733a <UART_SetConfig+0x266>
 800730a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800730e:	d817      	bhi.n	8007340 <UART_SetConfig+0x26c>
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d00b      	beq.n	800732e <UART_SetConfig+0x25a>
 8007316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731a:	d811      	bhi.n	8007340 <UART_SetConfig+0x26c>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <UART_SetConfig+0x254>
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d006      	beq.n	8007334 <UART_SetConfig+0x260>
 8007326:	e00b      	b.n	8007340 <UART_SetConfig+0x26c>
 8007328:	2301      	movs	r3, #1
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e076      	b.n	800741c <UART_SetConfig+0x348>
 800732e:	2302      	movs	r3, #2
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e073      	b.n	800741c <UART_SetConfig+0x348>
 8007334:	2304      	movs	r3, #4
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e070      	b.n	800741c <UART_SetConfig+0x348>
 800733a:	2308      	movs	r3, #8
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e06d      	b.n	800741c <UART_SetConfig+0x348>
 8007340:	2310      	movs	r3, #16
 8007342:	77fb      	strb	r3, [r7, #31]
 8007344:	e06a      	b.n	800741c <UART_SetConfig+0x348>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <UART_SetConfig+0x2e4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d138      	bne.n	80073c2 <UART_SetConfig+0x2ee>
 8007350:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <UART_SetConfig+0x2cc>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007356:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800735a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800735e:	d017      	beq.n	8007390 <UART_SetConfig+0x2bc>
 8007360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007364:	d82a      	bhi.n	80073bc <UART_SetConfig+0x2e8>
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736a:	d00b      	beq.n	8007384 <UART_SetConfig+0x2b0>
 800736c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007370:	d824      	bhi.n	80073bc <UART_SetConfig+0x2e8>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <UART_SetConfig+0x2aa>
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737a:	d006      	beq.n	800738a <UART_SetConfig+0x2b6>
 800737c:	e01e      	b.n	80073bc <UART_SetConfig+0x2e8>
 800737e:	2300      	movs	r3, #0
 8007380:	77fb      	strb	r3, [r7, #31]
 8007382:	e04b      	b.n	800741c <UART_SetConfig+0x348>
 8007384:	2302      	movs	r3, #2
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e048      	b.n	800741c <UART_SetConfig+0x348>
 800738a:	2304      	movs	r3, #4
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e045      	b.n	800741c <UART_SetConfig+0x348>
 8007390:	2308      	movs	r3, #8
 8007392:	77fb      	strb	r3, [r7, #31]
 8007394:	e042      	b.n	800741c <UART_SetConfig+0x348>
 8007396:	bf00      	nop
 8007398:	efff69f3 	.word	0xefff69f3
 800739c:	40011000 	.word	0x40011000
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40004400 	.word	0x40004400
 80073a8:	40004800 	.word	0x40004800
 80073ac:	40004c00 	.word	0x40004c00
 80073b0:	40005000 	.word	0x40005000
 80073b4:	40011400 	.word	0x40011400
 80073b8:	40007800 	.word	0x40007800
 80073bc:	2310      	movs	r3, #16
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e02c      	b.n	800741c <UART_SetConfig+0x348>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a72      	ldr	r2, [pc, #456]	; (8007590 <UART_SetConfig+0x4bc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d125      	bne.n	8007418 <UART_SetConfig+0x344>
 80073cc:	4b71      	ldr	r3, [pc, #452]	; (8007594 <UART_SetConfig+0x4c0>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073da:	d017      	beq.n	800740c <UART_SetConfig+0x338>
 80073dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073e0:	d817      	bhi.n	8007412 <UART_SetConfig+0x33e>
 80073e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e6:	d00b      	beq.n	8007400 <UART_SetConfig+0x32c>
 80073e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ec:	d811      	bhi.n	8007412 <UART_SetConfig+0x33e>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <UART_SetConfig+0x326>
 80073f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f6:	d006      	beq.n	8007406 <UART_SetConfig+0x332>
 80073f8:	e00b      	b.n	8007412 <UART_SetConfig+0x33e>
 80073fa:	2300      	movs	r3, #0
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e00d      	b.n	800741c <UART_SetConfig+0x348>
 8007400:	2302      	movs	r3, #2
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e00a      	b.n	800741c <UART_SetConfig+0x348>
 8007406:	2304      	movs	r3, #4
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e007      	b.n	800741c <UART_SetConfig+0x348>
 800740c:	2308      	movs	r3, #8
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e004      	b.n	800741c <UART_SetConfig+0x348>
 8007412:	2310      	movs	r3, #16
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e001      	b.n	800741c <UART_SetConfig+0x348>
 8007418:	2310      	movs	r3, #16
 800741a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007424:	d15b      	bne.n	80074de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007426:	7ffb      	ldrb	r3, [r7, #31]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d828      	bhi.n	800747e <UART_SetConfig+0x3aa>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0x360>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007459 	.word	0x08007459
 8007438:	08007461 	.word	0x08007461
 800743c:	08007469 	.word	0x08007469
 8007440:	0800747f 	.word	0x0800747f
 8007444:	0800746f 	.word	0x0800746f
 8007448:	0800747f 	.word	0x0800747f
 800744c:	0800747f 	.word	0x0800747f
 8007450:	0800747f 	.word	0x0800747f
 8007454:	08007477 	.word	0x08007477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fd fb16 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 800745c:	61b8      	str	r0, [r7, #24]
        break;
 800745e:	e013      	b.n	8007488 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007460:	f7fd fb26 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8007464:	61b8      	str	r0, [r7, #24]
        break;
 8007466:	e00f      	b.n	8007488 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007468:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <UART_SetConfig+0x4c4>)
 800746a:	61bb      	str	r3, [r7, #24]
        break;
 800746c:	e00c      	b.n	8007488 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746e:	f7fd f9f9 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8007472:	61b8      	str	r0, [r7, #24]
        break;
 8007474:	e008      	b.n	8007488 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747a:	61bb      	str	r3, [r7, #24]
        break;
 800747c:	e004      	b.n	8007488 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	77bb      	strb	r3, [r7, #30]
        break;
 8007486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d074      	beq.n	8007578 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	005a      	lsls	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	441a      	add	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b0f      	cmp	r3, #15
 80074a8:	d916      	bls.n	80074d8 <UART_SetConfig+0x404>
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b0:	d212      	bcs.n	80074d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f023 030f 	bic.w	r3, r3, #15
 80074ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	085b      	lsrs	r3, r3, #1
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	89fb      	ldrh	r3, [r7, #14]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	89fa      	ldrh	r2, [r7, #14]
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	e04f      	b.n	8007578 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	77bb      	strb	r3, [r7, #30]
 80074dc:	e04c      	b.n	8007578 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d828      	bhi.n	8007536 <UART_SetConfig+0x462>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0x418>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007511 	.word	0x08007511
 80074f0:	08007519 	.word	0x08007519
 80074f4:	08007521 	.word	0x08007521
 80074f8:	08007537 	.word	0x08007537
 80074fc:	08007527 	.word	0x08007527
 8007500:	08007537 	.word	0x08007537
 8007504:	08007537 	.word	0x08007537
 8007508:	08007537 	.word	0x08007537
 800750c:	0800752f 	.word	0x0800752f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007510:	f7fd faba 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8007514:	61b8      	str	r0, [r7, #24]
        break;
 8007516:	e013      	b.n	8007540 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007518:	f7fd faca 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 800751c:	61b8      	str	r0, [r7, #24]
        break;
 800751e:	e00f      	b.n	8007540 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <UART_SetConfig+0x4c4>)
 8007522:	61bb      	str	r3, [r7, #24]
        break;
 8007524:	e00c      	b.n	8007540 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007526:	f7fd f99d 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800752a:	61b8      	str	r0, [r7, #24]
        break;
 800752c:	e008      	b.n	8007540 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	61bb      	str	r3, [r7, #24]
        break;
 8007534:	e004      	b.n	8007540 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	77bb      	strb	r3, [r7, #30]
        break;
 800753e:	bf00      	nop
    }

    if (pclk != 0U)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	085a      	lsrs	r2, r3, #1
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	441a      	add	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b0f      	cmp	r3, #15
 800755e:	d909      	bls.n	8007574 <UART_SetConfig+0x4a0>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007566:	d205      	bcs.n	8007574 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	b29a      	uxth	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	e001      	b.n	8007578 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007584:	7fbb      	ldrb	r3, [r7, #30]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40007c00 	.word	0x40007c00
 8007594:	40023800 	.word	0x40023800
 8007598:	00f42400 	.word	0x00f42400

0800759c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769a:	d10a      	bne.n	80076b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f0:	f7fa fe08 	bl	8002304 <HAL_GetTick>
 80076f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b08      	cmp	r3, #8
 8007702:	d10e      	bne.n	8007722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f81b 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e011      	b.n	8007746 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b09c      	sub	sp, #112	; 0x70
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	4613      	mov	r3, r2
 800775c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775e:	e0a7      	b.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007766:	f000 80a3 	beq.w	80078b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fa fdcb 	bl	8002304 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <UART_WaitOnFlagUntilTimeout+0x32>
 800777a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800777c:	2b00      	cmp	r3, #0
 800777e:	d13f      	bne.n	8007800 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007794:	667b      	str	r3, [r7, #100]	; 0x64
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e6      	bne.n	8007780 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	663b      	str	r3, [r7, #96]	; 0x60
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80077d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e5      	bne.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e068      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d050      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781c:	d148      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007826:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800783c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800784c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e6      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	66bb      	str	r3, [r7, #104]	; 0x68
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800787a:	623a      	str	r2, [r7, #32]
 800787c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	69f9      	ldr	r1, [r7, #28]
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	61bb      	str	r3, [r7, #24]
   return(result);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2220      	movs	r2, #32
 8007892:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e010      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	69da      	ldr	r2, [r3, #28]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4013      	ands	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	429a      	cmp	r2, r3
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	f43f af48 	beq.w	8007760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3770      	adds	r7, #112	; 0x70
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078dc:	b480      	push	{r7}
 80078de:	b097      	sub	sp, #92	; 0x5c
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4613      	mov	r3, r2
 80078e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	d10e      	bne.n	800792e <UART_Start_Receive_IT+0x52>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <UART_Start_Receive_IT+0x48>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800791e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007922:	e02d      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	22ff      	movs	r2, #255	; 0xff
 8007928:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800792c:	e028      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <UART_Start_Receive_IT+0x76>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <UART_Start_Receive_IT+0x6c>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	22ff      	movs	r2, #255	; 0xff
 8007942:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007946:	e01b      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	227f      	movs	r2, #127	; 0x7f
 800794c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007950:	e016      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795a:	d10d      	bne.n	8007978 <UART_Start_Receive_IT+0x9c>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <UART_Start_Receive_IT+0x92>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	227f      	movs	r2, #127	; 0x7f
 8007968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800796c:	e008      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	223f      	movs	r2, #63	; 0x3f
 8007972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007976:	e003      	b.n	8007980 <UART_Start_Receive_IT+0xa4>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2222      	movs	r2, #34	; 0x22
 800798c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	657b      	str	r3, [r7, #84]	; 0x54
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d107      	bne.n	80079de <UART_Start_Receive_IT+0x102>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <UART_Start_Receive_IT+0x184>)
 80079da:	669a      	str	r2, [r3, #104]	; 0x68
 80079dc:	e002      	b.n	80079e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4a20      	ldr	r2, [pc, #128]	; (8007a64 <UART_Start_Receive_IT+0x188>)
 80079e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d019      	beq.n	8007a20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_Start_Receive_IT+0x110>
 8007a1e:	e018      	b.n	8007a52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f043 0320 	orr.w	r3, r3, #32
 8007a34:	653b      	str	r3, [r7, #80]	; 0x50
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3e:	623b      	str	r3, [r7, #32]
 8007a40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	69f9      	ldr	r1, [r7, #28]
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e6      	bne.n	8007a20 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	375c      	adds	r7, #92	; 0x5c
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	08007d17 	.word	0x08007d17
 8007a64:	08007bb1 	.word	0x08007bb1

08007a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b095      	sub	sp, #84	; 0x54
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d118      	bne.n	8007b10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f023 0310 	bic.w	r3, r3, #16
 8007af2:	647b      	str	r3, [r7, #68]	; 0x44
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6979      	ldr	r1, [r7, #20]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e6      	bne.n	8007ade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b24:	bf00      	nop
 8007b26:	3754      	adds	r7, #84	; 0x54
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff faaa 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6979      	ldr	r1, [r7, #20]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e6      	bne.n	8007b64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fa76 	bl	8007094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ba8:	bf00      	nop
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b096      	sub	sp, #88	; 0x58
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bc8:	2b22      	cmp	r3, #34	; 0x22
 8007bca:	f040 8098 	bne.w	8007cfe <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	400a      	ands	r2, r1
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d17b      	bne.n	8007d0e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
 8007c36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e6      	bne.n	8007c16 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	623b      	str	r3, [r7, #32]
   return(result);
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c68:	633a      	str	r2, [r7, #48]	; 0x30
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e5      	bne.n	8007c48 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d12e      	bne.n	8007cf6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0310 	bic.w	r3, r3, #16
 8007cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	69b9      	ldr	r1, [r7, #24]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e6      	bne.n	8007c9e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d103      	bne.n	8007ce6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff f9e4 	bl	80070bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cf4:	e00b      	b.n	8007d0e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7f9 fc0c 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007cfc:	e007      	b.n	8007d0e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0208 	orr.w	r2, r2, #8
 8007d0c:	619a      	str	r2, [r3, #24]
}
 8007d0e:	bf00      	nop
 8007d10:	3758      	adds	r7, #88	; 0x58
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b096      	sub	sp, #88	; 0x58
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d2e:	2b22      	cmp	r3, #34	; 0x22
 8007d30:	f040 8098 	bne.w	8007e64 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d58:	1c9a      	adds	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d17b      	bne.n	8007e74 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e5      	bne.n	8007dae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d12e      	bne.n	8007e5c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6979      	ldr	r1, [r7, #20]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e6      	bne.n	8007e04 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d103      	bne.n	8007e4c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff f931 	bl	80070bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e5a:	e00b      	b.n	8007e74 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7f9 fb59 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007e62:	e007      	b.n	8007e74 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0208 	orr.w	r2, r2, #8
 8007e72:	619a      	str	r2, [r3, #24]
}
 8007e74:	bf00      	nop
 8007e76:	3758      	adds	r7, #88	; 0x58
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <atoi>:
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f000 b882 	b.w	8007f88 <strtol>

08007e84 <_strtol_l.constprop.0>:
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8a:	d001      	beq.n	8007e90 <_strtol_l.constprop.0+0xc>
 8007e8c:	2b24      	cmp	r3, #36	; 0x24
 8007e8e:	d906      	bls.n	8007e9e <_strtol_l.constprop.0+0x1a>
 8007e90:	f000 f8e0 	bl	8008054 <__errno>
 8007e94:	2316      	movs	r3, #22
 8007e96:	6003      	str	r3, [r0, #0]
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f84 <_strtol_l.constprop.0+0x100>
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	462e      	mov	r6, r5
 8007ea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eaa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007eae:	f017 0708 	ands.w	r7, r7, #8
 8007eb2:	d1f7      	bne.n	8007ea4 <_strtol_l.constprop.0+0x20>
 8007eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8007eb6:	d132      	bne.n	8007f1e <_strtol_l.constprop.0+0x9a>
 8007eb8:	782c      	ldrb	r4, [r5, #0]
 8007eba:	2701      	movs	r7, #1
 8007ebc:	1cb5      	adds	r5, r6, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d05b      	beq.n	8007f7a <_strtol_l.constprop.0+0xf6>
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d109      	bne.n	8007eda <_strtol_l.constprop.0+0x56>
 8007ec6:	2c30      	cmp	r4, #48	; 0x30
 8007ec8:	d107      	bne.n	8007eda <_strtol_l.constprop.0+0x56>
 8007eca:	782c      	ldrb	r4, [r5, #0]
 8007ecc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007ed0:	2c58      	cmp	r4, #88	; 0x58
 8007ed2:	d14d      	bne.n	8007f70 <_strtol_l.constprop.0+0xec>
 8007ed4:	786c      	ldrb	r4, [r5, #1]
 8007ed6:	2310      	movs	r3, #16
 8007ed8:	3502      	adds	r5, #2
 8007eda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ede:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ee2:	f04f 0e00 	mov.w	lr, #0
 8007ee6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007eea:	4676      	mov	r6, lr
 8007eec:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ef0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ef4:	f1bc 0f09 	cmp.w	ip, #9
 8007ef8:	d816      	bhi.n	8007f28 <_strtol_l.constprop.0+0xa4>
 8007efa:	4664      	mov	r4, ip
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	dd24      	ble.n	8007f4a <_strtol_l.constprop.0+0xc6>
 8007f00:	f1be 3fff 	cmp.w	lr, #4294967295
 8007f04:	d008      	beq.n	8007f18 <_strtol_l.constprop.0+0x94>
 8007f06:	45b1      	cmp	r9, r6
 8007f08:	d31c      	bcc.n	8007f44 <_strtol_l.constprop.0+0xc0>
 8007f0a:	d101      	bne.n	8007f10 <_strtol_l.constprop.0+0x8c>
 8007f0c:	45a2      	cmp	sl, r4
 8007f0e:	db19      	blt.n	8007f44 <_strtol_l.constprop.0+0xc0>
 8007f10:	fb06 4603 	mla	r6, r6, r3, r4
 8007f14:	f04f 0e01 	mov.w	lr, #1
 8007f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f1c:	e7e8      	b.n	8007ef0 <_strtol_l.constprop.0+0x6c>
 8007f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8007f20:	bf04      	itt	eq
 8007f22:	782c      	ldrbeq	r4, [r5, #0]
 8007f24:	1cb5      	addeq	r5, r6, #2
 8007f26:	e7ca      	b.n	8007ebe <_strtol_l.constprop.0+0x3a>
 8007f28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007f2c:	f1bc 0f19 	cmp.w	ip, #25
 8007f30:	d801      	bhi.n	8007f36 <_strtol_l.constprop.0+0xb2>
 8007f32:	3c37      	subs	r4, #55	; 0x37
 8007f34:	e7e2      	b.n	8007efc <_strtol_l.constprop.0+0x78>
 8007f36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007f3a:	f1bc 0f19 	cmp.w	ip, #25
 8007f3e:	d804      	bhi.n	8007f4a <_strtol_l.constprop.0+0xc6>
 8007f40:	3c57      	subs	r4, #87	; 0x57
 8007f42:	e7db      	b.n	8007efc <_strtol_l.constprop.0+0x78>
 8007f44:	f04f 3eff 	mov.w	lr, #4294967295
 8007f48:	e7e6      	b.n	8007f18 <_strtol_l.constprop.0+0x94>
 8007f4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007f4e:	d105      	bne.n	8007f5c <_strtol_l.constprop.0+0xd8>
 8007f50:	2322      	movs	r3, #34	; 0x22
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	4646      	mov	r6, r8
 8007f56:	b942      	cbnz	r2, 8007f6a <_strtol_l.constprop.0+0xe6>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	e79e      	b.n	8007e9a <_strtol_l.constprop.0+0x16>
 8007f5c:	b107      	cbz	r7, 8007f60 <_strtol_l.constprop.0+0xdc>
 8007f5e:	4276      	negs	r6, r6
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d0f9      	beq.n	8007f58 <_strtol_l.constprop.0+0xd4>
 8007f64:	f1be 0f00 	cmp.w	lr, #0
 8007f68:	d000      	beq.n	8007f6c <_strtol_l.constprop.0+0xe8>
 8007f6a:	1e69      	subs	r1, r5, #1
 8007f6c:	6011      	str	r1, [r2, #0]
 8007f6e:	e7f3      	b.n	8007f58 <_strtol_l.constprop.0+0xd4>
 8007f70:	2430      	movs	r4, #48	; 0x30
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1b1      	bne.n	8007eda <_strtol_l.constprop.0+0x56>
 8007f76:	2308      	movs	r3, #8
 8007f78:	e7af      	b.n	8007eda <_strtol_l.constprop.0+0x56>
 8007f7a:	2c30      	cmp	r4, #48	; 0x30
 8007f7c:	d0a5      	beq.n	8007eca <_strtol_l.constprop.0+0x46>
 8007f7e:	230a      	movs	r3, #10
 8007f80:	e7ab      	b.n	8007eda <_strtol_l.constprop.0+0x56>
 8007f82:	bf00      	nop
 8007f84:	080089d5 	.word	0x080089d5

08007f88 <strtol>:
 8007f88:	4613      	mov	r3, r2
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	4802      	ldr	r0, [pc, #8]	; (8007f98 <strtol+0x10>)
 8007f90:	6800      	ldr	r0, [r0, #0]
 8007f92:	f7ff bf77 	b.w	8007e84 <_strtol_l.constprop.0>
 8007f96:	bf00      	nop
 8007f98:	2000007c 	.word	0x2000007c

08007f9c <sniprintf>:
 8007f9c:	b40c      	push	{r2, r3}
 8007f9e:	b530      	push	{r4, r5, lr}
 8007fa0:	4b17      	ldr	r3, [pc, #92]	; (8008000 <sniprintf+0x64>)
 8007fa2:	1e0c      	subs	r4, r1, #0
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	da08      	bge.n	8007fbc <sniprintf+0x20>
 8007faa:	238b      	movs	r3, #139	; 0x8b
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	b01d      	add	sp, #116	; 0x74
 8007fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fb8:	b002      	add	sp, #8
 8007fba:	4770      	bx	lr
 8007fbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007fc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fc4:	bf14      	ite	ne
 8007fc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fca:	4623      	moveq	r3, r4
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fd4:	9002      	str	r0, [sp, #8]
 8007fd6:	9006      	str	r0, [sp, #24]
 8007fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fde:	ab21      	add	r3, sp, #132	; 0x84
 8007fe0:	a902      	add	r1, sp, #8
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	f000 f9b3 	bl	8008350 <_svfiprintf_r>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	bfbc      	itt	lt
 8007fee:	238b      	movlt	r3, #139	; 0x8b
 8007ff0:	602b      	strlt	r3, [r5, #0]
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d0dd      	beq.n	8007fb2 <sniprintf+0x16>
 8007ff6:	9b02      	ldr	r3, [sp, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	e7d9      	b.n	8007fb2 <sniprintf+0x16>
 8007ffe:	bf00      	nop
 8008000:	2000007c 	.word	0x2000007c

08008004 <siprintf>:
 8008004:	b40e      	push	{r1, r2, r3}
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008014:	4809      	ldr	r0, [pc, #36]	; (800803c <siprintf+0x38>)
 8008016:	9107      	str	r1, [sp, #28]
 8008018:	9104      	str	r1, [sp, #16]
 800801a:	4909      	ldr	r1, [pc, #36]	; (8008040 <siprintf+0x3c>)
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	a902      	add	r1, sp, #8
 8008028:	f000 f992 	bl	8008350 <_svfiprintf_r>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	b01c      	add	sp, #112	; 0x70
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	2000007c 	.word	0x2000007c
 8008040:	ffff0208 	.word	0xffff0208

08008044 <memset>:
 8008044:	4402      	add	r2, r0
 8008046:	4603      	mov	r3, r0
 8008048:	4293      	cmp	r3, r2
 800804a:	d100      	bne.n	800804e <memset+0xa>
 800804c:	4770      	bx	lr
 800804e:	f803 1b01 	strb.w	r1, [r3], #1
 8008052:	e7f9      	b.n	8008048 <memset+0x4>

08008054 <__errno>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <__errno+0x8>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	2000007c 	.word	0x2000007c

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 fc6a 	bl	800894c <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08008b10 	.word	0x08008b10
 800809c:	08008b10 	.word	0x08008b10
 80080a0:	08008b10 	.word	0x08008b10
 80080a4:	08008b14 	.word	0x08008b14

080080a8 <__retarget_lock_acquire_recursive>:
 80080a8:	4770      	bx	lr

080080aa <__retarget_lock_release_recursive>:
 80080aa:	4770      	bx	lr

080080ac <_free_r>:
 80080ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d044      	beq.n	800813c <_free_r+0x90>
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	9001      	str	r0, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f1a1 0404 	sub.w	r4, r1, #4
 80080be:	bfb8      	it	lt
 80080c0:	18e4      	addlt	r4, r4, r3
 80080c2:	f000 f8df 	bl	8008284 <__malloc_lock>
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <_free_r+0x94>)
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	b933      	cbnz	r3, 80080dc <_free_r+0x30>
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6014      	str	r4, [r2, #0]
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d8:	f000 b8da 	b.w	8008290 <__malloc_unlock>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d908      	bls.n	80080f2 <_free_r+0x46>
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	428b      	cmp	r3, r1
 80080e6:	bf01      	itttt	eq
 80080e8:	6819      	ldreq	r1, [r3, #0]
 80080ea:	685b      	ldreq	r3, [r3, #4]
 80080ec:	1949      	addeq	r1, r1, r5
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	e7ed      	b.n	80080ce <_free_r+0x22>
 80080f2:	461a      	mov	r2, r3
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	b10b      	cbz	r3, 80080fc <_free_r+0x50>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d9fa      	bls.n	80080f2 <_free_r+0x46>
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	1855      	adds	r5, r2, r1
 8008100:	42a5      	cmp	r5, r4
 8008102:	d10b      	bne.n	800811c <_free_r+0x70>
 8008104:	6824      	ldr	r4, [r4, #0]
 8008106:	4421      	add	r1, r4
 8008108:	1854      	adds	r4, r2, r1
 800810a:	42a3      	cmp	r3, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	d1e0      	bne.n	80080d2 <_free_r+0x26>
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6053      	str	r3, [r2, #4]
 8008116:	440c      	add	r4, r1
 8008118:	6014      	str	r4, [r2, #0]
 800811a:	e7da      	b.n	80080d2 <_free_r+0x26>
 800811c:	d902      	bls.n	8008124 <_free_r+0x78>
 800811e:	230c      	movs	r3, #12
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e7d6      	b.n	80080d2 <_free_r+0x26>
 8008124:	6825      	ldr	r5, [r4, #0]
 8008126:	1961      	adds	r1, r4, r5
 8008128:	428b      	cmp	r3, r1
 800812a:	bf04      	itt	eq
 800812c:	6819      	ldreq	r1, [r3, #0]
 800812e:	685b      	ldreq	r3, [r3, #4]
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	bf04      	itt	eq
 8008134:	1949      	addeq	r1, r1, r5
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	6054      	str	r4, [r2, #4]
 800813a:	e7ca      	b.n	80080d2 <_free_r+0x26>
 800813c:	b003      	add	sp, #12
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	20000528 	.word	0x20000528

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0e      	ldr	r6, [pc, #56]	; (8008180 <sbrk_aligned+0x3c>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 fba6 	bl	80088a0 <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fba1 	bl	80088a0 <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d00a      	beq.n	8008178 <sbrk_aligned+0x34>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d007      	beq.n	800817c <sbrk_aligned+0x38>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f000 fb96 	bl	80088a0 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d101      	bne.n	800817c <sbrk_aligned+0x38>
 8008178:	f04f 34ff 	mov.w	r4, #4294967295
 800817c:	4620      	mov	r0, r4
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	2000052c 	.word	0x2000052c

08008184 <_malloc_r>:
 8008184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008188:	1ccd      	adds	r5, r1, #3
 800818a:	f025 0503 	bic.w	r5, r5, #3
 800818e:	3508      	adds	r5, #8
 8008190:	2d0c      	cmp	r5, #12
 8008192:	bf38      	it	cc
 8008194:	250c      	movcc	r5, #12
 8008196:	2d00      	cmp	r5, #0
 8008198:	4607      	mov	r7, r0
 800819a:	db01      	blt.n	80081a0 <_malloc_r+0x1c>
 800819c:	42a9      	cmp	r1, r5
 800819e:	d905      	bls.n	80081ac <_malloc_r+0x28>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	2600      	movs	r6, #0
 80081a6:	4630      	mov	r0, r6
 80081a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008280 <_malloc_r+0xfc>
 80081b0:	f000 f868 	bl	8008284 <__malloc_lock>
 80081b4:	f8d8 3000 	ldr.w	r3, [r8]
 80081b8:	461c      	mov	r4, r3
 80081ba:	bb5c      	cbnz	r4, 8008214 <_malloc_r+0x90>
 80081bc:	4629      	mov	r1, r5
 80081be:	4638      	mov	r0, r7
 80081c0:	f7ff ffc0 	bl	8008144 <sbrk_aligned>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	4604      	mov	r4, r0
 80081c8:	d155      	bne.n	8008276 <_malloc_r+0xf2>
 80081ca:	f8d8 4000 	ldr.w	r4, [r8]
 80081ce:	4626      	mov	r6, r4
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	d145      	bne.n	8008260 <_malloc_r+0xdc>
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	d048      	beq.n	800826a <_malloc_r+0xe6>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	4631      	mov	r1, r6
 80081dc:	4638      	mov	r0, r7
 80081de:	eb04 0903 	add.w	r9, r4, r3
 80081e2:	f000 fb5d 	bl	80088a0 <_sbrk_r>
 80081e6:	4581      	cmp	r9, r0
 80081e8:	d13f      	bne.n	800826a <_malloc_r+0xe6>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	1a6d      	subs	r5, r5, r1
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ffa7 	bl	8008144 <sbrk_aligned>
 80081f6:	3001      	adds	r0, #1
 80081f8:	d037      	beq.n	800826a <_malloc_r+0xe6>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	442b      	add	r3, r5
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	f8d8 3000 	ldr.w	r3, [r8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d038      	beq.n	800827a <_malloc_r+0xf6>
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	42a2      	cmp	r2, r4
 800820c:	d12b      	bne.n	8008266 <_malloc_r+0xe2>
 800820e:	2200      	movs	r2, #0
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	e00f      	b.n	8008234 <_malloc_r+0xb0>
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	1b52      	subs	r2, r2, r5
 8008218:	d41f      	bmi.n	800825a <_malloc_r+0xd6>
 800821a:	2a0b      	cmp	r2, #11
 800821c:	d917      	bls.n	800824e <_malloc_r+0xca>
 800821e:	1961      	adds	r1, r4, r5
 8008220:	42a3      	cmp	r3, r4
 8008222:	6025      	str	r5, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	6059      	strne	r1, [r3, #4]
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	bf08      	it	eq
 800822c:	f8c8 1000 	streq.w	r1, [r8]
 8008230:	5162      	str	r2, [r4, r5]
 8008232:	604b      	str	r3, [r1, #4]
 8008234:	4638      	mov	r0, r7
 8008236:	f104 060b 	add.w	r6, r4, #11
 800823a:	f000 f829 	bl	8008290 <__malloc_unlock>
 800823e:	f026 0607 	bic.w	r6, r6, #7
 8008242:	1d23      	adds	r3, r4, #4
 8008244:	1af2      	subs	r2, r6, r3
 8008246:	d0ae      	beq.n	80081a6 <_malloc_r+0x22>
 8008248:	1b9b      	subs	r3, r3, r6
 800824a:	50a3      	str	r3, [r4, r2]
 800824c:	e7ab      	b.n	80081a6 <_malloc_r+0x22>
 800824e:	42a3      	cmp	r3, r4
 8008250:	6862      	ldr	r2, [r4, #4]
 8008252:	d1dd      	bne.n	8008210 <_malloc_r+0x8c>
 8008254:	f8c8 2000 	str.w	r2, [r8]
 8008258:	e7ec      	b.n	8008234 <_malloc_r+0xb0>
 800825a:	4623      	mov	r3, r4
 800825c:	6864      	ldr	r4, [r4, #4]
 800825e:	e7ac      	b.n	80081ba <_malloc_r+0x36>
 8008260:	4634      	mov	r4, r6
 8008262:	6876      	ldr	r6, [r6, #4]
 8008264:	e7b4      	b.n	80081d0 <_malloc_r+0x4c>
 8008266:	4613      	mov	r3, r2
 8008268:	e7cc      	b.n	8008204 <_malloc_r+0x80>
 800826a:	230c      	movs	r3, #12
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4638      	mov	r0, r7
 8008270:	f000 f80e 	bl	8008290 <__malloc_unlock>
 8008274:	e797      	b.n	80081a6 <_malloc_r+0x22>
 8008276:	6025      	str	r5, [r4, #0]
 8008278:	e7dc      	b.n	8008234 <_malloc_r+0xb0>
 800827a:	605b      	str	r3, [r3, #4]
 800827c:	deff      	udf	#255	; 0xff
 800827e:	bf00      	nop
 8008280:	20000528 	.word	0x20000528

08008284 <__malloc_lock>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__malloc_lock+0x8>)
 8008286:	f7ff bf0f 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 800828a:	bf00      	nop
 800828c:	20000524 	.word	0x20000524

08008290 <__malloc_unlock>:
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <__malloc_unlock+0x8>)
 8008292:	f7ff bf0a 	b.w	80080aa <__retarget_lock_release_recursive>
 8008296:	bf00      	nop
 8008298:	20000524 	.word	0x20000524

0800829c <__ssputs_r>:
 800829c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a0:	688e      	ldr	r6, [r1, #8]
 80082a2:	461f      	mov	r7, r3
 80082a4:	42be      	cmp	r6, r7
 80082a6:	680b      	ldr	r3, [r1, #0]
 80082a8:	4682      	mov	sl, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	4690      	mov	r8, r2
 80082ae:	d82c      	bhi.n	800830a <__ssputs_r+0x6e>
 80082b0:	898a      	ldrh	r2, [r1, #12]
 80082b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082b6:	d026      	beq.n	8008306 <__ssputs_r+0x6a>
 80082b8:	6965      	ldr	r5, [r4, #20]
 80082ba:	6909      	ldr	r1, [r1, #16]
 80082bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c0:	eba3 0901 	sub.w	r9, r3, r1
 80082c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082c8:	1c7b      	adds	r3, r7, #1
 80082ca:	444b      	add	r3, r9
 80082cc:	106d      	asrs	r5, r5, #1
 80082ce:	429d      	cmp	r5, r3
 80082d0:	bf38      	it	cc
 80082d2:	461d      	movcc	r5, r3
 80082d4:	0553      	lsls	r3, r2, #21
 80082d6:	d527      	bpl.n	8008328 <__ssputs_r+0x8c>
 80082d8:	4629      	mov	r1, r5
 80082da:	f7ff ff53 	bl	8008184 <_malloc_r>
 80082de:	4606      	mov	r6, r0
 80082e0:	b360      	cbz	r0, 800833c <__ssputs_r+0xa0>
 80082e2:	6921      	ldr	r1, [r4, #16]
 80082e4:	464a      	mov	r2, r9
 80082e6:	f000 faeb 	bl	80088c0 <memcpy>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	6126      	str	r6, [r4, #16]
 80082f8:	6165      	str	r5, [r4, #20]
 80082fa:	444e      	add	r6, r9
 80082fc:	eba5 0509 	sub.w	r5, r5, r9
 8008300:	6026      	str	r6, [r4, #0]
 8008302:	60a5      	str	r5, [r4, #8]
 8008304:	463e      	mov	r6, r7
 8008306:	42be      	cmp	r6, r7
 8008308:	d900      	bls.n	800830c <__ssputs_r+0x70>
 800830a:	463e      	mov	r6, r7
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	4632      	mov	r2, r6
 8008310:	4641      	mov	r1, r8
 8008312:	f000 faab 	bl	800886c <memmove>
 8008316:	68a3      	ldr	r3, [r4, #8]
 8008318:	1b9b      	subs	r3, r3, r6
 800831a:	60a3      	str	r3, [r4, #8]
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	4433      	add	r3, r6
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	2000      	movs	r0, #0
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	462a      	mov	r2, r5
 800832a:	f000 fad7 	bl	80088dc <_realloc_r>
 800832e:	4606      	mov	r6, r0
 8008330:	2800      	cmp	r0, #0
 8008332:	d1e0      	bne.n	80082f6 <__ssputs_r+0x5a>
 8008334:	6921      	ldr	r1, [r4, #16]
 8008336:	4650      	mov	r0, sl
 8008338:	f7ff feb8 	bl	80080ac <_free_r>
 800833c:	230c      	movs	r3, #12
 800833e:	f8ca 3000 	str.w	r3, [sl]
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e7e9      	b.n	8008324 <__ssputs_r+0x88>

08008350 <_svfiprintf_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4698      	mov	r8, r3
 8008356:	898b      	ldrh	r3, [r1, #12]
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	b09d      	sub	sp, #116	; 0x74
 800835c:	4607      	mov	r7, r0
 800835e:	460d      	mov	r5, r1
 8008360:	4614      	mov	r4, r2
 8008362:	d50e      	bpl.n	8008382 <_svfiprintf_r+0x32>
 8008364:	690b      	ldr	r3, [r1, #16]
 8008366:	b963      	cbnz	r3, 8008382 <_svfiprintf_r+0x32>
 8008368:	2140      	movs	r1, #64	; 0x40
 800836a:	f7ff ff0b 	bl	8008184 <_malloc_r>
 800836e:	6028      	str	r0, [r5, #0]
 8008370:	6128      	str	r0, [r5, #16]
 8008372:	b920      	cbnz	r0, 800837e <_svfiprintf_r+0x2e>
 8008374:	230c      	movs	r3, #12
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	e0d0      	b.n	8008520 <_svfiprintf_r+0x1d0>
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	616b      	str	r3, [r5, #20]
 8008382:	2300      	movs	r3, #0
 8008384:	9309      	str	r3, [sp, #36]	; 0x24
 8008386:	2320      	movs	r3, #32
 8008388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800838c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008390:	2330      	movs	r3, #48	; 0x30
 8008392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008538 <_svfiprintf_r+0x1e8>
 8008396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800839a:	f04f 0901 	mov.w	r9, #1
 800839e:	4623      	mov	r3, r4
 80083a0:	469a      	mov	sl, r3
 80083a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a6:	b10a      	cbz	r2, 80083ac <_svfiprintf_r+0x5c>
 80083a8:	2a25      	cmp	r2, #37	; 0x25
 80083aa:	d1f9      	bne.n	80083a0 <_svfiprintf_r+0x50>
 80083ac:	ebba 0b04 	subs.w	fp, sl, r4
 80083b0:	d00b      	beq.n	80083ca <_svfiprintf_r+0x7a>
 80083b2:	465b      	mov	r3, fp
 80083b4:	4622      	mov	r2, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ff6f 	bl	800829c <__ssputs_r>
 80083be:	3001      	adds	r0, #1
 80083c0:	f000 80a9 	beq.w	8008516 <_svfiprintf_r+0x1c6>
 80083c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c6:	445a      	add	r2, fp
 80083c8:	9209      	str	r2, [sp, #36]	; 0x24
 80083ca:	f89a 3000 	ldrb.w	r3, [sl]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80a1 	beq.w	8008516 <_svfiprintf_r+0x1c6>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083de:	f10a 0a01 	add.w	sl, sl, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ea:	931a      	str	r3, [sp, #104]	; 0x68
 80083ec:	4654      	mov	r4, sl
 80083ee:	2205      	movs	r2, #5
 80083f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f4:	4850      	ldr	r0, [pc, #320]	; (8008538 <_svfiprintf_r+0x1e8>)
 80083f6:	f7f7 ff0b 	bl	8000210 <memchr>
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	b9d8      	cbnz	r0, 8008436 <_svfiprintf_r+0xe6>
 80083fe:	06d0      	lsls	r0, r2, #27
 8008400:	bf44      	itt	mi
 8008402:	2320      	movmi	r3, #32
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008408:	0711      	lsls	r1, r2, #28
 800840a:	bf44      	itt	mi
 800840c:	232b      	movmi	r3, #43	; 0x2b
 800840e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008412:	f89a 3000 	ldrb.w	r3, [sl]
 8008416:	2b2a      	cmp	r3, #42	; 0x2a
 8008418:	d015      	beq.n	8008446 <_svfiprintf_r+0xf6>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	4654      	mov	r4, sl
 800841e:	2000      	movs	r0, #0
 8008420:	f04f 0c0a 	mov.w	ip, #10
 8008424:	4621      	mov	r1, r4
 8008426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800842a:	3b30      	subs	r3, #48	; 0x30
 800842c:	2b09      	cmp	r3, #9
 800842e:	d94d      	bls.n	80084cc <_svfiprintf_r+0x17c>
 8008430:	b1b0      	cbz	r0, 8008460 <_svfiprintf_r+0x110>
 8008432:	9207      	str	r2, [sp, #28]
 8008434:	e014      	b.n	8008460 <_svfiprintf_r+0x110>
 8008436:	eba0 0308 	sub.w	r3, r0, r8
 800843a:	fa09 f303 	lsl.w	r3, r9, r3
 800843e:	4313      	orrs	r3, r2
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	46a2      	mov	sl, r4
 8008444:	e7d2      	b.n	80083ec <_svfiprintf_r+0x9c>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	1d19      	adds	r1, r3, #4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	9103      	str	r1, [sp, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbb      	ittet	lt
 8008452:	425b      	neglt	r3, r3
 8008454:	f042 0202 	orrlt.w	r2, r2, #2
 8008458:	9307      	strge	r3, [sp, #28]
 800845a:	9307      	strlt	r3, [sp, #28]
 800845c:	bfb8      	it	lt
 800845e:	9204      	strlt	r2, [sp, #16]
 8008460:	7823      	ldrb	r3, [r4, #0]
 8008462:	2b2e      	cmp	r3, #46	; 0x2e
 8008464:	d10c      	bne.n	8008480 <_svfiprintf_r+0x130>
 8008466:	7863      	ldrb	r3, [r4, #1]
 8008468:	2b2a      	cmp	r3, #42	; 0x2a
 800846a:	d134      	bne.n	80084d6 <_svfiprintf_r+0x186>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	9203      	str	r2, [sp, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bfb8      	it	lt
 8008478:	f04f 33ff 	movlt.w	r3, #4294967295
 800847c:	3402      	adds	r4, #2
 800847e:	9305      	str	r3, [sp, #20]
 8008480:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008548 <_svfiprintf_r+0x1f8>
 8008484:	7821      	ldrb	r1, [r4, #0]
 8008486:	2203      	movs	r2, #3
 8008488:	4650      	mov	r0, sl
 800848a:	f7f7 fec1 	bl	8000210 <memchr>
 800848e:	b138      	cbz	r0, 80084a0 <_svfiprintf_r+0x150>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	eba0 000a 	sub.w	r0, r0, sl
 8008496:	2240      	movs	r2, #64	; 0x40
 8008498:	4082      	lsls	r2, r0
 800849a:	4313      	orrs	r3, r2
 800849c:	3401      	adds	r4, #1
 800849e:	9304      	str	r3, [sp, #16]
 80084a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a4:	4825      	ldr	r0, [pc, #148]	; (800853c <_svfiprintf_r+0x1ec>)
 80084a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084aa:	2206      	movs	r2, #6
 80084ac:	f7f7 feb0 	bl	8000210 <memchr>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d038      	beq.n	8008526 <_svfiprintf_r+0x1d6>
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <_svfiprintf_r+0x1f0>)
 80084b6:	bb1b      	cbnz	r3, 8008500 <_svfiprintf_r+0x1b0>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	3307      	adds	r3, #7
 80084bc:	f023 0307 	bic.w	r3, r3, #7
 80084c0:	3308      	adds	r3, #8
 80084c2:	9303      	str	r3, [sp, #12]
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	4433      	add	r3, r6
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	e768      	b.n	800839e <_svfiprintf_r+0x4e>
 80084cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80084d0:	460c      	mov	r4, r1
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7a6      	b.n	8008424 <_svfiprintf_r+0xd4>
 80084d6:	2300      	movs	r3, #0
 80084d8:	3401      	adds	r4, #1
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	4619      	mov	r1, r3
 80084de:	f04f 0c0a 	mov.w	ip, #10
 80084e2:	4620      	mov	r0, r4
 80084e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e8:	3a30      	subs	r2, #48	; 0x30
 80084ea:	2a09      	cmp	r2, #9
 80084ec:	d903      	bls.n	80084f6 <_svfiprintf_r+0x1a6>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0c6      	beq.n	8008480 <_svfiprintf_r+0x130>
 80084f2:	9105      	str	r1, [sp, #20]
 80084f4:	e7c4      	b.n	8008480 <_svfiprintf_r+0x130>
 80084f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084fa:	4604      	mov	r4, r0
 80084fc:	2301      	movs	r3, #1
 80084fe:	e7f0      	b.n	80084e2 <_svfiprintf_r+0x192>
 8008500:	ab03      	add	r3, sp, #12
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	462a      	mov	r2, r5
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <_svfiprintf_r+0x1f4>)
 8008508:	a904      	add	r1, sp, #16
 800850a:	4638      	mov	r0, r7
 800850c:	f3af 8000 	nop.w
 8008510:	1c42      	adds	r2, r0, #1
 8008512:	4606      	mov	r6, r0
 8008514:	d1d6      	bne.n	80084c4 <_svfiprintf_r+0x174>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	065b      	lsls	r3, r3, #25
 800851a:	f53f af2d 	bmi.w	8008378 <_svfiprintf_r+0x28>
 800851e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008520:	b01d      	add	sp, #116	; 0x74
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <_svfiprintf_r+0x1f4>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4638      	mov	r0, r7
 8008532:	f000 f879 	bl	8008628 <_printf_i>
 8008536:	e7eb      	b.n	8008510 <_svfiprintf_r+0x1c0>
 8008538:	08008ad5 	.word	0x08008ad5
 800853c:	08008adf 	.word	0x08008adf
 8008540:	00000000 	.word	0x00000000
 8008544:	0800829d 	.word	0x0800829d
 8008548:	08008adb 	.word	0x08008adb

0800854c <_printf_common>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	4616      	mov	r6, r2
 8008552:	4699      	mov	r9, r3
 8008554:	688a      	ldr	r2, [r1, #8]
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800855c:	4293      	cmp	r3, r2
 800855e:	bfb8      	it	lt
 8008560:	4613      	movlt	r3, r2
 8008562:	6033      	str	r3, [r6, #0]
 8008564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008568:	4607      	mov	r7, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b10a      	cbz	r2, 8008572 <_printf_common+0x26>
 800856e:	3301      	adds	r3, #1
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	0699      	lsls	r1, r3, #26
 8008576:	bf42      	ittt	mi
 8008578:	6833      	ldrmi	r3, [r6, #0]
 800857a:	3302      	addmi	r3, #2
 800857c:	6033      	strmi	r3, [r6, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	f015 0506 	ands.w	r5, r5, #6
 8008584:	d106      	bne.n	8008594 <_printf_common+0x48>
 8008586:	f104 0a19 	add.w	sl, r4, #25
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	6832      	ldr	r2, [r6, #0]
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	42ab      	cmp	r3, r5
 8008592:	dc26      	bgt.n	80085e2 <_printf_common+0x96>
 8008594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008598:	1e13      	subs	r3, r2, #0
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	bf18      	it	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	0692      	lsls	r2, r2, #26
 80085a2:	d42b      	bmi.n	80085fc <_printf_common+0xb0>
 80085a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a8:	4649      	mov	r1, r9
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c0      	blx	r8
 80085ae:	3001      	adds	r0, #1
 80085b0:	d01e      	beq.n	80085f0 <_printf_common+0xa4>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	f003 0306 	and.w	r3, r3, #6
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	bf02      	ittt	eq
 80085be:	68e5      	ldreq	r5, [r4, #12]
 80085c0:	6833      	ldreq	r3, [r6, #0]
 80085c2:	1aed      	subeq	r5, r5, r3
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	bf0c      	ite	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	2500      	movne	r5, #0
 80085ce:	4293      	cmp	r3, r2
 80085d0:	bfc4      	itt	gt
 80085d2:	1a9b      	subgt	r3, r3, r2
 80085d4:	18ed      	addgt	r5, r5, r3
 80085d6:	2600      	movs	r6, #0
 80085d8:	341a      	adds	r4, #26
 80085da:	42b5      	cmp	r5, r6
 80085dc:	d11a      	bne.n	8008614 <_printf_common+0xc8>
 80085de:	2000      	movs	r0, #0
 80085e0:	e008      	b.n	80085f4 <_printf_common+0xa8>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4652      	mov	r2, sl
 80085e6:	4649      	mov	r1, r9
 80085e8:	4638      	mov	r0, r7
 80085ea:	47c0      	blx	r8
 80085ec:	3001      	adds	r0, #1
 80085ee:	d103      	bne.n	80085f8 <_printf_common+0xac>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f8:	3501      	adds	r5, #1
 80085fa:	e7c6      	b.n	800858a <_printf_common+0x3e>
 80085fc:	18e1      	adds	r1, r4, r3
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	2030      	movs	r0, #48	; 0x30
 8008602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008606:	4422      	add	r2, r4
 8008608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800860c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008610:	3302      	adds	r3, #2
 8008612:	e7c7      	b.n	80085a4 <_printf_common+0x58>
 8008614:	2301      	movs	r3, #1
 8008616:	4622      	mov	r2, r4
 8008618:	4649      	mov	r1, r9
 800861a:	4638      	mov	r0, r7
 800861c:	47c0      	blx	r8
 800861e:	3001      	adds	r0, #1
 8008620:	d0e6      	beq.n	80085f0 <_printf_common+0xa4>
 8008622:	3601      	adds	r6, #1
 8008624:	e7d9      	b.n	80085da <_printf_common+0x8e>
	...

08008628 <_printf_i>:
 8008628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	7e0f      	ldrb	r7, [r1, #24]
 800862e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008630:	2f78      	cmp	r7, #120	; 0x78
 8008632:	4691      	mov	r9, r2
 8008634:	4680      	mov	r8, r0
 8008636:	460c      	mov	r4, r1
 8008638:	469a      	mov	sl, r3
 800863a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800863e:	d807      	bhi.n	8008650 <_printf_i+0x28>
 8008640:	2f62      	cmp	r7, #98	; 0x62
 8008642:	d80a      	bhi.n	800865a <_printf_i+0x32>
 8008644:	2f00      	cmp	r7, #0
 8008646:	f000 80d4 	beq.w	80087f2 <_printf_i+0x1ca>
 800864a:	2f58      	cmp	r7, #88	; 0x58
 800864c:	f000 80c0 	beq.w	80087d0 <_printf_i+0x1a8>
 8008650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008658:	e03a      	b.n	80086d0 <_printf_i+0xa8>
 800865a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800865e:	2b15      	cmp	r3, #21
 8008660:	d8f6      	bhi.n	8008650 <_printf_i+0x28>
 8008662:	a101      	add	r1, pc, #4	; (adr r1, 8008668 <_printf_i+0x40>)
 8008664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008668:	080086c1 	.word	0x080086c1
 800866c:	080086d5 	.word	0x080086d5
 8008670:	08008651 	.word	0x08008651
 8008674:	08008651 	.word	0x08008651
 8008678:	08008651 	.word	0x08008651
 800867c:	08008651 	.word	0x08008651
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008651 	.word	0x08008651
 8008688:	08008651 	.word	0x08008651
 800868c:	08008651 	.word	0x08008651
 8008690:	08008651 	.word	0x08008651
 8008694:	080087d9 	.word	0x080087d9
 8008698:	08008701 	.word	0x08008701
 800869c:	08008793 	.word	0x08008793
 80086a0:	08008651 	.word	0x08008651
 80086a4:	08008651 	.word	0x08008651
 80086a8:	080087fb 	.word	0x080087fb
 80086ac:	08008651 	.word	0x08008651
 80086b0:	08008701 	.word	0x08008701
 80086b4:	08008651 	.word	0x08008651
 80086b8:	08008651 	.word	0x08008651
 80086bc:	0800879b 	.word	0x0800879b
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	602a      	str	r2, [r5, #0]
 80086c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d0:	2301      	movs	r3, #1
 80086d2:	e09f      	b.n	8008814 <_printf_i+0x1ec>
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	0607      	lsls	r7, r0, #24
 80086da:	f103 0104 	add.w	r1, r3, #4
 80086de:	6029      	str	r1, [r5, #0]
 80086e0:	d501      	bpl.n	80086e6 <_printf_i+0xbe>
 80086e2:	681e      	ldr	r6, [r3, #0]
 80086e4:	e003      	b.n	80086ee <_printf_i+0xc6>
 80086e6:	0646      	lsls	r6, r0, #25
 80086e8:	d5fb      	bpl.n	80086e2 <_printf_i+0xba>
 80086ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	da03      	bge.n	80086fa <_printf_i+0xd2>
 80086f2:	232d      	movs	r3, #45	; 0x2d
 80086f4:	4276      	negs	r6, r6
 80086f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fa:	485a      	ldr	r0, [pc, #360]	; (8008864 <_printf_i+0x23c>)
 80086fc:	230a      	movs	r3, #10
 80086fe:	e012      	b.n	8008726 <_printf_i+0xfe>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1d19      	adds	r1, r3, #4
 8008706:	6029      	str	r1, [r5, #0]
 8008708:	0605      	lsls	r5, r0, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0xe8>
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0xee>
 8008710:	0641      	lsls	r1, r0, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0xe4>
 8008714:	881e      	ldrh	r6, [r3, #0]
 8008716:	4853      	ldr	r0, [pc, #332]	; (8008864 <_printf_i+0x23c>)
 8008718:	2f6f      	cmp	r7, #111	; 0x6f
 800871a:	bf0c      	ite	eq
 800871c:	2308      	moveq	r3, #8
 800871e:	230a      	movne	r3, #10
 8008720:	2100      	movs	r1, #0
 8008722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008726:	6865      	ldr	r5, [r4, #4]
 8008728:	60a5      	str	r5, [r4, #8]
 800872a:	2d00      	cmp	r5, #0
 800872c:	bfa2      	ittt	ge
 800872e:	6821      	ldrge	r1, [r4, #0]
 8008730:	f021 0104 	bicge.w	r1, r1, #4
 8008734:	6021      	strge	r1, [r4, #0]
 8008736:	b90e      	cbnz	r6, 800873c <_printf_i+0x114>
 8008738:	2d00      	cmp	r5, #0
 800873a:	d04b      	beq.n	80087d4 <_printf_i+0x1ac>
 800873c:	4615      	mov	r5, r2
 800873e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008742:	fb03 6711 	mls	r7, r3, r1, r6
 8008746:	5dc7      	ldrb	r7, [r0, r7]
 8008748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800874c:	4637      	mov	r7, r6
 800874e:	42bb      	cmp	r3, r7
 8008750:	460e      	mov	r6, r1
 8008752:	d9f4      	bls.n	800873e <_printf_i+0x116>
 8008754:	2b08      	cmp	r3, #8
 8008756:	d10b      	bne.n	8008770 <_printf_i+0x148>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	07de      	lsls	r6, r3, #31
 800875c:	d508      	bpl.n	8008770 <_printf_i+0x148>
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	6861      	ldr	r1, [r4, #4]
 8008762:	4299      	cmp	r1, r3
 8008764:	bfde      	ittt	le
 8008766:	2330      	movle	r3, #48	; 0x30
 8008768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800876c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008770:	1b52      	subs	r2, r2, r5
 8008772:	6122      	str	r2, [r4, #16]
 8008774:	f8cd a000 	str.w	sl, [sp]
 8008778:	464b      	mov	r3, r9
 800877a:	aa03      	add	r2, sp, #12
 800877c:	4621      	mov	r1, r4
 800877e:	4640      	mov	r0, r8
 8008780:	f7ff fee4 	bl	800854c <_printf_common>
 8008784:	3001      	adds	r0, #1
 8008786:	d14a      	bne.n	800881e <_printf_i+0x1f6>
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	b004      	add	sp, #16
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f043 0320 	orr.w	r3, r3, #32
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	4833      	ldr	r0, [pc, #204]	; (8008868 <_printf_i+0x240>)
 800879c:	2778      	movs	r7, #120	; 0x78
 800879e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	6829      	ldr	r1, [r5, #0]
 80087a6:	061f      	lsls	r7, r3, #24
 80087a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ac:	d402      	bmi.n	80087b4 <_printf_i+0x18c>
 80087ae:	065f      	lsls	r7, r3, #25
 80087b0:	bf48      	it	mi
 80087b2:	b2b6      	uxthmi	r6, r6
 80087b4:	07df      	lsls	r7, r3, #31
 80087b6:	bf48      	it	mi
 80087b8:	f043 0320 	orrmi.w	r3, r3, #32
 80087bc:	6029      	str	r1, [r5, #0]
 80087be:	bf48      	it	mi
 80087c0:	6023      	strmi	r3, [r4, #0]
 80087c2:	b91e      	cbnz	r6, 80087cc <_printf_i+0x1a4>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	f023 0320 	bic.w	r3, r3, #32
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	2310      	movs	r3, #16
 80087ce:	e7a7      	b.n	8008720 <_printf_i+0xf8>
 80087d0:	4824      	ldr	r0, [pc, #144]	; (8008864 <_printf_i+0x23c>)
 80087d2:	e7e4      	b.n	800879e <_printf_i+0x176>
 80087d4:	4615      	mov	r5, r2
 80087d6:	e7bd      	b.n	8008754 <_printf_i+0x12c>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	6826      	ldr	r6, [r4, #0]
 80087dc:	6961      	ldr	r1, [r4, #20]
 80087de:	1d18      	adds	r0, r3, #4
 80087e0:	6028      	str	r0, [r5, #0]
 80087e2:	0635      	lsls	r5, r6, #24
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	d501      	bpl.n	80087ec <_printf_i+0x1c4>
 80087e8:	6019      	str	r1, [r3, #0]
 80087ea:	e002      	b.n	80087f2 <_printf_i+0x1ca>
 80087ec:	0670      	lsls	r0, r6, #25
 80087ee:	d5fb      	bpl.n	80087e8 <_printf_i+0x1c0>
 80087f0:	8019      	strh	r1, [r3, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	6123      	str	r3, [r4, #16]
 80087f6:	4615      	mov	r5, r2
 80087f8:	e7bc      	b.n	8008774 <_printf_i+0x14c>
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	1d1a      	adds	r2, r3, #4
 80087fe:	602a      	str	r2, [r5, #0]
 8008800:	681d      	ldr	r5, [r3, #0]
 8008802:	6862      	ldr	r2, [r4, #4]
 8008804:	2100      	movs	r1, #0
 8008806:	4628      	mov	r0, r5
 8008808:	f7f7 fd02 	bl	8000210 <memchr>
 800880c:	b108      	cbz	r0, 8008812 <_printf_i+0x1ea>
 800880e:	1b40      	subs	r0, r0, r5
 8008810:	6060      	str	r0, [r4, #4]
 8008812:	6863      	ldr	r3, [r4, #4]
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	2300      	movs	r3, #0
 8008818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881c:	e7aa      	b.n	8008774 <_printf_i+0x14c>
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	462a      	mov	r2, r5
 8008822:	4649      	mov	r1, r9
 8008824:	4640      	mov	r0, r8
 8008826:	47d0      	blx	sl
 8008828:	3001      	adds	r0, #1
 800882a:	d0ad      	beq.n	8008788 <_printf_i+0x160>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	079b      	lsls	r3, r3, #30
 8008830:	d413      	bmi.n	800885a <_printf_i+0x232>
 8008832:	68e0      	ldr	r0, [r4, #12]
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	4298      	cmp	r0, r3
 8008838:	bfb8      	it	lt
 800883a:	4618      	movlt	r0, r3
 800883c:	e7a6      	b.n	800878c <_printf_i+0x164>
 800883e:	2301      	movs	r3, #1
 8008840:	4632      	mov	r2, r6
 8008842:	4649      	mov	r1, r9
 8008844:	4640      	mov	r0, r8
 8008846:	47d0      	blx	sl
 8008848:	3001      	adds	r0, #1
 800884a:	d09d      	beq.n	8008788 <_printf_i+0x160>
 800884c:	3501      	adds	r5, #1
 800884e:	68e3      	ldr	r3, [r4, #12]
 8008850:	9903      	ldr	r1, [sp, #12]
 8008852:	1a5b      	subs	r3, r3, r1
 8008854:	42ab      	cmp	r3, r5
 8008856:	dcf2      	bgt.n	800883e <_printf_i+0x216>
 8008858:	e7eb      	b.n	8008832 <_printf_i+0x20a>
 800885a:	2500      	movs	r5, #0
 800885c:	f104 0619 	add.w	r6, r4, #25
 8008860:	e7f5      	b.n	800884e <_printf_i+0x226>
 8008862:	bf00      	nop
 8008864:	08008ae6 	.word	0x08008ae6
 8008868:	08008af7 	.word	0x08008af7

0800886c <memmove>:
 800886c:	4288      	cmp	r0, r1
 800886e:	b510      	push	{r4, lr}
 8008870:	eb01 0402 	add.w	r4, r1, r2
 8008874:	d902      	bls.n	800887c <memmove+0x10>
 8008876:	4284      	cmp	r4, r0
 8008878:	4623      	mov	r3, r4
 800887a:	d807      	bhi.n	800888c <memmove+0x20>
 800887c:	1e43      	subs	r3, r0, #1
 800887e:	42a1      	cmp	r1, r4
 8008880:	d008      	beq.n	8008894 <memmove+0x28>
 8008882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800888a:	e7f8      	b.n	800887e <memmove+0x12>
 800888c:	4402      	add	r2, r0
 800888e:	4601      	mov	r1, r0
 8008890:	428a      	cmp	r2, r1
 8008892:	d100      	bne.n	8008896 <memmove+0x2a>
 8008894:	bd10      	pop	{r4, pc}
 8008896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800889a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800889e:	e7f7      	b.n	8008890 <memmove+0x24>

080088a0 <_sbrk_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d06      	ldr	r5, [pc, #24]	; (80088bc <_sbrk_r+0x1c>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	602b      	str	r3, [r5, #0]
 80088ac:	f7f9 f988 	bl	8001bc0 <_sbrk>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_sbrk_r+0x1a>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_sbrk_r+0x1a>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000520 	.word	0x20000520

080088c0 <memcpy>:
 80088c0:	440a      	add	r2, r1
 80088c2:	4291      	cmp	r1, r2
 80088c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c8:	d100      	bne.n	80088cc <memcpy+0xc>
 80088ca:	4770      	bx	lr
 80088cc:	b510      	push	{r4, lr}
 80088ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d6:	4291      	cmp	r1, r2
 80088d8:	d1f9      	bne.n	80088ce <memcpy+0xe>
 80088da:	bd10      	pop	{r4, pc}

080088dc <_realloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4680      	mov	r8, r0
 80088e2:	4614      	mov	r4, r2
 80088e4:	460e      	mov	r6, r1
 80088e6:	b921      	cbnz	r1, 80088f2 <_realloc_r+0x16>
 80088e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	4611      	mov	r1, r2
 80088ee:	f7ff bc49 	b.w	8008184 <_malloc_r>
 80088f2:	b92a      	cbnz	r2, 8008900 <_realloc_r+0x24>
 80088f4:	f7ff fbda 	bl	80080ac <_free_r>
 80088f8:	4625      	mov	r5, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f000 f81b 	bl	800893a <_malloc_usable_size_r>
 8008904:	4284      	cmp	r4, r0
 8008906:	4607      	mov	r7, r0
 8008908:	d802      	bhi.n	8008910 <_realloc_r+0x34>
 800890a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800890e:	d812      	bhi.n	8008936 <_realloc_r+0x5a>
 8008910:	4621      	mov	r1, r4
 8008912:	4640      	mov	r0, r8
 8008914:	f7ff fc36 	bl	8008184 <_malloc_r>
 8008918:	4605      	mov	r5, r0
 800891a:	2800      	cmp	r0, #0
 800891c:	d0ed      	beq.n	80088fa <_realloc_r+0x1e>
 800891e:	42bc      	cmp	r4, r7
 8008920:	4622      	mov	r2, r4
 8008922:	4631      	mov	r1, r6
 8008924:	bf28      	it	cs
 8008926:	463a      	movcs	r2, r7
 8008928:	f7ff ffca 	bl	80088c0 <memcpy>
 800892c:	4631      	mov	r1, r6
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fbbc 	bl	80080ac <_free_r>
 8008934:	e7e1      	b.n	80088fa <_realloc_r+0x1e>
 8008936:	4635      	mov	r5, r6
 8008938:	e7df      	b.n	80088fa <_realloc_r+0x1e>

0800893a <_malloc_usable_size_r>:
 800893a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893e:	1f18      	subs	r0, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbc      	itt	lt
 8008944:	580b      	ldrlt	r3, [r1, r0]
 8008946:	18c0      	addlt	r0, r0, r3
 8008948:	4770      	bx	lr
	...

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
